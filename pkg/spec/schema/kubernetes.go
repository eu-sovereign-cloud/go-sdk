// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

// Defines values for KubernetesNodeTaintEffect.
const (
	KubernetesNodeTaintEffectNoExecute        KubernetesNodeTaintEffect = "NoExecute"
	KubernetesNodeTaintEffectNoSchedule       KubernetesNodeTaintEffect = "NoSchedule"
	KubernetesNodeTaintEffectPreferNoSchedule KubernetesNodeTaintEffect = "PreferNoSchedule"
)

// KubernetesCluster defines model for KubernetesCluster.
type KubernetesCluster struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations Annotations `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for regional resources with name, permission, modification, type, tenant and workspace and region information.
	Metadata *RegionalWorkspaceResourceMetadata `json:"metadata,omitempty"`

	// Spec Specification of the  kubernetes cluster, including its configuration
	// and network settings.
	//
	// Changing the sku of the cluster will cause the cluster to be recreated.
	Spec KubernetesClusterSpec `json:"spec"`

	// Status Represents the status of the  kubernetes cluster.
	Status *KubernetesClusterStatus `json:"status,omitempty"`
}

// KubernetesClusterSpec Specification of the  kubernetes cluster, including its configuration
// and network settings.
//
// Changing the sku of the cluster will cause the cluster to be recreated.
type KubernetesClusterSpec struct {
	// PodCidr CIDR range for the pod network. This is used to allocate IP addresses
	// for pods in the cluster. The CIDR must be a valid IPv4 or IPv6 CIDR.
	// If not specified, a default provider CIDR will be used.
	PodCidr *string `json:"podCidr,omitempty"`

	// RestrictKubernetesApi Restrict access to the Kubernetes API to specific IP addresses or ranges.
	// This is a security feature to limit access to the cluster. If not specified,
	// the Kubernetes API is accessible from any IP address. Nodes that are
	// part of the cluster are always allowed to access the Kubernetes API.
	RestrictKubernetesApi *[]string `json:"restrictKubernetesApi,omitempty"`

	// ServiceCidr CIDR range for the service network. This is used to allocate IP addresses
	// for services in the cluster. The CIDR must be a valid IPv4 or IPv6 CIDR.
	// If not specified, a default provider CIDR will be used.
	ServiceCidr *string `json:"serviceCidr,omitempty"`

	// SkuRef Reference to the SKU of the Kubernetes cluster.
	SkuRef Reference `json:"skuRef"`
}

// KubernetesClusterStatus defines model for KubernetesClusterStatus.
type KubernetesClusterStatus struct {
	Conditions []StatusCondition `json:"conditions"`

	// KubeConfig The kube config file for the cluster. This file is used to configure
	// access to the cluster using kubectl or other Kubernetes clients.
	KubeConfig *string `json:"kubeConfig,omitempty"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}

// KubernetesNodePool defines model for KubernetesNodePool.
type KubernetesNodePool struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations Annotations `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for regional resources with name, permission, modification, type, tenant and workspace and region information.
	Metadata *RegionalWorkspaceResourceMetadata `json:"metadata,omitempty"`

	// Spec Specification of the  kubernetes node pool, including its configuration
	// and network settings. Since the node pool is, all nodes in the pool
	// have a IP address and are accessible from the internet.
	Spec KubernetesNodePoolSpec `json:"spec"`

	// Status Represents the status of the  kubernetes node pool. The status
	// represents if the instances of the node pool are provisioned to the
	// cluster.
	Status *KubernetesNodePoolStatus `json:"status,omitempty"`
}

// KubernetesNodePoolSpec Specification of the  kubernetes node pool, including its configuration
// and network settings. Since the node pool is, all nodes in the pool
// have a IP address and are accessible from the internet.
type KubernetesNodePoolSpec struct {
	// Instances The number of instances in the node pool. This field is required to
	// specify the number of nodes in the node pool.
	Instances int `json:"instances"`

	// NodeTemplate Template for creating nodes in the node pool. The template includes
	// the instance SKU, subnet, and zone in which the nodes will be created.
	// The SKU must be one of the available compute SKUs in the region.
	NodeTemplate KubernetesNodeTemplate `json:"nodeTemplate"`

	// Taints List of taints to apply to the nodes in the node pool. Taints are used
	// to mark nodes as unsuitable for certain workloads, allowing for more
	// fine-grained control over scheduling.
	Taints *[]KubernetesNodeTaint `json:"taints,omitempty"`
}

// KubernetesNodePoolStatus defines model for KubernetesNodePoolStatus.
type KubernetesNodePoolStatus struct {
	Conditions []StatusCondition `json:"conditions"`

	// Nodes List of nodes in the Node Pool. Each node is represented by its
	// reference to a compute instance.
	Nodes *[]Reference `json:"nodes,omitempty"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}

// KubernetesNodeRootVolume Root volume for the node. The root volume is used to store the operating
// system and other software required to run the node.
//
// The SKU must be one of the available block storage SKUs in the region.
type KubernetesNodeRootVolume struct {
	// SizeGB Size of the root volume in GB. The size is recommended to be at least 100GB.
	SizeGB int `json:"sizeGB"`

	// SkuRef Reference to the SKU of the block storage created to store the root volume.
	SkuRef Reference `json:"skuRef"`
}

// KubernetesNodeTaint Represents a taint applied to the nodes in the node pool. Taints are used
// to control which pods can be scheduled on the nodes. A taint consists of a
// key, value, and effect.
type KubernetesNodeTaint struct {
	// Effect The effect of the taint. The effect determines how the taint is applied to
	// the nodes in the node pool. For details on the effects, see the
	// (kubernetes documentation on taints and tolerations)[https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/].
	Effect KubernetesNodeTaintEffect `json:"effect"`

	// Key The key of the taint. The key is used to identify the taint and is used
	// in conjunction with the value and effect.
	Key string `json:"key"`

	// Value The value of the taint. The value is used to identify the taint and is used
	// in conjunction with the key and effect.
	Value string `json:"value"`
}

// KubernetesNodeTaintEffect The effect of the taint. The effect determines how the taint is applied to
// the nodes in the node pool. For details on the effects, see the
// (kubernetes documentation on taints and tolerations)[https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/].
type KubernetesNodeTaintEffect string

// KubernetesNodeTemplate Template for creating nodes in the node pool. The template includes
// the instance SKU, subnet, and zone in which the nodes will be created.
// The SKU must be one of the available compute SKUs in the region.
type KubernetesNodeTemplate struct {
	// RootVolume Root volume for the node. The root volume is used to store the operating
	// system and other software required to run the node.
	//
	// The SKU must be one of the available block storage SKUs in the region.
	RootVolume KubernetesNodeRootVolume `json:"rootVolume"`

	// SecurityGroupRef Reference to the security group associated with the node instances.
	SecurityGroupRef *Reference `json:"securityGroupRef,omitempty"`

	// SkuRef Reference to the SKU of the node instances.
	SkuRef Reference `json:"skuRef"`

	// SubnetRef Reference to the NIC attached to the node instances.
	SubnetRef Reference `json:"subnetRef"`

	// Zone Reference to a specific zone within a region
	Zone Zone `json:"zone"`
}
