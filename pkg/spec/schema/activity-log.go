// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// ActivityLog Activity log resource
type ActivityLog struct {
	// Metadata Metadata for regional resources with name, permission, modification, type, tenant and workspace and region information.
	Metadata *RegionalWorkspaceResourceMetadata `json:"metadata,omitempty"`

	// Spec Activity log specification
	Spec ActivityLogSpec `json:"spec"`
}

// ActivityLogSpec Activity log specification
type ActivityLogSpec struct {
	// Request Request object
	Request *RequestObject `json:"request,omitempty"`

	// Response Response object
	Response *ResponseObject `json:"response,omitempty"`

	// Subject User-JWT executing this query
	Subject *string `json:"subject,omitempty"`
}

// RequestObject Request object
type RequestObject struct {
	Body     *RequestObject_Body `json:"body,omitempty"`
	Resource *string             `json:"resource,omitempty"`

	// Verb Verb that describes the action to be performed on the resource.
	// The verb can be one of the following: get, list, put, delete, post, ..
	Verb *string `json:"verb,omitempty"`
}

// RequestObject_Body defines model for RequestObject.Body.
type RequestObject_Body struct {
	union json.RawMessage
}

// ResponseObject Response object
type ResponseObject struct {
	Code *float32 `json:"code,omitempty"`
}

// AsBlockStorageSpec returns the union data inside the RequestObject_Body as a BlockStorageSpec
func (t RequestObject_Body) AsBlockStorageSpec() (BlockStorageSpec, error) {
	var body BlockStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlockStorageSpec overwrites any union data inside the RequestObject_Body as the provided BlockStorageSpec
func (t *RequestObject_Body) FromBlockStorageSpec(v BlockStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlockStorageSpec performs a merge with any union data inside the RequestObject_Body, using the provided BlockStorageSpec
func (t *RequestObject_Body) MergeBlockStorageSpec(v BlockStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstanceSkuSpec returns the union data inside the RequestObject_Body as a InstanceSkuSpec
func (t RequestObject_Body) AsInstanceSkuSpec() (InstanceSkuSpec, error) {
	var body InstanceSkuSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstanceSkuSpec overwrites any union data inside the RequestObject_Body as the provided InstanceSkuSpec
func (t *RequestObject_Body) FromInstanceSkuSpec(v InstanceSkuSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstanceSkuSpec performs a merge with any union data inside the RequestObject_Body, using the provided InstanceSkuSpec
func (t *RequestObject_Body) MergeInstanceSkuSpec(v InstanceSkuSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstanceSpec returns the union data inside the RequestObject_Body as a InstanceSpec
func (t RequestObject_Body) AsInstanceSpec() (InstanceSpec, error) {
	var body InstanceSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstanceSpec overwrites any union data inside the RequestObject_Body as the provided InstanceSpec
func (t *RequestObject_Body) FromInstanceSpec(v InstanceSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstanceSpec performs a merge with any union data inside the RequestObject_Body, using the provided InstanceSpec
func (t *RequestObject_Body) MergeInstanceSpec(v InstanceSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNetworkLoadBalancerSpec returns the union data inside the RequestObject_Body as a NetworkLoadBalancerSpec
func (t RequestObject_Body) AsNetworkLoadBalancerSpec() (NetworkLoadBalancerSpec, error) {
	var body NetworkLoadBalancerSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNetworkLoadBalancerSpec overwrites any union data inside the RequestObject_Body as the provided NetworkLoadBalancerSpec
func (t *RequestObject_Body) FromNetworkLoadBalancerSpec(v NetworkLoadBalancerSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNetworkLoadBalancerSpec performs a merge with any union data inside the RequestObject_Body, using the provided NetworkLoadBalancerSpec
func (t *RequestObject_Body) MergeNetworkLoadBalancerSpec(v NetworkLoadBalancerSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNetworkSkuSpec returns the union data inside the RequestObject_Body as a NetworkSkuSpec
func (t RequestObject_Body) AsNetworkSkuSpec() (NetworkSkuSpec, error) {
	var body NetworkSkuSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNetworkSkuSpec overwrites any union data inside the RequestObject_Body as the provided NetworkSkuSpec
func (t *RequestObject_Body) FromNetworkSkuSpec(v NetworkSkuSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNetworkSkuSpec performs a merge with any union data inside the RequestObject_Body, using the provided NetworkSkuSpec
func (t *RequestObject_Body) MergeNetworkSkuSpec(v NetworkSkuSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNetworkSpec returns the union data inside the RequestObject_Body as a NetworkSpec
func (t RequestObject_Body) AsNetworkSpec() (NetworkSpec, error) {
	var body NetworkSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNetworkSpec overwrites any union data inside the RequestObject_Body as the provided NetworkSpec
func (t *RequestObject_Body) FromNetworkSpec(v NetworkSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNetworkSpec performs a merge with any union data inside the RequestObject_Body, using the provided NetworkSpec
func (t *RequestObject_Body) MergeNetworkSpec(v NetworkSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNicSpec returns the union data inside the RequestObject_Body as a NicSpec
func (t RequestObject_Body) AsNicSpec() (NicSpec, error) {
	var body NicSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNicSpec overwrites any union data inside the RequestObject_Body as the provided NicSpec
func (t *RequestObject_Body) FromNicSpec(v NicSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNicSpec performs a merge with any union data inside the RequestObject_Body, using the provided NicSpec
func (t *RequestObject_Body) MergeNicSpec(v NicSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjectStorageAccountSpec returns the union data inside the RequestObject_Body as a ObjectStorageAccountSpec
func (t RequestObject_Body) AsObjectStorageAccountSpec() (ObjectStorageAccountSpec, error) {
	var body ObjectStorageAccountSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectStorageAccountSpec overwrites any union data inside the RequestObject_Body as the provided ObjectStorageAccountSpec
func (t *RequestObject_Body) FromObjectStorageAccountSpec(v ObjectStorageAccountSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectStorageAccountSpec performs a merge with any union data inside the RequestObject_Body, using the provided ObjectStorageAccountSpec
func (t *RequestObject_Body) MergeObjectStorageAccountSpec(v ObjectStorageAccountSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicIpSpec returns the union data inside the RequestObject_Body as a PublicIpSpec
func (t RequestObject_Body) AsPublicIpSpec() (PublicIpSpec, error) {
	var body PublicIpSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicIpSpec overwrites any union data inside the RequestObject_Body as the provided PublicIpSpec
func (t *RequestObject_Body) FromPublicIpSpec(v PublicIpSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicIpSpec performs a merge with any union data inside the RequestObject_Body, using the provided PublicIpSpec
func (t *RequestObject_Body) MergePublicIpSpec(v PublicIpSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoleAssignmentSpec returns the union data inside the RequestObject_Body as a RoleAssignmentSpec
func (t RequestObject_Body) AsRoleAssignmentSpec() (RoleAssignmentSpec, error) {
	var body RoleAssignmentSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoleAssignmentSpec overwrites any union data inside the RequestObject_Body as the provided RoleAssignmentSpec
func (t *RequestObject_Body) FromRoleAssignmentSpec(v RoleAssignmentSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoleAssignmentSpec performs a merge with any union data inside the RequestObject_Body, using the provided RoleAssignmentSpec
func (t *RequestObject_Body) MergeRoleAssignmentSpec(v RoleAssignmentSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoleSpec returns the union data inside the RequestObject_Body as a RoleSpec
func (t RequestObject_Body) AsRoleSpec() (RoleSpec, error) {
	var body RoleSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoleSpec overwrites any union data inside the RequestObject_Body as the provided RoleSpec
func (t *RequestObject_Body) FromRoleSpec(v RoleSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoleSpec performs a merge with any union data inside the RequestObject_Body, using the provided RoleSpec
func (t *RequestObject_Body) MergeRoleSpec(v RoleSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSecurityGroupSpec returns the union data inside the RequestObject_Body as a SecurityGroupSpec
func (t RequestObject_Body) AsSecurityGroupSpec() (SecurityGroupSpec, error) {
	var body SecurityGroupSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSecurityGroupSpec overwrites any union data inside the RequestObject_Body as the provided SecurityGroupSpec
func (t *RequestObject_Body) FromSecurityGroupSpec(v SecurityGroupSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSecurityGroupSpec performs a merge with any union data inside the RequestObject_Body, using the provided SecurityGroupSpec
func (t *RequestObject_Body) MergeSecurityGroupSpec(v SecurityGroupSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageSkuSpec returns the union data inside the RequestObject_Body as a StorageSkuSpec
func (t RequestObject_Body) AsStorageSkuSpec() (StorageSkuSpec, error) {
	var body StorageSkuSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageSkuSpec overwrites any union data inside the RequestObject_Body as the provided StorageSkuSpec
func (t *RequestObject_Body) FromStorageSkuSpec(v StorageSkuSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageSkuSpec performs a merge with any union data inside the RequestObject_Body, using the provided StorageSkuSpec
func (t *RequestObject_Body) MergeStorageSkuSpec(v StorageSkuSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubnetSpec returns the union data inside the RequestObject_Body as a SubnetSpec
func (t RequestObject_Body) AsSubnetSpec() (SubnetSpec, error) {
	var body SubnetSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubnetSpec overwrites any union data inside the RequestObject_Body as the provided SubnetSpec
func (t *RequestObject_Body) FromSubnetSpec(v SubnetSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubnetSpec performs a merge with any union data inside the RequestObject_Body, using the provided SubnetSpec
func (t *RequestObject_Body) MergeSubnetSpec(v SubnetSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWorkspaceSpec returns the union data inside the RequestObject_Body as a WorkspaceSpec
func (t RequestObject_Body) AsWorkspaceSpec() (WorkspaceSpec, error) {
	var body WorkspaceSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWorkspaceSpec overwrites any union data inside the RequestObject_Body as the provided WorkspaceSpec
func (t *RequestObject_Body) FromWorkspaceSpec(v WorkspaceSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWorkspaceSpec performs a merge with any union data inside the RequestObject_Body, using the provided WorkspaceSpec
func (t *RequestObject_Body) MergeWorkspaceSpec(v WorkspaceSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RequestObject_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RequestObject_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
