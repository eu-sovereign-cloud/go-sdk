// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

// Defines values for SecurityGroupRuleSpecDirection.
const (
	SecurityGroupRuleDirectionEgress  SecurityGroupRuleSpecDirection = "egress"
	SecurityGroupRuleDirectionIngress SecurityGroupRuleSpecDirection = "ingress"
)

// Defines values for SecurityGroupRuleSpecProtocol.
const (
	SecurityGroupRuleProtocolICMP   SecurityGroupRuleSpecProtocol = "icmp"
	SecurityGroupRuleProtocolTCP    SecurityGroupRuleSpecProtocol = "tcp"
	SecurityGroupRuleProtocolTCPUDP SecurityGroupRuleSpecProtocol = "tcp+udp"
	SecurityGroupRuleProtocolUDP    SecurityGroupRuleSpecProtocol = "udp"
)

// IcmpConfig ICMP specific rule configuration
type IcmpConfig struct {
	// Code ICMP code
	Code int `json:"code"`

	// Type ICMP type
	Type int `json:"type"`
}

// Port A valid network port number.
// The port number is a 16-bit unsigned integer ranging from 1 to 65535.
type Port = int

// Ports Defines a specific port list or port range for the rule.
// The configuration allows specifying individual ports, ranges, or a combination of both.
//
// Behavior:
// - If only `from` is specified, the range is interpreted as a single port: `from` to `from`.
// - If only `to` is specified, the range is interpreted as a single port: `to` to `to`.
// - If both `from` and `to` are specified, the range spans from `from` to `to`.
// - The `list` property can be used to explicitly define additional individual ports.
//
// The final result is a comprehensive list of ports and/or port ranges.
type Ports struct {
	// From A valid network port number.
	// The port number is a 16-bit unsigned integer ranging from 1 to 65535.
	From *Port   `json:"from,omitempty"`
	List *[]Port `json:"list,omitempty"`

	// To A valid network port number.
	// The port number is a 16-bit unsigned integer ranging from 1 to 65535.
	To *Port `json:"to,omitempty"`
}

// SecurityGroup defines model for SecurityGroup.
type SecurityGroup struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations Annotations `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for regional resources with name, permission, modification, type, tenant and workspace and region information.
	Metadata *RegionalWorkspaceResourceMetadata `json:"metadata,omitempty"`

	// Spec Specification of the security group
	Spec SecurityGroupSpec `json:"spec"`

	// Status Status of the security group, including the status of its rules.
	// The status is read-only and reflects the current state of the security group.
	Status *SecurityGroupStatus `json:"status,omitempty"`
}

// SecurityGroupRuleSpec Specification of a security group rule defining network access permissions.
// If no version is specified, any IP version will be allowed.
// If no protocol is specified, any network protocol will be allowed.
type SecurityGroupRuleSpec struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations Annotations `json:"annotations,omitempty"`

	// Direction Direction of the traffic flow:
	// * ingress: Only incoming traffic is allowed
	// * egress: Only outgoing traffic is allowed
	Direction SecurityGroupRuleSpecDirection `json:"direction"`

	// Icmp ICMP specific rule configuration
	Icmp *IcmpConfig `json:"icmp,omitempty"`

	// Ports Defines a specific port list or port range for the rule.
	// The configuration allows specifying individual ports, ranges, or a combination of both.
	//
	// Behavior:
	// - If only `from` is specified, the range is interpreted as a single port: `from` to `from`.
	// - If only `to` is specified, the range is interpreted as a single port: `to` to `to`.
	// - If both `from` and `to` are specified, the range spans from `from` to `to`.
	// - The `list` property can be used to explicitly define additional individual ports.
	//
	// The final result is a comprehensive list of ports and/or port ranges.
	Ports *Ports `json:"ports,omitempty"`

	// Protocol Network protocol for the rule
	Protocol *SecurityGroupRuleSpecProtocol `json:"protocol,omitempty"`

	// SourceRefs List of CIDR blocks, IP addresses, gateways, instances or security group references that are allowed to communicate
	// with the security group. If a security group is specified, all instances in that group are allowed.
	// If no sourceRefs are specified, all traffic is allowed.
	SourceRefs *[]Reference `json:"sourceRefs,omitempty"`

	// Version IP version of the address
	Version *IPVersion `json:"version,omitempty"`
}

// SecurityGroupRuleSpecDirection Direction of the traffic flow:
// * ingress: Only incoming traffic is allowed
// * egress: Only outgoing traffic is allowed
type SecurityGroupRuleSpecDirection string

// SecurityGroupRuleSpecProtocol Network protocol for the rule
type SecurityGroupRuleSpecProtocol string

// SecurityGroupRuleStatus Current status of the resource
type SecurityGroupRuleStatus = Status

// SecurityGroupSpec Specification of the security group
type SecurityGroupSpec struct {
	// Rules Network access rules defining communication between security groups and external networks.
	//
	// Rule Evaluation:
	// - Default behavior is to deny all traffic not explicitly allowed
	// - Rules provide granular control over allowed traffic types, sources, and destinations
	Rules []SecurityGroupRuleSpec `json:"rules"`
}

// SecurityGroupStatus defines model for SecurityGroupStatus.
type SecurityGroupStatus struct {
	Conditions []StatusCondition          `json:"conditions"`
	Rules      *[]SecurityGroupRuleStatus `json:"rules,omitempty"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}
