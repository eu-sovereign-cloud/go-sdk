// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

// Defines values for IPVersion.
const (
	IPVersionIPv4 IPVersion = "IPv4"
	IPVersionIPv6 IPVersion = "IPv6"
)

// IPVersion IP version of the address
type IPVersion string

// Network defines model for Network.
type Network struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations Annotations `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for regional resources with name, permission, modification, type, tenant and workspace and region information.
	Metadata *RegionalWorkspaceResourceMetadata `json:"metadata,omitempty"`

	// Spec A Network represents a virtual network that can be used to isolate resources.
	// Key network concepts:
	//
	// * Defines a range of IP addresses for compute resources (e.g. instances)
	// * Enables network segmentation and isolation
	// * Provides common performance configuration across the network using a SKU
	//
	// The `cidr` is the base CIDR block for the network. Additional CIDR blocks can be
	// added to the network using the `additionalCidrs` field. The `additionalCidrs` can
	// be changed after the network is created in case they are not used. The main CIDR
	// block cannot be changed after the network is created. All cidrs must be non-overlapping.
	// The cidrs have to be part of the RFC 1918 address space in case of IPv4 and or RFC 4193.
	//
	// In case the system should automatically assign IP addresses to the network cidrs
	// only the network prefix is required. E.g. to request a /16 IPv4 CIDR block the
	// CIDR block would be `0.0.0.0/16` and for a /56 IPv6 CIDR block the CIDR block would
	// be `::/56`. Most CSP will not allow to use a different IPv6 prefix length than /56.
	Spec NetworkSpec `json:"spec"`

	// Status The status of the network. The status is read-only and will be set by the
	// system. The status contains information about the current state of the network
	// and its CIDR blocks. It will report the status of the CIDR blocks and the network
	// as a whole including automatically assigned IP networks.
	Status *NetworkStatus `json:"status,omitempty"`
}

// NetworkSpec A Network represents a virtual network that can be used to isolate resources.
// Key network concepts:
//
// * Defines a range of IP addresses for compute resources (e.g. instances)
// * Enables network segmentation and isolation
// * Provides common performance configuration across the network using a SKU
//
// The `cidr` is the base CIDR block for the network. Additional CIDR blocks can be
// added to the network using the `additionalCidrs` field. The `additionalCidrs` can
// be changed after the network is created in case they are not used. The main CIDR
// block cannot be changed after the network is created. All cidrs must be non-overlapping.
// The cidrs have to be part of the RFC 1918 address space in case of IPv4 and or RFC 4193.
//
// In case the system should automatically assign IP addresses to the network cidrs
// only the network prefix is required. E.g. to request a /16 IPv4 CIDR block the
// CIDR block would be `0.0.0.0/16` and for a /56 IPv6 CIDR block the CIDR block would
// be `::/56`. Most CSP will not allow to use a different IPv6 prefix length than /56.
type NetworkSpec struct {
	AdditionalCidrs *[]Cidr `json:"additionalCidrs,omitempty"`

	// Cidr Combined IPv4 and IPv6 CIDR block for a subnet. Depending on the network
	// configuration, either the IPv4 or IPv6 range can be omitted. So the following
	// combinations are possible:
	//
	// * IPv4 only
	// * IPv6 only
	// * IPv4 and IPv6 (Dual Stack)
	Cidr Cidr `json:"cidr"`

	// RouteTableRef Reference to the route table used by default for all Subnets.
	RouteTableRef Reference `json:"routeTableRef"`

	// SkuRef Reference to the SKU used by default for all NIC in this Network.
	// Can be overridden by the NIC.
	SkuRef Reference `json:"skuRef"`
}

// NetworkStatus defines model for NetworkStatus.
type NetworkStatus struct {
	AdditionalCidrs *[]Cidr `json:"additionalCidrs,omitempty"`

	// Cidr Combined IPv4 and IPv6 CIDR block for a subnet. Depending on the network
	// configuration, either the IPv4 or IPv6 range can be omitted. So the following
	// combinations are possible:
	//
	// * IPv4 only
	// * IPv6 only
	// * IPv4 and IPv6 (Dual Stack)
	Cidr       Cidr              `json:"cidr"`
	Conditions []StatusCondition `json:"conditions"`

	// RouteTableRef Reference to the route table used by default for all Subnets.
	RouteTableRef *Reference `json:"routeTableRef,omitempty"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}

// Cidr Combined IPv4 and IPv6 CIDR block for a subnet. Depending on the network
// configuration, either the IPv4 or IPv6 range can be omitted. So the following
// combinations are possible:
//
// * IPv4 only
// * IPv6 only
// * IPv4 and IPv6 (Dual Stack)
type Cidr struct {
	// Ipv4 IPv4 CIDR block for the subnet.
	Ipv4 *string `json:"ipv4,omitempty"`

	// Ipv6 IPv6 CIDR block for the subnet.
	Ipv6 *string `json:"ipv6,omitempty"`
}
