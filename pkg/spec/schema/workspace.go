// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

// Workspace defines model for Workspace.
type Workspace struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations Annotations `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for regional resources with name, permission, modification, type, tenant and region information.
	Metadata *RegionalResourceMetadata `json:"metadata,omitempty"`

	// Spec Specification of the workspace, including its capabilities and extensions.
	Spec WorkspaceSpec `json:"spec"`

	// Status Status of the workspace, including the number of resources in the workspace.
	Status *WorkspaceStatus `json:"status,omitempty"`
}

// WorkspaceSpec Specification of the workspace, including its capabilities and extensions.
type WorkspaceSpec = map[string]interface{}

// WorkspaceStatus defines model for WorkspaceStatus.
type WorkspaceStatus struct {
	Conditions []StatusCondition `json:"conditions"`

	// ResourceCount Number of resources currently in the workspace
	ResourceCount *int `json:"resourceCount,omitempty"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}
