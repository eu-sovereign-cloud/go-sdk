// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

// Nic defines model for Nic.
type Nic struct {
	Annotations *interface{} `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for regional resources with name, permission, modification, type, tenant and workspace and region information.
	Metadata *RegionalWorkspaceResourceMetadata `json:"metadata,omitempty"`

	// Spec Specification of the Network Interface Card
	//
	// The referenced SKU overwrites the default. In case of different network SKU references
	// the highest possible network SKU reference is used. The network SKU reference
	// might be restricted by the instance size.
	Spec NicSpec `json:"spec"`

	// Status Status of the Network Interface Card (NIC). The status includes the current state
	// of the NIC and the IP addresses associated with it. The status is read-only and
	// cannot be modified directly.
	Status *NicStatus `json:"status,omitempty"`
}

// NicIp IP address for the NIC. The IP is either IPv4 or IPv6. The IP
// can be `0.0.0.0` or `::` to indicate that the IP needs to be assigned
// automatically. The IP can also be a specific IP address.
// If not provided, the mutate admission controller will populate this value using the default values for ipv4 and ipv6.
type NicIp = string

// NicSpec Specification of the Network Interface Card
//
// The referenced SKU overwrites the default. In case of different network SKU references
// the highest possible network SKU reference is used. The network SKU reference
// might be restricted by the instance size.
type NicSpec struct {
	// Addresses List of IP addresses for the NIC. A specific IP address needs to be in the
	// CIDR range of the subnet and not used by any other NIC in the subnet. Multiple
	// IP addresses can be assigned to a NIC. The number of IP addresses is might be
	// limited by the CSP or the subnet size.
	Addresses []NicIp `json:"addresses"`

	// PublicIpRefs References to public IP addresses associated with this NIC. The IP may be external
	// and not directly visible on the server/NIC itself.
	PublicIpRefs *[]Reference `json:"publicIpRefs,omitempty"`

	// SkuRef Reference to the SKU of the NIC.
	SkuRef *Reference `json:"skuRef,omitempty"`

	// SubnetRef Reference to the subnet used by the NIC connections.
	SubnetRef Reference `json:"subnetRef"`
}

// NicStatus defines model for NicStatus.
type NicStatus struct {
	Addresses  *[]NicIp          `json:"addresses,omitempty"`
	Conditions []StatusCondition `json:"conditions"`

	// MacAddress MAC address of the NIC.
	MacAddress *string `json:"macAddress,omitempty"`

	// PublicIpRefs Array of public IP addresses associated with this NIC.
	PublicIpRefs *[]Reference `json:"publicIpRefs,omitempty"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}
