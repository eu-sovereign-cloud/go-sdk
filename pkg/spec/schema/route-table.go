// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

// RouteSpec The target reference can be an instance,
// a gateway or an IP address (v4 or v6) that is part of the
// network the route table is attached to.
type RouteSpec struct {
	// DestinationCidrBlock The CIDR block for the destination. The block can be
	// a specific IP address or a range of addresses. It can be
	// IPv6 or IPv4.
	DestinationCidrBlock string `json:"destinationCidrBlock"`

	// TargetRef Reference to the target of the route. The target can be an instance, an gateway or an IP address.
	TargetRef Reference `json:"targetRef"`
}

// RouteStatus defines model for RouteStatus.
type RouteStatus struct {
	Conditions []StatusCondition `json:"conditions"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}

// RouteTable defines model for RouteTable.
type RouteTable struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations Annotations `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for regional resources with name, permission, modification, type, tenant, workspace, network and region information.
	Metadata *RegionalNetworkResourceMetadata `json:"metadata,omitempty"`

	// Spec The RouteTableSpec defines the routes that are associated with the route table.
	Spec RouteTableSpec `json:"spec"`

	// Status The status of the route table. The status is read-only and will be set by the
	// system. The status contains information about the current state of the route table
	// and its routes. It will report the status of the routes and the route table as a whole.
	Status *RouteTableStatus `json:"status,omitempty"`
}

// RouteTableSpec The RouteTableSpec defines the routes that are associated with the route table.
type RouteTableSpec struct {
	Routes []RouteSpec `json:"routes"`
}

// RouteTableStatus defines model for RouteTableStatus.
type RouteTableStatus struct {
	Conditions []StatusCondition `json:"conditions"`
	Routes     *[]RouteStatus    `json:"routes,omitempty"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}
