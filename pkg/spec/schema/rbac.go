// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

// Permission Permission specification, including providers, resources, and verbs.
// Permissions are used to define access control policies for user accounts.
type Permission struct {
	// Provider The provider for which the resource and verbs are defined.
	Provider string `json:"provider"`

	// Resources The resources are the specific resources that the permission applies to.
	// The resource can be a wildcard `*` to represent all resources or a
	// specific resource type. For example, `images/my-image` or
	// `images/*`.
	Resources []string `json:"resources"`

	// Verb The verb is a string that represents the action to be performed on a resource.
	// The standard operations are defined as `get`, `put`, `list`, `delete`. If the
	// resource has additional actions they can to be permitted individually as
	// verb and action in the form `<verb>:<action>`. For example, `post.start`,
	// `post.stop`, `post.restart` or with a wildcard for all actions `post`.
	Verb []string `json:"verb"`
}

// Role defines model for Role.
type Role struct {
	Annotations *interface{} `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for global resources with name, permission, modification, type, and tenant information.
	Metadata *GlobalResourceMetadata `json:"metadata,omitempty"`

	// Spec Role specification defined as a list of permissions.
	// Roles are used to define access control policies for
	// a user account using a role assignment.
	Spec RoleSpec `json:"spec"`

	// Status Current status of the resource
	Status *RoleStatus `json:"status,omitempty"`
}

// RoleAssignment defines model for RoleAssignment.
type RoleAssignment struct {
	Annotations *interface{} `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for global resources with name, permission, modification, type, and tenant information.
	Metadata *GlobalResourceMetadata `json:"metadata,omitempty"`

	// Spec Role assignment for a user account. The role is assigned to the user account in the context of the specified scopes.
	Spec RoleAssignmentSpec `json:"spec"`

	// Status Current status of the resource
	Status *RoleAssignmentStatus `json:"status,omitempty"`
}

// RoleAssignmentScope Role assignment scope, including the workspaces, regions and tenants.
type RoleAssignmentScope struct {
	// Regions Optionally, a restriction can be applied to the region
	// where the role assignment is valid. If not specified,
	// the role assignment is valid for all regions.
	Regions *[]string `json:"regions,omitempty"`

	// Tenants Optionally, can be opened to all tenants or restricted to a specific tenant.
	// If not specified, the role assignment is valid for the current tenant.
	Tenants *[]string `json:"tenants,omitempty"`

	// Workspaces Optionally, a restriction can be applied to the workspace
	// where the role assignment is valid. If not specified,
	// the role assignment is valid for all workspaces.
	Workspaces *[]string `json:"workspaces,omitempty"`
}

// RoleAssignmentSpec Role assignment for a user account. The role is assigned to the user account in the context of the specified scopes.
type RoleAssignmentSpec struct {
	// Roles List of assigned role names
	Roles []string `json:"roles"`

	// Scopes List of scopes (e.g., tenant, workspace) for the role assignment
	Scopes []RoleAssignmentScope `json:"scopes"`

	// Subs List of subject IDs (from JWT) to whom the roles are assigned,
	// A wildcard `*` can be used to represent all users of the tenant scopes
	Subs []string `json:"subs"`
}

// RoleAssignmentStatus Current status of the resource
type RoleAssignmentStatus = Status

// RoleSpec Role specification defined as a list of permissions.
// Roles are used to define access control policies for
// a user account using a role assignment.
type RoleSpec struct {
	// Permissions List of permissions granted by this role
	Permissions []Permission `json:"permissions"`
}

// RoleStatus Current status of the resource
type RoleStatus = Status
