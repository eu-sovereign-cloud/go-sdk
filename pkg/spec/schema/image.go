// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

// Defines values for ImageSpecBoot.
const (
	ImageSpecBootBIOS ImageSpecBoot = "BIOS"
	ImageSpecBootUEFI ImageSpecBoot = "UEFI"
)

// Defines values for ImageSpecCpuArchitecture.
const (
	ImageSpecCpuArchitectureAmd64 ImageSpecCpuArchitecture = "amd64"
	ImageSpecCpuArchitectureArm64 ImageSpecCpuArchitecture = "arm64"
)

// Defines values for ImageSpecInitializer.
const (
	ImageSpecInitializerCloudinit22 ImageSpecInitializer = "cloudinit-22"
	ImageSpecInitializerNone        ImageSpecInitializer = "none"
)

// Image defines model for Image.
type Image struct {
	Annotations *interface{} `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions Extensions `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels Labels `json:"labels,omitempty"`

	// Metadata Metadata for regional resources with name, permission, modification, type, tenant and region information.
	Metadata *RegionalResourceMetadata `json:"metadata,omitempty"`

	// Spec Detailed specification of the Image resource.
	// The Image is derived from a block storage resource identified by
	// `blockStorageRef` and serves as a template for creating
	// compute instances. For additional information, refer to the
	// [Image Handling](/docs/content/Other/image-handling) section.
	Spec ImageSpec `json:"spec"`

	// Status Status of the Image, including the size of the Image in MB.
	Status *ImageStatus `json:"status,omitempty"`
}

// ImageSpec Detailed specification of the Image resource.
// The Image is derived from a block storage resource identified by
// `blockStorageRef` and serves as a template for creating
// compute instances. For additional information, refer to the
// [Image Handling](/docs/content/Other/image-handling) section.
type ImageSpec struct {
	// BlockStorageRef Reference to the block storage used to store the image.
	BlockStorageRef Reference `json:"blockStorageRef"`

	// Boot Boot type for the Image
	Boot *ImageSpecBoot `json:"boot,omitempty"`

	// CpuArchitecture CPU architecture for the Image
	CpuArchitecture ImageSpecCpuArchitecture `json:"cpuArchitecture"`

	// Initializer Initializer for the Image
	Initializer *ImageSpecInitializer `json:"initializer,omitempty"`
}

// ImageSpecBoot Boot type for the Image
type ImageSpecBoot string

// ImageSpecCpuArchitecture CPU architecture for the Image
type ImageSpecCpuArchitecture string

// ImageSpecInitializer Initializer for the Image
type ImageSpecInitializer string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Conditions []StatusCondition `json:"conditions"`

	// SizeMB Size of the Image in MB
	SizeMB *int `json:"sizeMB,omitempty"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}
