// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocknetwork

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	network "github.com/eu-sovereign-cloud/go-sdk/pkg/foundation.network.v1"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateInternetGatewayWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateInternetGatewayWithBodyWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateInternetGatewayParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateInternetGatewayResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInternetGatewayWithBodyWithResponse")
	}

	var r0 *network.CreateOrUpdateInternetGatewayResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateInternetGatewayResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, string, io.Reader, ...network.RequestEditorFn) *network.CreateOrUpdateInternetGatewayResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateInternetGatewayResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInternetGatewayWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateInternetGatewayWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateInternetGatewayParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateInternetGatewayWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateInternetGatewayWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateInternetGatewayParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateInternetGatewayParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call) Return(_a0 *network.CreateOrUpdateInternetGatewayResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateInternetGatewayResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateInternetGatewayWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateInternetGatewayWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateInternetGatewayParams, body network.CreateOrUpdateInternetGatewayJSONRequestBody, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateInternetGatewayResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInternetGatewayWithResponse")
	}

	var r0 *network.CreateOrUpdateInternetGatewayResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, network.CreateOrUpdateInternetGatewayJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateInternetGatewayResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, network.CreateOrUpdateInternetGatewayJSONRequestBody, ...network.RequestEditorFn) *network.CreateOrUpdateInternetGatewayResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateInternetGatewayResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, network.CreateOrUpdateInternetGatewayJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInternetGatewayWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateInternetGatewayWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateInternetGatewayParams
//   - body network.CreateOrUpdateInternetGatewayJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateInternetGatewayWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call{Call: _e.mock.On("CreateOrUpdateInternetGatewayWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateInternetGatewayParams, body network.CreateOrUpdateInternetGatewayJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateInternetGatewayParams), args[5].(network.CreateOrUpdateInternetGatewayJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call) Return(_a0 *network.CreateOrUpdateInternetGatewayResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, network.CreateOrUpdateInternetGatewayJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateInternetGatewayResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateInternetGatewayWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNetworkWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateNetworkWithBodyWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNetworkParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNetworkWithBodyWithResponse")
	}

	var r0 *network.CreateOrUpdateNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateNetworkResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, string, io.Reader, ...network.RequestEditorFn) *network.CreateOrUpdateNetworkResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNetworkWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateNetworkWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateNetworkParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateNetworkWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateNetworkWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNetworkParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateNetworkParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call) Return(_a0 *network.CreateOrUpdateNetworkResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateNetworkResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNetworkWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateNetworkWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNetworkParams, body network.CreateOrUpdateNetworkJSONRequestBody, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNetworkWithResponse")
	}

	var r0 *network.CreateOrUpdateNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, network.CreateOrUpdateNetworkJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateNetworkResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, network.CreateOrUpdateNetworkJSONRequestBody, ...network.RequestEditorFn) *network.CreateOrUpdateNetworkResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, network.CreateOrUpdateNetworkJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNetworkWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateNetworkWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateNetworkParams
//   - body network.CreateOrUpdateNetworkJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateNetworkWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call{Call: _e.mock.On("CreateOrUpdateNetworkWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNetworkParams, body network.CreateOrUpdateNetworkJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateNetworkParams), args[5].(network.CreateOrUpdateNetworkJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call) Return(_a0 *network.CreateOrUpdateNetworkResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, network.CreateOrUpdateNetworkJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateNetworkResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateNetworkWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNicWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateNicWithBodyWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNicParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateNicResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNicWithBodyWithResponse")
	}

	var r0 *network.CreateOrUpdateNicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateNicResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, string, io.Reader, ...network.RequestEditorFn) *network.CreateOrUpdateNicResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateNicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNicWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateNicWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateNicParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateNicWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateNicWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNicParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateNicParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call) Return(_a0 *network.CreateOrUpdateNicResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateNicResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateNicWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNicWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateNicWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNicParams, body network.CreateOrUpdateNicJSONRequestBody, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateNicResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNicWithResponse")
	}

	var r0 *network.CreateOrUpdateNicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, network.CreateOrUpdateNicJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateNicResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, network.CreateOrUpdateNicJSONRequestBody, ...network.RequestEditorFn) *network.CreateOrUpdateNicResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateNicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, network.CreateOrUpdateNicJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNicWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateNicWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateNicParams
//   - body network.CreateOrUpdateNicJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateNicWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call{Call: _e.mock.On("CreateOrUpdateNicWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNicParams, body network.CreateOrUpdateNicJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateNicParams), args[5].(network.CreateOrUpdateNicJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call) Return(_a0 *network.CreateOrUpdateNicResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, network.CreateOrUpdateNicJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateNicResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateNicWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdatePublicIpWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdatePublicIpWithBodyWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdatePublicIpParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdatePublicIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdatePublicIpWithBodyWithResponse")
	}

	var r0 *network.CreateOrUpdatePublicIpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdatePublicIpResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, string, io.Reader, ...network.RequestEditorFn) *network.CreateOrUpdatePublicIpResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdatePublicIpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdatePublicIpWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdatePublicIpWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdatePublicIpParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdatePublicIpWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdatePublicIpWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdatePublicIpParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdatePublicIpParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call) Return(_a0 *network.CreateOrUpdatePublicIpResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdatePublicIpResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdatePublicIpWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdatePublicIpWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdatePublicIpParams, body network.CreateOrUpdatePublicIpJSONRequestBody, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdatePublicIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdatePublicIpWithResponse")
	}

	var r0 *network.CreateOrUpdatePublicIpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, network.CreateOrUpdatePublicIpJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdatePublicIpResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, network.CreateOrUpdatePublicIpJSONRequestBody, ...network.RequestEditorFn) *network.CreateOrUpdatePublicIpResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdatePublicIpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, network.CreateOrUpdatePublicIpJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdatePublicIpWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdatePublicIpWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdatePublicIpParams
//   - body network.CreateOrUpdatePublicIpJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdatePublicIpWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call{Call: _e.mock.On("CreateOrUpdatePublicIpWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdatePublicIpParams, body network.CreateOrUpdatePublicIpJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdatePublicIpParams), args[5].(network.CreateOrUpdatePublicIpJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call) Return(_a0 *network.CreateOrUpdatePublicIpResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, network.CreateOrUpdatePublicIpJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdatePublicIpResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdatePublicIpWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRouteTableWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateRouteTableWithBodyWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateRouteTableParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateRouteTableResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRouteTableWithBodyWithResponse")
	}

	var r0 *network.CreateOrUpdateRouteTableResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateRouteTableResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, string, io.Reader, ...network.RequestEditorFn) *network.CreateOrUpdateRouteTableResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateRouteTableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRouteTableWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateRouteTableWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateRouteTableParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateRouteTableWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateRouteTableWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateRouteTableParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateRouteTableParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call) Return(_a0 *network.CreateOrUpdateRouteTableResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateRouteTableResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRouteTableWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateRouteTableWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateRouteTableParams, body network.CreateOrUpdateRouteTableJSONRequestBody, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateRouteTableResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRouteTableWithResponse")
	}

	var r0 *network.CreateOrUpdateRouteTableResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, network.CreateOrUpdateRouteTableJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateRouteTableResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, network.CreateOrUpdateRouteTableJSONRequestBody, ...network.RequestEditorFn) *network.CreateOrUpdateRouteTableResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateRouteTableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, network.CreateOrUpdateRouteTableJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRouteTableWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateRouteTableWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateRouteTableParams
//   - body network.CreateOrUpdateRouteTableJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateRouteTableWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call{Call: _e.mock.On("CreateOrUpdateRouteTableWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateRouteTableParams, body network.CreateOrUpdateRouteTableJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateRouteTableParams), args[5].(network.CreateOrUpdateRouteTableJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call) Return(_a0 *network.CreateOrUpdateRouteTableResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, network.CreateOrUpdateRouteTableJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateRouteTableResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateRouteTableWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateSecurityGroupWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateSecurityGroupWithBodyWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSecurityGroupParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSecurityGroupWithBodyWithResponse")
	}

	var r0 *network.CreateOrUpdateSecurityGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateSecurityGroupResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, string, io.Reader, ...network.RequestEditorFn) *network.CreateOrUpdateSecurityGroupResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateSecurityGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateSecurityGroupWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateSecurityGroupWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateSecurityGroupParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateSecurityGroupWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateSecurityGroupWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSecurityGroupParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateSecurityGroupParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call) Return(_a0 *network.CreateOrUpdateSecurityGroupResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateSecurityGroupResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateSecurityGroupWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateSecurityGroupWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSecurityGroupParams, body network.CreateOrUpdateSecurityGroupJSONRequestBody, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSecurityGroupWithResponse")
	}

	var r0 *network.CreateOrUpdateSecurityGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, network.CreateOrUpdateSecurityGroupJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateSecurityGroupResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, network.CreateOrUpdateSecurityGroupJSONRequestBody, ...network.RequestEditorFn) *network.CreateOrUpdateSecurityGroupResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateSecurityGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, network.CreateOrUpdateSecurityGroupJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateSecurityGroupWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateSecurityGroupWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateSecurityGroupParams
//   - body network.CreateOrUpdateSecurityGroupJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateSecurityGroupWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call{Call: _e.mock.On("CreateOrUpdateSecurityGroupWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSecurityGroupParams, body network.CreateOrUpdateSecurityGroupJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateSecurityGroupParams), args[5].(network.CreateOrUpdateSecurityGroupJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call) Return(_a0 *network.CreateOrUpdateSecurityGroupResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, network.CreateOrUpdateSecurityGroupJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateSecurityGroupResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateSecurityGroupWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateSubnetWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateSubnetWithBodyWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSubnetParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateSubnetResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSubnetWithBodyWithResponse")
	}

	var r0 *network.CreateOrUpdateSubnetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateSubnetResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, string, io.Reader, ...network.RequestEditorFn) *network.CreateOrUpdateSubnetResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateSubnetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateSubnetWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateSubnetWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateSubnetParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateSubnetWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateSubnetWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSubnetParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateSubnetParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call) Return(_a0 *network.CreateOrUpdateSubnetResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, string, io.Reader, ...network.RequestEditorFn) (*network.CreateOrUpdateSubnetResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateSubnetWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateSubnetWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSubnetParams, body network.CreateOrUpdateSubnetJSONRequestBody, reqEditors ...network.RequestEditorFn) (*network.CreateOrUpdateSubnetResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSubnetWithResponse")
	}

	var r0 *network.CreateOrUpdateSubnetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, network.CreateOrUpdateSubnetJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateSubnetResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, network.CreateOrUpdateSubnetJSONRequestBody, ...network.RequestEditorFn) *network.CreateOrUpdateSubnetResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateOrUpdateSubnetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, network.CreateOrUpdateSubnetJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateSubnetWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateSubnetWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateSubnetParams
//   - body network.CreateOrUpdateSubnetJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateSubnetWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call{Call: _e.mock.On("CreateOrUpdateSubnetWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSubnetParams, body network.CreateOrUpdateSubnetJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateSubnetParams), args[5].(network.CreateOrUpdateSubnetJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call) Return(_a0 *network.CreateOrUpdateSubnetResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, network.CreateOrUpdateSubnetJSONRequestBody, ...network.RequestEditorFn) (*network.CreateOrUpdateSubnetResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateSubnetWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInternetGatewayWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteInternetGatewayWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteInternetGatewayParams, reqEditors ...network.RequestEditorFn) (*network.DeleteInternetGatewayResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInternetGatewayWithResponse")
	}

	var r0 *network.DeleteInternetGatewayResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteInternetGatewayParams, ...network.RequestEditorFn) (*network.DeleteInternetGatewayResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteInternetGatewayParams, ...network.RequestEditorFn) *network.DeleteInternetGatewayResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.DeleteInternetGatewayResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteInternetGatewayParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInternetGatewayWithResponse'
type MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call struct {
	*mock.Call
}

// DeleteInternetGatewayWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteInternetGatewayParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteInternetGatewayWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call{Call: _e.mock.On("DeleteInternetGatewayWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteInternetGatewayParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteInternetGatewayParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call) Return(_a0 *network.DeleteInternetGatewayResponse, _a1 error) *MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteInternetGatewayParams, ...network.RequestEditorFn) (*network.DeleteInternetGatewayResponse, error)) *MockClientWithResponsesInterface_DeleteInternetGatewayWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetworkWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteNetworkWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteNetworkParams, reqEditors ...network.RequestEditorFn) (*network.DeleteNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkWithResponse")
	}

	var r0 *network.DeleteNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNetworkParams, ...network.RequestEditorFn) (*network.DeleteNetworkResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNetworkParams, ...network.RequestEditorFn) *network.DeleteNetworkResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.DeleteNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNetworkParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetworkWithResponse'
type MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call struct {
	*mock.Call
}

// DeleteNetworkWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteNetworkParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteNetworkWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call{Call: _e.mock.On("DeleteNetworkWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteNetworkParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteNetworkParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call) Return(_a0 *network.DeleteNetworkResponse, _a1 error) *MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNetworkParams, ...network.RequestEditorFn) (*network.DeleteNetworkResponse, error)) *MockClientWithResponsesInterface_DeleteNetworkWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNicWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteNicWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteNicParams, reqEditors ...network.RequestEditorFn) (*network.DeleteNicResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNicWithResponse")
	}

	var r0 *network.DeleteNicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNicParams, ...network.RequestEditorFn) (*network.DeleteNicResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNicParams, ...network.RequestEditorFn) *network.DeleteNicResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.DeleteNicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNicParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteNicWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNicWithResponse'
type MockClientWithResponsesInterface_DeleteNicWithResponse_Call struct {
	*mock.Call
}

// DeleteNicWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteNicParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteNicWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteNicWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteNicWithResponse_Call{Call: _e.mock.On("DeleteNicWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteNicWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteNicParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteNicWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteNicParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteNicWithResponse_Call) Return(_a0 *network.DeleteNicResponse, _a1 error) *MockClientWithResponsesInterface_DeleteNicWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteNicWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNicParams, ...network.RequestEditorFn) (*network.DeleteNicResponse, error)) *MockClientWithResponsesInterface_DeleteNicWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePublicIpWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeletePublicIpWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeletePublicIpParams, reqEditors ...network.RequestEditorFn) (*network.DeletePublicIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublicIpWithResponse")
	}

	var r0 *network.DeletePublicIpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeletePublicIpParams, ...network.RequestEditorFn) (*network.DeletePublicIpResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeletePublicIpParams, ...network.RequestEditorFn) *network.DeletePublicIpResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.DeletePublicIpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeletePublicIpParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePublicIpWithResponse'
type MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call struct {
	*mock.Call
}

// DeletePublicIpWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeletePublicIpParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeletePublicIpWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call {
	return &MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call{Call: _e.mock.On("DeletePublicIpWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeletePublicIpParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeletePublicIpParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call) Return(_a0 *network.DeletePublicIpResponse, _a1 error) *MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeletePublicIpParams, ...network.RequestEditorFn) (*network.DeletePublicIpResponse, error)) *MockClientWithResponsesInterface_DeletePublicIpWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRouteTableWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteRouteTableWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteRouteTableParams, reqEditors ...network.RequestEditorFn) (*network.DeleteRouteTableResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRouteTableWithResponse")
	}

	var r0 *network.DeleteRouteTableResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteRouteTableParams, ...network.RequestEditorFn) (*network.DeleteRouteTableResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteRouteTableParams, ...network.RequestEditorFn) *network.DeleteRouteTableResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.DeleteRouteTableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteRouteTableParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRouteTableWithResponse'
type MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call struct {
	*mock.Call
}

// DeleteRouteTableWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteRouteTableParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteRouteTableWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call{Call: _e.mock.On("DeleteRouteTableWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteRouteTableParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteRouteTableParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call) Return(_a0 *network.DeleteRouteTableResponse, _a1 error) *MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteRouteTableParams, ...network.RequestEditorFn) (*network.DeleteRouteTableResponse, error)) *MockClientWithResponsesInterface_DeleteRouteTableWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecurityGroupWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteSecurityGroupWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteSecurityGroupParams, reqEditors ...network.RequestEditorFn) (*network.DeleteSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecurityGroupWithResponse")
	}

	var r0 *network.DeleteSecurityGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSecurityGroupParams, ...network.RequestEditorFn) (*network.DeleteSecurityGroupResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSecurityGroupParams, ...network.RequestEditorFn) *network.DeleteSecurityGroupResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.DeleteSecurityGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSecurityGroupParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecurityGroupWithResponse'
type MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call struct {
	*mock.Call
}

// DeleteSecurityGroupWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteSecurityGroupParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteSecurityGroupWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call{Call: _e.mock.On("DeleteSecurityGroupWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteSecurityGroupParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteSecurityGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call) Return(_a0 *network.DeleteSecurityGroupResponse, _a1 error) *MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSecurityGroupParams, ...network.RequestEditorFn) (*network.DeleteSecurityGroupResponse, error)) *MockClientWithResponsesInterface_DeleteSecurityGroupWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubnetWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteSubnetWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteSubnetParams, reqEditors ...network.RequestEditorFn) (*network.DeleteSubnetResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubnetWithResponse")
	}

	var r0 *network.DeleteSubnetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSubnetParams, ...network.RequestEditorFn) (*network.DeleteSubnetResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSubnetParams, ...network.RequestEditorFn) *network.DeleteSubnetResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.DeleteSubnetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSubnetParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubnetWithResponse'
type MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call struct {
	*mock.Call
}

// DeleteSubnetWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteSubnetParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteSubnetWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call{Call: _e.mock.On("DeleteSubnetWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteSubnetParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteSubnetParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call) Return(_a0 *network.DeleteSubnetResponse, _a1 error) *MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSubnetParams, ...network.RequestEditorFn) (*network.DeleteSubnetResponse, error)) *MockClientWithResponsesInterface_DeleteSubnetWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternetGatewayWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetInternetGatewayWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*network.GetInternetGatewayResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInternetGatewayWithResponse")
	}

	var r0 *network.GetInternetGatewayResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetInternetGatewayResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *network.GetInternetGatewayResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.GetInternetGatewayResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternetGatewayWithResponse'
type MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call struct {
	*mock.Call
}

// GetInternetGatewayWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetInternetGatewayWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call {
	return &MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call{Call: _e.mock.On("GetInternetGatewayWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call) Return(_a0 *network.GetInternetGatewayResponse, _a1 error) *MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetInternetGatewayResponse, error)) *MockClientWithResponsesInterface_GetInternetGatewayWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetNetworkWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*network.GetNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkWithResponse")
	}

	var r0 *network.GetNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetNetworkResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *network.GetNetworkResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.GetNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetNetworkWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkWithResponse'
type MockClientWithResponsesInterface_GetNetworkWithResponse_Call struct {
	*mock.Call
}

// GetNetworkWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetNetworkWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetNetworkWithResponse_Call {
	return &MockClientWithResponsesInterface_GetNetworkWithResponse_Call{Call: _e.mock.On("GetNetworkWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetNetworkWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_GetNetworkWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNetworkWithResponse_Call) Return(_a0 *network.GetNetworkResponse, _a1 error) *MockClientWithResponsesInterface_GetNetworkWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNetworkWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetNetworkResponse, error)) *MockClientWithResponsesInterface_GetNetworkWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetNicWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetNicWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*network.GetNicResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNicWithResponse")
	}

	var r0 *network.GetNicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetNicResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *network.GetNicResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.GetNicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetNicWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNicWithResponse'
type MockClientWithResponsesInterface_GetNicWithResponse_Call struct {
	*mock.Call
}

// GetNicWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetNicWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetNicWithResponse_Call {
	return &MockClientWithResponsesInterface_GetNicWithResponse_Call{Call: _e.mock.On("GetNicWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetNicWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_GetNicWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNicWithResponse_Call) Return(_a0 *network.GetNicResponse, _a1 error) *MockClientWithResponsesInterface_GetNicWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNicWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetNicResponse, error)) *MockClientWithResponsesInterface_GetNicWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicIpWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetPublicIpWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*network.GetPublicIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicIpWithResponse")
	}

	var r0 *network.GetPublicIpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetPublicIpResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *network.GetPublicIpResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.GetPublicIpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetPublicIpWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicIpWithResponse'
type MockClientWithResponsesInterface_GetPublicIpWithResponse_Call struct {
	*mock.Call
}

// GetPublicIpWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetPublicIpWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetPublicIpWithResponse_Call {
	return &MockClientWithResponsesInterface_GetPublicIpWithResponse_Call{Call: _e.mock.On("GetPublicIpWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetPublicIpWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_GetPublicIpWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetPublicIpWithResponse_Call) Return(_a0 *network.GetPublicIpResponse, _a1 error) *MockClientWithResponsesInterface_GetPublicIpWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetPublicIpWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetPublicIpResponse, error)) *MockClientWithResponsesInterface_GetPublicIpWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouteTableWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetRouteTableWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*network.GetRouteTableResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRouteTableWithResponse")
	}

	var r0 *network.GetRouteTableResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetRouteTableResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *network.GetRouteTableResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.GetRouteTableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetRouteTableWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteTableWithResponse'
type MockClientWithResponsesInterface_GetRouteTableWithResponse_Call struct {
	*mock.Call
}

// GetRouteTableWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetRouteTableWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetRouteTableWithResponse_Call {
	return &MockClientWithResponsesInterface_GetRouteTableWithResponse_Call{Call: _e.mock.On("GetRouteTableWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetRouteTableWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_GetRouteTableWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetRouteTableWithResponse_Call) Return(_a0 *network.GetRouteTableResponse, _a1 error) *MockClientWithResponsesInterface_GetRouteTableWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetRouteTableWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetRouteTableResponse, error)) *MockClientWithResponsesInterface_GetRouteTableWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecurityGroupWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetSecurityGroupWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*network.GetSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecurityGroupWithResponse")
	}

	var r0 *network.GetSecurityGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetSecurityGroupResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *network.GetSecurityGroupResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.GetSecurityGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecurityGroupWithResponse'
type MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call struct {
	*mock.Call
}

// GetSecurityGroupWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetSecurityGroupWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call {
	return &MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call{Call: _e.mock.On("GetSecurityGroupWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call) Return(_a0 *network.GetSecurityGroupResponse, _a1 error) *MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetSecurityGroupResponse, error)) *MockClientWithResponsesInterface_GetSecurityGroupWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetSkuWithResponse provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetSkuWithResponse(ctx context.Context, tenant network.Tenant, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*network.GetSkuResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSkuWithResponse")
	}

	var r0 *network.GetSkuResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.ResourceName, ...network.RequestEditorFn) (*network.GetSkuResponse, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.ResourceName, ...network.RequestEditorFn) *network.GetSkuResponse); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.GetSkuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetSkuWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSkuWithResponse'
type MockClientWithResponsesInterface_GetSkuWithResponse_Call struct {
	*mock.Call
}

// GetSkuWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetSkuWithResponse(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	return &MockClientWithResponsesInterface_GetSkuWithResponse_Call{Call: _e.mock.On("GetSkuWithResponse",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetSkuWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSkuWithResponse_Call) Return(_a0 *network.GetSkuResponse, _a1 error) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSkuWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.ResourceName, ...network.RequestEditorFn) (*network.GetSkuResponse, error)) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubnetWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetSubnetWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*network.GetSubnetResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubnetWithResponse")
	}

	var r0 *network.GetSubnetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetSubnetResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *network.GetSubnetResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.GetSubnetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetSubnetWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubnetWithResponse'
type MockClientWithResponsesInterface_GetSubnetWithResponse_Call struct {
	*mock.Call
}

// GetSubnetWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetSubnetWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetSubnetWithResponse_Call {
	return &MockClientWithResponsesInterface_GetSubnetWithResponse_Call{Call: _e.mock.On("GetSubnetWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetSubnetWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_GetSubnetWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSubnetWithResponse_Call) Return(_a0 *network.GetSubnetResponse, _a1 error) *MockClientWithResponsesInterface_GetSubnetWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSubnetWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*network.GetSubnetResponse, error)) *MockClientWithResponsesInterface_GetSubnetWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListInternetGatewaysWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListInternetGatewaysWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListInternetGatewaysParams, reqEditors ...network.RequestEditorFn) (*network.ListInternetGatewaysResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInternetGatewaysWithResponse")
	}

	var r0 *network.ListInternetGatewaysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListInternetGatewaysParams, ...network.RequestEditorFn) (*network.ListInternetGatewaysResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListInternetGatewaysParams, ...network.RequestEditorFn) *network.ListInternetGatewaysResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.ListInternetGatewaysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListInternetGatewaysParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInternetGatewaysWithResponse'
type MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call struct {
	*mock.Call
}

// ListInternetGatewaysWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListInternetGatewaysParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListInternetGatewaysWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call {
	return &MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call{Call: _e.mock.On("ListInternetGatewaysWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListInternetGatewaysParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListInternetGatewaysParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call) Return(_a0 *network.ListInternetGatewaysResponse, _a1 error) *MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListInternetGatewaysParams, ...network.RequestEditorFn) (*network.ListInternetGatewaysResponse, error)) *MockClientWithResponsesInterface_ListInternetGatewaysWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworksWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListNetworksWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListNetworksParams, reqEditors ...network.RequestEditorFn) (*network.ListNetworksResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworksWithResponse")
	}

	var r0 *network.ListNetworksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListNetworksParams, ...network.RequestEditorFn) (*network.ListNetworksResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListNetworksParams, ...network.RequestEditorFn) *network.ListNetworksResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.ListNetworksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListNetworksParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListNetworksWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworksWithResponse'
type MockClientWithResponsesInterface_ListNetworksWithResponse_Call struct {
	*mock.Call
}

// ListNetworksWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListNetworksParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListNetworksWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListNetworksWithResponse_Call {
	return &MockClientWithResponsesInterface_ListNetworksWithResponse_Call{Call: _e.mock.On("ListNetworksWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListNetworksWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListNetworksParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_ListNetworksWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListNetworksParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNetworksWithResponse_Call) Return(_a0 *network.ListNetworksResponse, _a1 error) *MockClientWithResponsesInterface_ListNetworksWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNetworksWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListNetworksParams, ...network.RequestEditorFn) (*network.ListNetworksResponse, error)) *MockClientWithResponsesInterface_ListNetworksWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListNicsWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListNicsWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListNicsParams, reqEditors ...network.RequestEditorFn) (*network.ListNicsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNicsWithResponse")
	}

	var r0 *network.ListNicsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListNicsParams, ...network.RequestEditorFn) (*network.ListNicsResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListNicsParams, ...network.RequestEditorFn) *network.ListNicsResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.ListNicsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListNicsParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListNicsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNicsWithResponse'
type MockClientWithResponsesInterface_ListNicsWithResponse_Call struct {
	*mock.Call
}

// ListNicsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListNicsParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListNicsWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListNicsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListNicsWithResponse_Call{Call: _e.mock.On("ListNicsWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListNicsWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListNicsParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_ListNicsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListNicsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNicsWithResponse_Call) Return(_a0 *network.ListNicsResponse, _a1 error) *MockClientWithResponsesInterface_ListNicsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNicsWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListNicsParams, ...network.RequestEditorFn) (*network.ListNicsResponse, error)) *MockClientWithResponsesInterface_ListNicsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListPublicIpsWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListPublicIpsWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListPublicIpsParams, reqEditors ...network.RequestEditorFn) (*network.ListPublicIpsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPublicIpsWithResponse")
	}

	var r0 *network.ListPublicIpsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListPublicIpsParams, ...network.RequestEditorFn) (*network.ListPublicIpsResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListPublicIpsParams, ...network.RequestEditorFn) *network.ListPublicIpsResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.ListPublicIpsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListPublicIpsParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPublicIpsWithResponse'
type MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call struct {
	*mock.Call
}

// ListPublicIpsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListPublicIpsParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListPublicIpsWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call{Call: _e.mock.On("ListPublicIpsWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListPublicIpsParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListPublicIpsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call) Return(_a0 *network.ListPublicIpsResponse, _a1 error) *MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListPublicIpsParams, ...network.RequestEditorFn) (*network.ListPublicIpsResponse, error)) *MockClientWithResponsesInterface_ListPublicIpsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListRouteTablesWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListRouteTablesWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListRouteTablesParams, reqEditors ...network.RequestEditorFn) (*network.ListRouteTablesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRouteTablesWithResponse")
	}

	var r0 *network.ListRouteTablesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListRouteTablesParams, ...network.RequestEditorFn) (*network.ListRouteTablesResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListRouteTablesParams, ...network.RequestEditorFn) *network.ListRouteTablesResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.ListRouteTablesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListRouteTablesParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRouteTablesWithResponse'
type MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call struct {
	*mock.Call
}

// ListRouteTablesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListRouteTablesParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListRouteTablesWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call {
	return &MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call{Call: _e.mock.On("ListRouteTablesWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListRouteTablesParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListRouteTablesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call) Return(_a0 *network.ListRouteTablesResponse, _a1 error) *MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListRouteTablesParams, ...network.RequestEditorFn) (*network.ListRouteTablesResponse, error)) *MockClientWithResponsesInterface_ListRouteTablesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecurityGroupsWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListSecurityGroupsWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListSecurityGroupsParams, reqEditors ...network.RequestEditorFn) (*network.ListSecurityGroupsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityGroupsWithResponse")
	}

	var r0 *network.ListSecurityGroupsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListSecurityGroupsParams, ...network.RequestEditorFn) (*network.ListSecurityGroupsResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListSecurityGroupsParams, ...network.RequestEditorFn) *network.ListSecurityGroupsResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.ListSecurityGroupsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListSecurityGroupsParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecurityGroupsWithResponse'
type MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call struct {
	*mock.Call
}

// ListSecurityGroupsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListSecurityGroupsParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListSecurityGroupsWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call{Call: _e.mock.On("ListSecurityGroupsWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListSecurityGroupsParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListSecurityGroupsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call) Return(_a0 *network.ListSecurityGroupsResponse, _a1 error) *MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListSecurityGroupsParams, ...network.RequestEditorFn) (*network.ListSecurityGroupsResponse, error)) *MockClientWithResponsesInterface_ListSecurityGroupsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListSkusWithResponse provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListSkusWithResponse(ctx context.Context, tenant network.Tenant, params *network.ListSkusParams, reqEditors ...network.RequestEditorFn) (*network.ListSkusResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkusWithResponse")
	}

	var r0 *network.ListSkusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, *network.ListSkusParams, ...network.RequestEditorFn) (*network.ListSkusResponse, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, *network.ListSkusParams, ...network.RequestEditorFn) *network.ListSkusResponse); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.ListSkusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, *network.ListSkusParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListSkusWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkusWithResponse'
type MockClientWithResponsesInterface_ListSkusWithResponse_Call struct {
	*mock.Call
}

// ListSkusWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - params *network.ListSkusParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListSkusWithResponse(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	return &MockClientWithResponsesInterface_ListSkusWithResponse_Call{Call: _e.mock.On("ListSkusWithResponse",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListSkusWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, params *network.ListSkusParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(*network.ListSkusParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSkusWithResponse_Call) Return(_a0 *network.ListSkusResponse, _a1 error) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSkusWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, *network.ListSkusParams, ...network.RequestEditorFn) (*network.ListSkusResponse, error)) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubnetsWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListSubnetsWithResponse(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListSubnetsParams, reqEditors ...network.RequestEditorFn) (*network.ListSubnetsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubnetsWithResponse")
	}

	var r0 *network.ListSubnetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListSubnetsParams, ...network.RequestEditorFn) (*network.ListSubnetsResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListSubnetsParams, ...network.RequestEditorFn) *network.ListSubnetsResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.ListSubnetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListSubnetsParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListSubnetsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubnetsWithResponse'
type MockClientWithResponsesInterface_ListSubnetsWithResponse_Call struct {
	*mock.Call
}

// ListSubnetsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListSubnetsParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListSubnetsWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListSubnetsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListSubnetsWithResponse_Call{Call: _e.mock.On("ListSubnetsWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListSubnetsWithResponse_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListSubnetsParams, reqEditors ...network.RequestEditorFn)) *MockClientWithResponsesInterface_ListSubnetsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListSubnetsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSubnetsWithResponse_Call) Return(_a0 *network.ListSubnetsResponse, _a1 error) *MockClientWithResponsesInterface_ListSubnetsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSubnetsWithResponse_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListSubnetsParams, ...network.RequestEditorFn) (*network.ListSubnetsResponse, error)) *MockClientWithResponsesInterface_ListSubnetsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
