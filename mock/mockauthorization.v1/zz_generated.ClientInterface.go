// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockauthorization

import (
	context "context"

	authorization "github.com/eu-sovereign-cloud/go-sdk/pkg/foundation.authorization.v1"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateRole provides a mock function with given fields: ctx, tenant, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateRole(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.CreateOrUpdateRoleParams, body authorization.CreateOrUpdateRoleJSONRequestBody, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRole")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleParams, authorization.CreateOrUpdateRoleJSONRequestBody, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleParams, authorization.CreateOrUpdateRoleJSONRequestBody, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleParams, authorization.CreateOrUpdateRoleJSONRequestBody, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRole'
type MockClientInterface_CreateOrUpdateRole_Call struct {
	*mock.Call
}

// CreateOrUpdateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - name authorization.ResourceName
//   - params *authorization.CreateOrUpdateRoleParams
//   - body authorization.CreateOrUpdateRoleJSONRequestBody
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateRole(ctx interface{}, tenant interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateRole_Call {
	return &MockClientInterface_CreateOrUpdateRole_Call{Call: _e.mock.On("CreateOrUpdateRole",
		append([]interface{}{ctx, tenant, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateRole_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.CreateOrUpdateRoleParams, body authorization.CreateOrUpdateRoleJSONRequestBody, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_CreateOrUpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(authorization.ResourceName), args[3].(*authorization.CreateOrUpdateRoleParams), args[4].(authorization.CreateOrUpdateRoleJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRole_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRole_Call) RunAndReturn(run func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleParams, authorization.CreateOrUpdateRoleJSONRequestBody, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRoleAssignment provides a mock function with given fields: ctx, tenant, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateRoleAssignment(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.CreateOrUpdateRoleAssignmentParams, body authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRoleAssignment")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleAssignmentParams, authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleAssignmentParams, authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleAssignmentParams, authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRoleAssignment'
type MockClientInterface_CreateOrUpdateRoleAssignment_Call struct {
	*mock.Call
}

// CreateOrUpdateRoleAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - name authorization.ResourceName
//   - params *authorization.CreateOrUpdateRoleAssignmentParams
//   - body authorization.CreateOrUpdateRoleAssignmentJSONRequestBody
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateRoleAssignment(ctx interface{}, tenant interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateRoleAssignment_Call {
	return &MockClientInterface_CreateOrUpdateRoleAssignment_Call{Call: _e.mock.On("CreateOrUpdateRoleAssignment",
		append([]interface{}{ctx, tenant, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateRoleAssignment_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.CreateOrUpdateRoleAssignmentParams, body authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_CreateOrUpdateRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(authorization.ResourceName), args[3].(*authorization.CreateOrUpdateRoleAssignmentParams), args[4].(authorization.CreateOrUpdateRoleAssignmentJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRoleAssignment_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateRoleAssignment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRoleAssignment_Call) RunAndReturn(run func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleAssignmentParams, authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateRoleAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRoleAssignmentWithBody provides a mock function with given fields: ctx, tenant, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateRoleAssignmentWithBody(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.CreateOrUpdateRoleAssignmentParams, contentType string, body io.Reader, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRoleAssignmentWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleAssignmentParams, string, io.Reader, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleAssignmentParams, string, io.Reader, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleAssignmentParams, string, io.Reader, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRoleAssignmentWithBody'
type MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateRoleAssignmentWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - name authorization.ResourceName
//   - params *authorization.CreateOrUpdateRoleAssignmentParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateRoleAssignmentWithBody(ctx interface{}, tenant interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call {
	return &MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call{Call: _e.mock.On("CreateOrUpdateRoleAssignmentWithBody",
		append([]interface{}{ctx, tenant, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.CreateOrUpdateRoleAssignmentParams, contentType string, body io.Reader, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(authorization.ResourceName), args[3].(*authorization.CreateOrUpdateRoleAssignmentParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call) RunAndReturn(run func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleAssignmentParams, string, io.Reader, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateRoleAssignmentWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRoleWithBody provides a mock function with given fields: ctx, tenant, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateRoleWithBody(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.CreateOrUpdateRoleParams, contentType string, body io.Reader, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRoleWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleParams, string, io.Reader, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleParams, string, io.Reader, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleParams, string, io.Reader, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateRoleWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRoleWithBody'
type MockClientInterface_CreateOrUpdateRoleWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateRoleWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - name authorization.ResourceName
//   - params *authorization.CreateOrUpdateRoleParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateRoleWithBody(ctx interface{}, tenant interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateRoleWithBody_Call {
	return &MockClientInterface_CreateOrUpdateRoleWithBody_Call{Call: _e.mock.On("CreateOrUpdateRoleWithBody",
		append([]interface{}{ctx, tenant, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateRoleWithBody_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.CreateOrUpdateRoleParams, contentType string, body io.Reader, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_CreateOrUpdateRoleWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(authorization.ResourceName), args[3].(*authorization.CreateOrUpdateRoleParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRoleWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateRoleWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRoleWithBody_Call) RunAndReturn(run func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.CreateOrUpdateRoleParams, string, io.Reader, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateRoleWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: ctx, tenant, name, params, reqEditors
func (_m *MockClientInterface) DeleteRole(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.DeleteRoleParams, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.DeleteRoleParams, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.DeleteRoleParams, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.DeleteRoleParams, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockClientInterface_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - name authorization.ResourceName
//   - params *authorization.DeleteRoleParams
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteRole(ctx interface{}, tenant interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteRole_Call {
	return &MockClientInterface_DeleteRole_Call{Call: _e.mock.On("DeleteRole",
		append([]interface{}{ctx, tenant, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteRole_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.DeleteRoleParams, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(authorization.ResourceName), args[3].(*authorization.DeleteRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteRole_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteRole_Call) RunAndReturn(run func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.DeleteRoleParams, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleAssignment provides a mock function with given fields: ctx, tenant, name, params, reqEditors
func (_m *MockClientInterface) DeleteRoleAssignment(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.DeleteRoleAssignmentParams, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleAssignment")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.DeleteRoleAssignmentParams, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.DeleteRoleAssignmentParams, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.DeleteRoleAssignmentParams, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleAssignment'
type MockClientInterface_DeleteRoleAssignment_Call struct {
	*mock.Call
}

// DeleteRoleAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - name authorization.ResourceName
//   - params *authorization.DeleteRoleAssignmentParams
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteRoleAssignment(ctx interface{}, tenant interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteRoleAssignment_Call {
	return &MockClientInterface_DeleteRoleAssignment_Call{Call: _e.mock.On("DeleteRoleAssignment",
		append([]interface{}{ctx, tenant, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteRoleAssignment_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, params *authorization.DeleteRoleAssignmentParams, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_DeleteRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(authorization.ResourceName), args[3].(*authorization.DeleteRoleAssignmentParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteRoleAssignment_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteRoleAssignment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteRoleAssignment_Call) RunAndReturn(run func(context.Context, authorization.Tenant, authorization.ResourceName, *authorization.DeleteRoleAssignmentParams, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteRoleAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// GetRole provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientInterface) GetRole(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRole")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, authorization.ResourceName, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type MockClientInterface_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - name authorization.ResourceName
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetRole(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetRole_Call {
	return &MockClientInterface_GetRole_Call{Call: _e.mock.On("GetRole",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetRole_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(authorization.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetRole_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetRole_Call) RunAndReturn(run func(context.Context, authorization.Tenant, authorization.ResourceName, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleAssignment provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientInterface) GetRoleAssignment(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleAssignment")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, authorization.ResourceName, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, authorization.ResourceName, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAssignment'
type MockClientInterface_GetRoleAssignment_Call struct {
	*mock.Call
}

// GetRoleAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - name authorization.ResourceName
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetRoleAssignment(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetRoleAssignment_Call {
	return &MockClientInterface_GetRoleAssignment_Call{Call: _e.mock.On("GetRoleAssignment",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetRoleAssignment_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, name authorization.ResourceName, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_GetRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(authorization.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetRoleAssignment_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetRoleAssignment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetRoleAssignment_Call) RunAndReturn(run func(context.Context, authorization.Tenant, authorization.ResourceName, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetRoleAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleAssignments provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientInterface) ListRoleAssignments(ctx context.Context, tenant authorization.Tenant, params *authorization.ListRoleAssignmentsParams, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleAssignments")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, *authorization.ListRoleAssignmentsParams, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, *authorization.ListRoleAssignmentsParams, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, *authorization.ListRoleAssignmentsParams, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListRoleAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleAssignments'
type MockClientInterface_ListRoleAssignments_Call struct {
	*mock.Call
}

// ListRoleAssignments is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - params *authorization.ListRoleAssignmentsParams
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListRoleAssignments(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListRoleAssignments_Call {
	return &MockClientInterface_ListRoleAssignments_Call{Call: _e.mock.On("ListRoleAssignments",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListRoleAssignments_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, params *authorization.ListRoleAssignmentsParams, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_ListRoleAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(*authorization.ListRoleAssignmentsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListRoleAssignments_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListRoleAssignments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListRoleAssignments_Call) RunAndReturn(run func(context.Context, authorization.Tenant, *authorization.ListRoleAssignmentsParams, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListRoleAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientInterface) ListRoles(ctx context.Context, tenant authorization.Tenant, params *authorization.ListRolesParams, reqEditors ...authorization.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, *authorization.ListRolesParams, ...authorization.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.Tenant, *authorization.ListRolesParams, ...authorization.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.Tenant, *authorization.ListRolesParams, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockClientInterface_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.Tenant
//   - params *authorization.ListRolesParams
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListRoles(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListRoles_Call {
	return &MockClientInterface_ListRoles_Call{Call: _e.mock.On("ListRoles",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListRoles_Call) Run(run func(ctx context.Context, tenant authorization.Tenant, params *authorization.ListRolesParams, reqEditors ...authorization.RequestEditorFn)) *MockClientInterface_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.Tenant), args[2].(*authorization.ListRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListRoles_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListRoles_Call) RunAndReturn(run func(context.Context, authorization.Tenant, *authorization.ListRolesParams, ...authorization.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
