// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocknetwork

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	network "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/foundation.network.v1"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateInternetGateway provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateInternetGateway(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateInternetGatewayParams, body network.CreateOrUpdateInternetGatewayJSONRequestBody, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInternetGateway")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, network.CreateOrUpdateInternetGatewayJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, network.CreateOrUpdateInternetGatewayJSONRequestBody, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, network.CreateOrUpdateInternetGatewayJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateInternetGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInternetGateway'
type MockClientInterface_CreateOrUpdateInternetGateway_Call struct {
	*mock.Call
}

// CreateOrUpdateInternetGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateInternetGatewayParams
//   - body network.CreateOrUpdateInternetGatewayJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateInternetGateway(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateInternetGateway_Call {
	return &MockClientInterface_CreateOrUpdateInternetGateway_Call{Call: _e.mock.On("CreateOrUpdateInternetGateway",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateInternetGateway_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateInternetGatewayParams, body network.CreateOrUpdateInternetGatewayJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateInternetGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateInternetGatewayParams), args[5].(network.CreateOrUpdateInternetGatewayJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInternetGateway_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateInternetGateway_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInternetGateway_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, network.CreateOrUpdateInternetGatewayJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateInternetGateway_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateInternetGatewayWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateInternetGatewayWithBody(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateInternetGatewayParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInternetGatewayWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, string, io.Reader, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInternetGatewayWithBody'
type MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateInternetGatewayWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateInternetGatewayParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateInternetGatewayWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call {
	return &MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call{Call: _e.mock.On("CreateOrUpdateInternetGatewayWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateInternetGatewayParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateInternetGatewayParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateInternetGatewayParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateInternetGatewayWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNetwork provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateNetwork(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNetworkParams, body network.CreateOrUpdateNetworkJSONRequestBody, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNetwork")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, network.CreateOrUpdateNetworkJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, network.CreateOrUpdateNetworkJSONRequestBody, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, network.CreateOrUpdateNetworkJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNetwork'
type MockClientInterface_CreateOrUpdateNetwork_Call struct {
	*mock.Call
}

// CreateOrUpdateNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateNetworkParams
//   - body network.CreateOrUpdateNetworkJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateNetwork(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateNetwork_Call {
	return &MockClientInterface_CreateOrUpdateNetwork_Call{Call: _e.mock.On("CreateOrUpdateNetwork",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateNetwork_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNetworkParams, body network.CreateOrUpdateNetworkJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateNetworkParams), args[5].(network.CreateOrUpdateNetworkJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNetwork_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateNetwork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNetwork_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, network.CreateOrUpdateNetworkJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNetworkWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateNetworkWithBody(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNetworkParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNetworkWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, string, io.Reader, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateNetworkWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNetworkWithBody'
type MockClientInterface_CreateOrUpdateNetworkWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateNetworkWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateNetworkParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateNetworkWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateNetworkWithBody_Call {
	return &MockClientInterface_CreateOrUpdateNetworkWithBody_Call{Call: _e.mock.On("CreateOrUpdateNetworkWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateNetworkWithBody_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNetworkParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateNetworkWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateNetworkParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNetworkWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateNetworkWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNetworkWithBody_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNetworkParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateNetworkWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNic provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateNic(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNicParams, body network.CreateOrUpdateNicJSONRequestBody, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNic")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, network.CreateOrUpdateNicJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, network.CreateOrUpdateNicJSONRequestBody, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, network.CreateOrUpdateNicJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateNic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNic'
type MockClientInterface_CreateOrUpdateNic_Call struct {
	*mock.Call
}

// CreateOrUpdateNic is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateNicParams
//   - body network.CreateOrUpdateNicJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateNic(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateNic_Call {
	return &MockClientInterface_CreateOrUpdateNic_Call{Call: _e.mock.On("CreateOrUpdateNic",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateNic_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNicParams, body network.CreateOrUpdateNicJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateNic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateNicParams), args[5].(network.CreateOrUpdateNicJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNic_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateNic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNic_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, network.CreateOrUpdateNicJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateNic_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNicWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateNicWithBody(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNicParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNicWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, string, io.Reader, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateNicWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNicWithBody'
type MockClientInterface_CreateOrUpdateNicWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateNicWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateNicParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateNicWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateNicWithBody_Call {
	return &MockClientInterface_CreateOrUpdateNicWithBody_Call{Call: _e.mock.On("CreateOrUpdateNicWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateNicWithBody_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateNicParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateNicWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateNicParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNicWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateNicWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNicWithBody_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateNicParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateNicWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdatePublicIp provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdatePublicIp(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdatePublicIpParams, body network.CreateOrUpdatePublicIpJSONRequestBody, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdatePublicIp")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, network.CreateOrUpdatePublicIpJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, network.CreateOrUpdatePublicIpJSONRequestBody, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, network.CreateOrUpdatePublicIpJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdatePublicIp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdatePublicIp'
type MockClientInterface_CreateOrUpdatePublicIp_Call struct {
	*mock.Call
}

// CreateOrUpdatePublicIp is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdatePublicIpParams
//   - body network.CreateOrUpdatePublicIpJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdatePublicIp(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdatePublicIp_Call {
	return &MockClientInterface_CreateOrUpdatePublicIp_Call{Call: _e.mock.On("CreateOrUpdatePublicIp",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdatePublicIp_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdatePublicIpParams, body network.CreateOrUpdatePublicIpJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdatePublicIp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdatePublicIpParams), args[5].(network.CreateOrUpdatePublicIpJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdatePublicIp_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdatePublicIp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdatePublicIp_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, network.CreateOrUpdatePublicIpJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdatePublicIp_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdatePublicIpWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdatePublicIpWithBody(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdatePublicIpParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdatePublicIpWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, string, io.Reader, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdatePublicIpWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdatePublicIpWithBody'
type MockClientInterface_CreateOrUpdatePublicIpWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdatePublicIpWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdatePublicIpParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdatePublicIpWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdatePublicIpWithBody_Call {
	return &MockClientInterface_CreateOrUpdatePublicIpWithBody_Call{Call: _e.mock.On("CreateOrUpdatePublicIpWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdatePublicIpWithBody_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdatePublicIpParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdatePublicIpWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdatePublicIpParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdatePublicIpWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdatePublicIpWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdatePublicIpWithBody_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdatePublicIpParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdatePublicIpWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRouteTable provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateRouteTable(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateRouteTableParams, body network.CreateOrUpdateRouteTableJSONRequestBody, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRouteTable")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, network.CreateOrUpdateRouteTableJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, network.CreateOrUpdateRouteTableJSONRequestBody, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, network.CreateOrUpdateRouteTableJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateRouteTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRouteTable'
type MockClientInterface_CreateOrUpdateRouteTable_Call struct {
	*mock.Call
}

// CreateOrUpdateRouteTable is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateRouteTableParams
//   - body network.CreateOrUpdateRouteTableJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateRouteTable(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateRouteTable_Call {
	return &MockClientInterface_CreateOrUpdateRouteTable_Call{Call: _e.mock.On("CreateOrUpdateRouteTable",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateRouteTable_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateRouteTableParams, body network.CreateOrUpdateRouteTableJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateRouteTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateRouteTableParams), args[5].(network.CreateOrUpdateRouteTableJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRouteTable_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateRouteTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRouteTable_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, network.CreateOrUpdateRouteTableJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateRouteTable_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRouteTableWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateRouteTableWithBody(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateRouteTableParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRouteTableWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, string, io.Reader, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateRouteTableWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRouteTableWithBody'
type MockClientInterface_CreateOrUpdateRouteTableWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateRouteTableWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateRouteTableParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateRouteTableWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateRouteTableWithBody_Call {
	return &MockClientInterface_CreateOrUpdateRouteTableWithBody_Call{Call: _e.mock.On("CreateOrUpdateRouteTableWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateRouteTableWithBody_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateRouteTableParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateRouteTableWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateRouteTableParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRouteTableWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateRouteTableWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateRouteTableWithBody_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateRouteTableParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateRouteTableWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateSecurityGroup provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateSecurityGroup(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSecurityGroupParams, body network.CreateOrUpdateSecurityGroupJSONRequestBody, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSecurityGroup")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, network.CreateOrUpdateSecurityGroupJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, network.CreateOrUpdateSecurityGroupJSONRequestBody, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, network.CreateOrUpdateSecurityGroupJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateSecurityGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateSecurityGroup'
type MockClientInterface_CreateOrUpdateSecurityGroup_Call struct {
	*mock.Call
}

// CreateOrUpdateSecurityGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateSecurityGroupParams
//   - body network.CreateOrUpdateSecurityGroupJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateSecurityGroup(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateSecurityGroup_Call {
	return &MockClientInterface_CreateOrUpdateSecurityGroup_Call{Call: _e.mock.On("CreateOrUpdateSecurityGroup",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateSecurityGroup_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSecurityGroupParams, body network.CreateOrUpdateSecurityGroupJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateSecurityGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateSecurityGroupParams), args[5].(network.CreateOrUpdateSecurityGroupJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateSecurityGroup_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateSecurityGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateSecurityGroup_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, network.CreateOrUpdateSecurityGroupJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateSecurityGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateSecurityGroupWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateSecurityGroupWithBody(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSecurityGroupParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSecurityGroupWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, string, io.Reader, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateSecurityGroupWithBody'
type MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateSecurityGroupWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateSecurityGroupParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateSecurityGroupWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call {
	return &MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call{Call: _e.mock.On("CreateOrUpdateSecurityGroupWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSecurityGroupParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateSecurityGroupParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSecurityGroupParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateSecurityGroupWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateSubnet provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateSubnet(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSubnetParams, body network.CreateOrUpdateSubnetJSONRequestBody, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSubnet")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, network.CreateOrUpdateSubnetJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, network.CreateOrUpdateSubnetJSONRequestBody, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, network.CreateOrUpdateSubnetJSONRequestBody, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateSubnet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateSubnet'
type MockClientInterface_CreateOrUpdateSubnet_Call struct {
	*mock.Call
}

// CreateOrUpdateSubnet is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateSubnetParams
//   - body network.CreateOrUpdateSubnetJSONRequestBody
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateSubnet(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateSubnet_Call {
	return &MockClientInterface_CreateOrUpdateSubnet_Call{Call: _e.mock.On("CreateOrUpdateSubnet",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateSubnet_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSubnetParams, body network.CreateOrUpdateSubnetJSONRequestBody, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateSubnet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateSubnetParams), args[5].(network.CreateOrUpdateSubnetJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateSubnet_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateSubnet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateSubnet_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, network.CreateOrUpdateSubnetJSONRequestBody, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateSubnet_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateSubnetWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateSubnetWithBody(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSubnetParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSubnetWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, string, io.Reader, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, string, io.Reader, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateSubnetWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateSubnetWithBody'
type MockClientInterface_CreateOrUpdateSubnetWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateSubnetWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.CreateOrUpdateSubnetParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateSubnetWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateSubnetWithBody_Call {
	return &MockClientInterface_CreateOrUpdateSubnetWithBody_Call{Call: _e.mock.On("CreateOrUpdateSubnetWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateSubnetWithBody_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.CreateOrUpdateSubnetParams, contentType string, body io.Reader, reqEditors ...network.RequestEditorFn)) *MockClientInterface_CreateOrUpdateSubnetWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.CreateOrUpdateSubnetParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateSubnetWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateSubnetWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateSubnetWithBody_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.CreateOrUpdateSubnetParams, string, io.Reader, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateSubnetWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInternetGateway provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteInternetGateway(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteInternetGatewayParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInternetGateway")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteInternetGatewayParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteInternetGatewayParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteInternetGatewayParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteInternetGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInternetGateway'
type MockClientInterface_DeleteInternetGateway_Call struct {
	*mock.Call
}

// DeleteInternetGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteInternetGatewayParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteInternetGateway(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteInternetGateway_Call {
	return &MockClientInterface_DeleteInternetGateway_Call{Call: _e.mock.On("DeleteInternetGateway",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteInternetGateway_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteInternetGatewayParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_DeleteInternetGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteInternetGatewayParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteInternetGateway_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteInternetGateway_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteInternetGateway_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteInternetGatewayParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteInternetGateway_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetwork provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteNetwork(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteNetworkParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetwork")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNetworkParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNetworkParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNetworkParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetwork'
type MockClientInterface_DeleteNetwork_Call struct {
	*mock.Call
}

// DeleteNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteNetworkParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteNetwork(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteNetwork_Call {
	return &MockClientInterface_DeleteNetwork_Call{Call: _e.mock.On("DeleteNetwork",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteNetwork_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteNetworkParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_DeleteNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteNetworkParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteNetwork_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteNetwork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteNetwork_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNetworkParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNic provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteNic(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteNicParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNic")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNicParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNicParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNicParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteNic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNic'
type MockClientInterface_DeleteNic_Call struct {
	*mock.Call
}

// DeleteNic is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteNicParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteNic(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteNic_Call {
	return &MockClientInterface_DeleteNic_Call{Call: _e.mock.On("DeleteNic",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteNic_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteNicParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_DeleteNic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteNicParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteNic_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteNic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteNic_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteNicParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteNic_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePublicIp provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeletePublicIp(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeletePublicIpParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublicIp")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeletePublicIpParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeletePublicIpParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeletePublicIpParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeletePublicIp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePublicIp'
type MockClientInterface_DeletePublicIp_Call struct {
	*mock.Call
}

// DeletePublicIp is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeletePublicIpParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeletePublicIp(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeletePublicIp_Call {
	return &MockClientInterface_DeletePublicIp_Call{Call: _e.mock.On("DeletePublicIp",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeletePublicIp_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeletePublicIpParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_DeletePublicIp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeletePublicIpParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeletePublicIp_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeletePublicIp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeletePublicIp_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeletePublicIpParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeletePublicIp_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRouteTable provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteRouteTable(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteRouteTableParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRouteTable")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteRouteTableParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteRouteTableParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteRouteTableParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteRouteTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRouteTable'
type MockClientInterface_DeleteRouteTable_Call struct {
	*mock.Call
}

// DeleteRouteTable is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteRouteTableParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteRouteTable(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteRouteTable_Call {
	return &MockClientInterface_DeleteRouteTable_Call{Call: _e.mock.On("DeleteRouteTable",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteRouteTable_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteRouteTableParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_DeleteRouteTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteRouteTableParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteRouteTable_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteRouteTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteRouteTable_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteRouteTableParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteRouteTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecurityGroup provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteSecurityGroup(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteSecurityGroupParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecurityGroup")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSecurityGroupParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSecurityGroupParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSecurityGroupParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteSecurityGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecurityGroup'
type MockClientInterface_DeleteSecurityGroup_Call struct {
	*mock.Call
}

// DeleteSecurityGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteSecurityGroupParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteSecurityGroup(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteSecurityGroup_Call {
	return &MockClientInterface_DeleteSecurityGroup_Call{Call: _e.mock.On("DeleteSecurityGroup",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteSecurityGroup_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteSecurityGroupParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_DeleteSecurityGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteSecurityGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteSecurityGroup_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteSecurityGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteSecurityGroup_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSecurityGroupParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteSecurityGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubnet provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteSubnet(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteSubnetParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubnet")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSubnetParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSubnetParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSubnetParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteSubnet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubnet'
type MockClientInterface_DeleteSubnet_Call struct {
	*mock.Call
}

// DeleteSubnet is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - params *network.DeleteSubnetParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteSubnet(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteSubnet_Call {
	return &MockClientInterface_DeleteSubnet_Call{Call: _e.mock.On("DeleteSubnet",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteSubnet_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, params *network.DeleteSubnetParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_DeleteSubnet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), args[4].(*network.DeleteSubnetParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteSubnet_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteSubnet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteSubnet_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, *network.DeleteSubnetParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteSubnet_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternetGateway provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetInternetGateway(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInternetGateway")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetInternetGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternetGateway'
type MockClientInterface_GetInternetGateway_Call struct {
	*mock.Call
}

// GetInternetGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetInternetGateway(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetInternetGateway_Call {
	return &MockClientInterface_GetInternetGateway_Call{Call: _e.mock.On("GetInternetGateway",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetInternetGateway_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientInterface_GetInternetGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetInternetGateway_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetInternetGateway_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetInternetGateway_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetInternetGateway_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetwork provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetNetwork(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetwork")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetwork'
type MockClientInterface_GetNetwork_Call struct {
	*mock.Call
}

// GetNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetNetwork(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetNetwork_Call {
	return &MockClientInterface_GetNetwork_Call{Call: _e.mock.On("GetNetwork",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetNetwork_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientInterface_GetNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetNetwork_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetNetwork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetNetwork_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// GetNic provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetNic(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNic")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetNic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNic'
type MockClientInterface_GetNic_Call struct {
	*mock.Call
}

// GetNic is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetNic(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetNic_Call {
	return &MockClientInterface_GetNic_Call{Call: _e.mock.On("GetNic",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetNic_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientInterface_GetNic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetNic_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetNic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetNic_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetNic_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicIp provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetPublicIp(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicIp")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetPublicIp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicIp'
type MockClientInterface_GetPublicIp_Call struct {
	*mock.Call
}

// GetPublicIp is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetPublicIp(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetPublicIp_Call {
	return &MockClientInterface_GetPublicIp_Call{Call: _e.mock.On("GetPublicIp",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetPublicIp_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientInterface_GetPublicIp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetPublicIp_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetPublicIp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetPublicIp_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetPublicIp_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouteTable provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetRouteTable(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRouteTable")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetRouteTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteTable'
type MockClientInterface_GetRouteTable_Call struct {
	*mock.Call
}

// GetRouteTable is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetRouteTable(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetRouteTable_Call {
	return &MockClientInterface_GetRouteTable_Call{Call: _e.mock.On("GetRouteTable",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetRouteTable_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientInterface_GetRouteTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetRouteTable_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetRouteTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetRouteTable_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetRouteTable_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecurityGroup provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetSecurityGroup(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecurityGroup")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetSecurityGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecurityGroup'
type MockClientInterface_GetSecurityGroup_Call struct {
	*mock.Call
}

// GetSecurityGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetSecurityGroup(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetSecurityGroup_Call {
	return &MockClientInterface_GetSecurityGroup_Call{Call: _e.mock.On("GetSecurityGroup",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetSecurityGroup_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientInterface_GetSecurityGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetSecurityGroup_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetSecurityGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetSecurityGroup_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetSecurityGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetSku provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientInterface) GetSku(ctx context.Context, tenant network.Tenant, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSku")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.ResourceName, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSku'
type MockClientInterface_GetSku_Call struct {
	*mock.Call
}

// GetSku is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetSku(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetSku_Call {
	return &MockClientInterface_GetSku_Call{Call: _e.mock.On("GetSku",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetSku_Call) Run(run func(ctx context.Context, tenant network.Tenant, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientInterface_GetSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetSku_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetSku_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetSku_Call) RunAndReturn(run func(context.Context, network.Tenant, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetSku_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubnet provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetSubnet(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubnet")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetSubnet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubnet'
type MockClientInterface_GetSubnet_Call struct {
	*mock.Call
}

// GetSubnet is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - name network.ResourceName
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetSubnet(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetSubnet_Call {
	return &MockClientInterface_GetSubnet_Call{Call: _e.mock.On("GetSubnet",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetSubnet_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, name network.ResourceName, reqEditors ...network.RequestEditorFn)) *MockClientInterface_GetSubnet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(network.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetSubnet_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetSubnet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetSubnet_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, network.ResourceName, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetSubnet_Call {
	_c.Call.Return(run)
	return _c
}

// ListInternetGateways provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListInternetGateways(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListInternetGatewaysParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInternetGateways")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListInternetGatewaysParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListInternetGatewaysParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListInternetGatewaysParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListInternetGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInternetGateways'
type MockClientInterface_ListInternetGateways_Call struct {
	*mock.Call
}

// ListInternetGateways is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListInternetGatewaysParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListInternetGateways(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListInternetGateways_Call {
	return &MockClientInterface_ListInternetGateways_Call{Call: _e.mock.On("ListInternetGateways",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListInternetGateways_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListInternetGatewaysParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_ListInternetGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListInternetGatewaysParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListInternetGateways_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListInternetGateways_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListInternetGateways_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListInternetGatewaysParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListInternetGateways_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworks provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListNetworks(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListNetworksParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworks")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListNetworksParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListNetworksParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListNetworksParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListNetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworks'
type MockClientInterface_ListNetworks_Call struct {
	*mock.Call
}

// ListNetworks is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListNetworksParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListNetworks(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListNetworks_Call {
	return &MockClientInterface_ListNetworks_Call{Call: _e.mock.On("ListNetworks",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListNetworks_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListNetworksParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_ListNetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListNetworksParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListNetworks_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListNetworks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListNetworks_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListNetworksParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListNetworks_Call {
	_c.Call.Return(run)
	return _c
}

// ListNics provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListNics(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListNicsParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNics")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListNicsParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListNicsParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListNicsParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListNics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNics'
type MockClientInterface_ListNics_Call struct {
	*mock.Call
}

// ListNics is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListNicsParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListNics(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListNics_Call {
	return &MockClientInterface_ListNics_Call{Call: _e.mock.On("ListNics",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListNics_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListNicsParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_ListNics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListNicsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListNics_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListNics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListNics_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListNicsParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListNics_Call {
	_c.Call.Return(run)
	return _c
}

// ListPublicIps provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListPublicIps(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListPublicIpsParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPublicIps")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListPublicIpsParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListPublicIpsParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListPublicIpsParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListPublicIps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPublicIps'
type MockClientInterface_ListPublicIps_Call struct {
	*mock.Call
}

// ListPublicIps is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListPublicIpsParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListPublicIps(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListPublicIps_Call {
	return &MockClientInterface_ListPublicIps_Call{Call: _e.mock.On("ListPublicIps",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListPublicIps_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListPublicIpsParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_ListPublicIps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListPublicIpsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListPublicIps_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListPublicIps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListPublicIps_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListPublicIpsParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListPublicIps_Call {
	_c.Call.Return(run)
	return _c
}

// ListRouteTables provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListRouteTables(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListRouteTablesParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRouteTables")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListRouteTablesParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListRouteTablesParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListRouteTablesParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListRouteTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRouteTables'
type MockClientInterface_ListRouteTables_Call struct {
	*mock.Call
}

// ListRouteTables is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListRouteTablesParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListRouteTables(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListRouteTables_Call {
	return &MockClientInterface_ListRouteTables_Call{Call: _e.mock.On("ListRouteTables",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListRouteTables_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListRouteTablesParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_ListRouteTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListRouteTablesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListRouteTables_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListRouteTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListRouteTables_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListRouteTablesParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListRouteTables_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecurityGroups provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListSecurityGroups(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListSecurityGroupsParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityGroups")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListSecurityGroupsParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListSecurityGroupsParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListSecurityGroupsParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListSecurityGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecurityGroups'
type MockClientInterface_ListSecurityGroups_Call struct {
	*mock.Call
}

// ListSecurityGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListSecurityGroupsParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListSecurityGroups(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListSecurityGroups_Call {
	return &MockClientInterface_ListSecurityGroups_Call{Call: _e.mock.On("ListSecurityGroups",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListSecurityGroups_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListSecurityGroupsParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_ListSecurityGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListSecurityGroupsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListSecurityGroups_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListSecurityGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListSecurityGroups_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListSecurityGroupsParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListSecurityGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListSkus provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientInterface) ListSkus(ctx context.Context, tenant network.Tenant, params *network.ListSkusParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkus")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, *network.ListSkusParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, *network.ListSkusParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, *network.ListSkusParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListSkus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkus'
type MockClientInterface_ListSkus_Call struct {
	*mock.Call
}

// ListSkus is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - params *network.ListSkusParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListSkus(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListSkus_Call {
	return &MockClientInterface_ListSkus_Call{Call: _e.mock.On("ListSkus",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListSkus_Call) Run(run func(ctx context.Context, tenant network.Tenant, params *network.ListSkusParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_ListSkus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(*network.ListSkusParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListSkus_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListSkus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListSkus_Call) RunAndReturn(run func(context.Context, network.Tenant, *network.ListSkusParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListSkus_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubnets provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListSubnets(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListSubnetsParams, reqEditors ...network.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubnets")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListSubnetsParams, ...network.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.Tenant, network.Workspace, *network.ListSubnetsParams, ...network.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.Tenant, network.Workspace, *network.ListSubnetsParams, ...network.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubnets'
type MockClientInterface_ListSubnets_Call struct {
	*mock.Call
}

// ListSubnets is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant network.Tenant
//   - workspace network.Workspace
//   - params *network.ListSubnetsParams
//   - reqEditors ...network.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListSubnets(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListSubnets_Call {
	return &MockClientInterface_ListSubnets_Call{Call: _e.mock.On("ListSubnets",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListSubnets_Call) Run(run func(ctx context.Context, tenant network.Tenant, workspace network.Workspace, params *network.ListSubnetsParams, reqEditors ...network.RequestEditorFn)) *MockClientInterface_ListSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(network.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(network.Tenant), args[2].(network.Workspace), args[3].(*network.ListSubnetsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListSubnets_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListSubnets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListSubnets_Call) RunAndReturn(run func(context.Context, network.Tenant, network.Workspace, *network.ListSubnetsParams, ...network.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
