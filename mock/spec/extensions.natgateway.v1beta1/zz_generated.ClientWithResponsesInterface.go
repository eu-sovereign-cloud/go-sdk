// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocknatgateway

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	natgateway "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.natgateway.v1beta1"

	schema "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/schema"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, contentType string, body io.Reader, reqEditors ...natgateway.RequestEditorFn) (*natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse")
	}

	var r0 *natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, string, io.Reader, ...natgateway.RequestEditorFn) (*natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, string, io.Reader, ...natgateway.RequestEditorFn) *natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, string, io.Reader, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, contentType string, body io.Reader, reqEditors ...natgateway.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*natgateway.CreateOrUpdateInternetNatGatewayInstanceParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call) Return(_a0 *natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, string, io.Reader, ...natgateway.RequestEditorFn) (*natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateInternetNatGatewayInstanceWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateInternetNatGatewayInstanceWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, body natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, reqEditors ...natgateway.RequestEditorFn) (*natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInternetNatGatewayInstanceWithResponse")
	}

	var r0 *natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, ...natgateway.RequestEditorFn) (*natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, ...natgateway.RequestEditorFn) *natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInternetNatGatewayInstanceWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateInternetNatGatewayInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams
//   - body natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateInternetNatGatewayInstanceWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call{Call: _e.mock.On("CreateOrUpdateInternetNatGatewayInstanceWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, body natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, reqEditors ...natgateway.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*natgateway.CreateOrUpdateInternetNatGatewayInstanceParams), args[5].(natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call) Return(_a0 *natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, ...natgateway.RequestEditorFn) (*natgateway.CreateOrUpdateInternetNatGatewayInstanceResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateInternetNatGatewayInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInternetNatGatewayInstanceWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteInternetNatGatewayInstanceWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.DeleteInternetNatGatewayInstanceParams, reqEditors ...natgateway.RequestEditorFn) (*natgateway.DeleteInternetNatGatewayInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInternetNatGatewayInstanceWithResponse")
	}

	var r0 *natgateway.DeleteInternetNatGatewayInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.DeleteInternetNatGatewayInstanceParams, ...natgateway.RequestEditorFn) (*natgateway.DeleteInternetNatGatewayInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.DeleteInternetNatGatewayInstanceParams, ...natgateway.RequestEditorFn) *natgateway.DeleteInternetNatGatewayInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natgateway.DeleteInternetNatGatewayInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.DeleteInternetNatGatewayInstanceParams, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInternetNatGatewayInstanceWithResponse'
type MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call struct {
	*mock.Call
}

// DeleteInternetNatGatewayInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *natgateway.DeleteInternetNatGatewayInstanceParams
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteInternetNatGatewayInstanceWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call{Call: _e.mock.On("DeleteInternetNatGatewayInstanceWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.DeleteInternetNatGatewayInstanceParams, reqEditors ...natgateway.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*natgateway.DeleteInternetNatGatewayInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call) Return(_a0 *natgateway.DeleteInternetNatGatewayInstanceResponse, _a1 error) *MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.DeleteInternetNatGatewayInstanceParams, ...natgateway.RequestEditorFn) (*natgateway.DeleteInternetNatGatewayInstanceResponse, error)) *MockClientWithResponsesInterface_DeleteInternetNatGatewayInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternetNatGatewayInstanceWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetInternetNatGatewayInstanceWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, reqEditors ...natgateway.RequestEditorFn) (*natgateway.GetInternetNatGatewayInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInternetNatGatewayInstanceWithResponse")
	}

	var r0 *natgateway.GetInternetNatGatewayInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...natgateway.RequestEditorFn) (*natgateway.GetInternetNatGatewayInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...natgateway.RequestEditorFn) *natgateway.GetInternetNatGatewayInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natgateway.GetInternetNatGatewayInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternetNatGatewayInstanceWithResponse'
type MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call struct {
	*mock.Call
}

// GetInternetNatGatewayInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetInternetNatGatewayInstanceWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call {
	return &MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call{Call: _e.mock.On("GetInternetNatGatewayInstanceWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, reqEditors ...natgateway.RequestEditorFn)) *MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call) Return(_a0 *natgateway.GetInternetNatGatewayInstanceResponse, _a1 error) *MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...natgateway.RequestEditorFn) (*natgateway.GetInternetNatGatewayInstanceResponse, error)) *MockClientWithResponsesInterface_GetInternetNatGatewayInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListInternetNatGatewayInstancesWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListInternetNatGatewayInstancesWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params *natgateway.ListInternetNatGatewayInstancesParams, reqEditors ...natgateway.RequestEditorFn) (*natgateway.ListInternetNatGatewayInstancesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInternetNatGatewayInstancesWithResponse")
	}

	var r0 *natgateway.ListInternetNatGatewayInstancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *natgateway.ListInternetNatGatewayInstancesParams, ...natgateway.RequestEditorFn) (*natgateway.ListInternetNatGatewayInstancesResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *natgateway.ListInternetNatGatewayInstancesParams, ...natgateway.RequestEditorFn) *natgateway.ListInternetNatGatewayInstancesResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natgateway.ListInternetNatGatewayInstancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *natgateway.ListInternetNatGatewayInstancesParams, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInternetNatGatewayInstancesWithResponse'
type MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call struct {
	*mock.Call
}

// ListInternetNatGatewayInstancesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - params *natgateway.ListInternetNatGatewayInstancesParams
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListInternetNatGatewayInstancesWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call {
	return &MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call{Call: _e.mock.On("ListInternetNatGatewayInstancesWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params *natgateway.ListInternetNatGatewayInstancesParams, reqEditors ...natgateway.RequestEditorFn)) *MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(*natgateway.ListInternetNatGatewayInstancesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call) Return(_a0 *natgateway.ListInternetNatGatewayInstancesResponse, _a1 error) *MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *natgateway.ListInternetNatGatewayInstancesParams, ...natgateway.RequestEditorFn) (*natgateway.ListInternetNatGatewayInstancesResponse, error)) *MockClientWithResponsesInterface_ListInternetNatGatewayInstancesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
