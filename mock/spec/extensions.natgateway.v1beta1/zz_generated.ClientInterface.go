// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocknatgateway

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	natgateway "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.natgateway.v1beta1"

	schema "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/schema"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateInternetNatGatewayInstance provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateInternetNatGatewayInstance(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, body natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, reqEditors ...natgateway.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInternetNatGatewayInstance")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, ...natgateway.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, ...natgateway.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInternetNatGatewayInstance'
type MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call struct {
	*mock.Call
}

// CreateOrUpdateInternetNatGatewayInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams
//   - body natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateInternetNatGatewayInstance(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call {
	return &MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call{Call: _e.mock.On("CreateOrUpdateInternetNatGatewayInstance",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, body natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, reqEditors ...natgateway.RequestEditorFn)) *MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*natgateway.CreateOrUpdateInternetNatGatewayInstanceParams), args[5].(natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, natgateway.CreateOrUpdateInternetNatGatewayInstanceJSONRequestBody, ...natgateway.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateInternetNatGatewayInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateInternetNatGatewayInstanceWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateInternetNatGatewayInstanceWithBody(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, contentType string, body io.Reader, reqEditors ...natgateway.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInternetNatGatewayInstanceWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, string, io.Reader, ...natgateway.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, string, io.Reader, ...natgateway.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, string, io.Reader, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInternetNatGatewayInstanceWithBody'
type MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateInternetNatGatewayInstanceWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateInternetNatGatewayInstanceWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call {
	return &MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call{Call: _e.mock.On("CreateOrUpdateInternetNatGatewayInstanceWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, contentType string, body io.Reader, reqEditors ...natgateway.RequestEditorFn)) *MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*natgateway.CreateOrUpdateInternetNatGatewayInstanceParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.CreateOrUpdateInternetNatGatewayInstanceParams, string, io.Reader, ...natgateway.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateInternetNatGatewayInstanceWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInternetNatGatewayInstance provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteInternetNatGatewayInstance(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.DeleteInternetNatGatewayInstanceParams, reqEditors ...natgateway.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInternetNatGatewayInstance")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.DeleteInternetNatGatewayInstanceParams, ...natgateway.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.DeleteInternetNatGatewayInstanceParams, ...natgateway.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.DeleteInternetNatGatewayInstanceParams, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteInternetNatGatewayInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInternetNatGatewayInstance'
type MockClientInterface_DeleteInternetNatGatewayInstance_Call struct {
	*mock.Call
}

// DeleteInternetNatGatewayInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *natgateway.DeleteInternetNatGatewayInstanceParams
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteInternetNatGatewayInstance(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteInternetNatGatewayInstance_Call {
	return &MockClientInterface_DeleteInternetNatGatewayInstance_Call{Call: _e.mock.On("DeleteInternetNatGatewayInstance",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteInternetNatGatewayInstance_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *natgateway.DeleteInternetNatGatewayInstanceParams, reqEditors ...natgateway.RequestEditorFn)) *MockClientInterface_DeleteInternetNatGatewayInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*natgateway.DeleteInternetNatGatewayInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteInternetNatGatewayInstance_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteInternetNatGatewayInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteInternetNatGatewayInstance_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *natgateway.DeleteInternetNatGatewayInstanceParams, ...natgateway.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteInternetNatGatewayInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternetNatGatewayInstance provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetInternetNatGatewayInstance(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, reqEditors ...natgateway.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInternetNatGatewayInstance")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...natgateway.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...natgateway.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetInternetNatGatewayInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternetNatGatewayInstance'
type MockClientInterface_GetInternetNatGatewayInstance_Call struct {
	*mock.Call
}

// GetInternetNatGatewayInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetInternetNatGatewayInstance(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetInternetNatGatewayInstance_Call {
	return &MockClientInterface_GetInternetNatGatewayInstance_Call{Call: _e.mock.On("GetInternetNatGatewayInstance",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetInternetNatGatewayInstance_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, reqEditors ...natgateway.RequestEditorFn)) *MockClientInterface_GetInternetNatGatewayInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetInternetNatGatewayInstance_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetInternetNatGatewayInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetInternetNatGatewayInstance_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...natgateway.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetInternetNatGatewayInstance_Call {
	_c.Call.Return(run)
	return _c
}

// ListInternetNatGatewayInstances provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListInternetNatGatewayInstances(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params *natgateway.ListInternetNatGatewayInstancesParams, reqEditors ...natgateway.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInternetNatGatewayInstances")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *natgateway.ListInternetNatGatewayInstancesParams, ...natgateway.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *natgateway.ListInternetNatGatewayInstancesParams, ...natgateway.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *natgateway.ListInternetNatGatewayInstancesParams, ...natgateway.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListInternetNatGatewayInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInternetNatGatewayInstances'
type MockClientInterface_ListInternetNatGatewayInstances_Call struct {
	*mock.Call
}

// ListInternetNatGatewayInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - params *natgateway.ListInternetNatGatewayInstancesParams
//   - reqEditors ...natgateway.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListInternetNatGatewayInstances(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListInternetNatGatewayInstances_Call {
	return &MockClientInterface_ListInternetNatGatewayInstances_Call{Call: _e.mock.On("ListInternetNatGatewayInstances",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListInternetNatGatewayInstances_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params *natgateway.ListInternetNatGatewayInstancesParams, reqEditors ...natgateway.RequestEditorFn)) *MockClientInterface_ListInternetNatGatewayInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]natgateway.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(natgateway.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(*natgateway.ListInternetNatGatewayInstancesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListInternetNatGatewayInstances_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListInternetNatGatewayInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListInternetNatGatewayInstances_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *natgateway.ListInternetNatGatewayInstancesParams, ...natgateway.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListInternetNatGatewayInstances_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
