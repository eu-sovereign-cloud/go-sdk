// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockcompute

import (
	context "context"

	compute "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/foundation.compute.v1"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateInstance provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateInstance(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.CreateOrUpdateInstanceParams, body compute.CreateOrUpdateInstanceJSONRequestBody, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInstance")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, compute.CreateOrUpdateInstanceJSONRequestBody, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, compute.CreateOrUpdateInstanceJSONRequestBody, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, compute.CreateOrUpdateInstanceJSONRequestBody, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInstance'
type MockClientInterface_CreateOrUpdateInstance_Call struct {
	*mock.Call
}

// CreateOrUpdateInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params *compute.CreateOrUpdateInstanceParams
//   - body compute.CreateOrUpdateInstanceJSONRequestBody
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateInstance(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateInstance_Call {
	return &MockClientInterface_CreateOrUpdateInstance_Call{Call: _e.mock.On("CreateOrUpdateInstance",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateInstance_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.CreateOrUpdateInstanceParams, body compute.CreateOrUpdateInstanceJSONRequestBody, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_CreateOrUpdateInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(compute.WorkspacePathParam), args[3].(compute.ResourcePathParam), args[4].(*compute.CreateOrUpdateInstanceParams), args[5].(compute.CreateOrUpdateInstanceJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInstance_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInstance_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, compute.CreateOrUpdateInstanceJSONRequestBody, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateInstanceWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateInstanceWithBody(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.CreateOrUpdateInstanceParams, contentType string, body io.Reader, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInstanceWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, string, io.Reader, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, string, io.Reader, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, string, io.Reader, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateInstanceWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInstanceWithBody'
type MockClientInterface_CreateOrUpdateInstanceWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateInstanceWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params *compute.CreateOrUpdateInstanceParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateInstanceWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateInstanceWithBody_Call {
	return &MockClientInterface_CreateOrUpdateInstanceWithBody_Call{Call: _e.mock.On("CreateOrUpdateInstanceWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateInstanceWithBody_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.CreateOrUpdateInstanceParams, contentType string, body io.Reader, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_CreateOrUpdateInstanceWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(compute.WorkspacePathParam), args[3].(compute.ResourcePathParam), args[4].(*compute.CreateOrUpdateInstanceParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInstanceWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateInstanceWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateInstanceWithBody_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, string, io.Reader, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateInstanceWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstance provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteInstance(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.DeleteInstanceParams, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstance")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.DeleteInstanceParams, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.DeleteInstanceParams, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.DeleteInstanceParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstance'
type MockClientInterface_DeleteInstance_Call struct {
	*mock.Call
}

// DeleteInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params *compute.DeleteInstanceParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteInstance(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteInstance_Call {
	return &MockClientInterface_DeleteInstance_Call{Call: _e.mock.On("DeleteInstance",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteInstance_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.DeleteInstanceParams, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_DeleteInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(compute.WorkspacePathParam), args[3].(compute.ResourcePathParam), args[4].(*compute.DeleteInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteInstance_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteInstance_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.DeleteInstanceParams, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstance provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetInstance(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstance'
type MockClientInterface_GetInstance_Call struct {
	*mock.Call
}

// GetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetInstance(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetInstance_Call {
	return &MockClientInterface_GetInstance_Call{Call: _e.mock.On("GetInstance",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetInstance_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_GetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(compute.WorkspacePathParam), args[3].(compute.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetInstance_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetInstance_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetSku provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientInterface) GetSku(ctx context.Context, tenant compute.TenantPathParam, name compute.ResourcePathParam, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSku")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.ResourcePathParam, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.ResourcePathParam, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, compute.ResourcePathParam, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSku'
type MockClientInterface_GetSku_Call struct {
	*mock.Call
}

// GetSku is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - name compute.ResourcePathParam
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetSku(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetSku_Call {
	return &MockClientInterface_GetSku_Call{Call: _e.mock.On("GetSku",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetSku_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, name compute.ResourcePathParam, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_GetSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(compute.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetSku_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetSku_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetSku_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, compute.ResourcePathParam, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetSku_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstances provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListInstances(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, params *compute.ListInstancesParams, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstances")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, *compute.ListInstancesParams, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, *compute.ListInstancesParams, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, *compute.ListInstancesParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstances'
type MockClientInterface_ListInstances_Call struct {
	*mock.Call
}

// ListInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - params *compute.ListInstancesParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListInstances(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListInstances_Call {
	return &MockClientInterface_ListInstances_Call{Call: _e.mock.On("ListInstances",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListInstances_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, params *compute.ListInstancesParams, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_ListInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(compute.WorkspacePathParam), args[3].(*compute.ListInstancesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListInstances_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListInstances_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, *compute.ListInstancesParams, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListSkus provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientInterface) ListSkus(ctx context.Context, tenant compute.TenantPathParam, params *compute.ListSkusParams, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkus")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, *compute.ListSkusParams, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, *compute.ListSkusParams, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, *compute.ListSkusParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListSkus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkus'
type MockClientInterface_ListSkus_Call struct {
	*mock.Call
}

// ListSkus is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - params *compute.ListSkusParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListSkus(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListSkus_Call {
	return &MockClientInterface_ListSkus_Call{Call: _e.mock.On("ListSkus",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListSkus_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, params *compute.ListSkusParams, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_ListSkus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(*compute.ListSkusParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListSkus_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListSkus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListSkus_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, *compute.ListSkusParams, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListSkus_Call {
	_c.Call.Return(run)
	return _c
}

// RestartInstance provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) RestartInstance(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.RestartInstanceParams, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestartInstance")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.RestartInstanceParams, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.RestartInstanceParams, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.RestartInstanceParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_RestartInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartInstance'
type MockClientInterface_RestartInstance_Call struct {
	*mock.Call
}

// RestartInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params *compute.RestartInstanceParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) RestartInstance(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_RestartInstance_Call {
	return &MockClientInterface_RestartInstance_Call{Call: _e.mock.On("RestartInstance",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_RestartInstance_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.RestartInstanceParams, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_RestartInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(compute.WorkspacePathParam), args[3].(compute.ResourcePathParam), args[4].(*compute.RestartInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_RestartInstance_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_RestartInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_RestartInstance_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.RestartInstanceParams, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_RestartInstance_Call {
	_c.Call.Return(run)
	return _c
}

// StartInstance provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) StartInstance(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.StartInstanceParams, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartInstance")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.StartInstanceParams, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.StartInstanceParams, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.StartInstanceParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_StartInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartInstance'
type MockClientInterface_StartInstance_Call struct {
	*mock.Call
}

// StartInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params *compute.StartInstanceParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) StartInstance(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_StartInstance_Call {
	return &MockClientInterface_StartInstance_Call{Call: _e.mock.On("StartInstance",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_StartInstance_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.StartInstanceParams, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_StartInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(compute.WorkspacePathParam), args[3].(compute.ResourcePathParam), args[4].(*compute.StartInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_StartInstance_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_StartInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_StartInstance_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.StartInstanceParams, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_StartInstance_Call {
	_c.Call.Return(run)
	return _c
}

// StopInstance provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) StopInstance(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.StopInstanceParams, reqEditors ...compute.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopInstance")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.StopInstanceParams, ...compute.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.StopInstanceParams, ...compute.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.StopInstanceParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_StopInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopInstance'
type MockClientInterface_StopInstance_Call struct {
	*mock.Call
}

// StopInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params *compute.StopInstanceParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientInterface_Expecter) StopInstance(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_StopInstance_Call {
	return &MockClientInterface_StopInstance_Call{Call: _e.mock.On("StopInstance",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_StopInstance_Call) Run(run func(ctx context.Context, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params *compute.StopInstanceParams, reqEditors ...compute.RequestEditorFn)) *MockClientInterface_StopInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(compute.TenantPathParam), args[2].(compute.WorkspacePathParam), args[3].(compute.ResourcePathParam), args[4].(*compute.StopInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_StopInstance_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_StopInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_StopInstance_Call) RunAndReturn(run func(context.Context, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, *compute.StopInstanceParams, ...compute.RequestEditorFn) (*http.Response, error)) *MockClientInterface_StopInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
