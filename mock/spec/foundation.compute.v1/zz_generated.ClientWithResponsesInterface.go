// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockcompute

import (
	context "context"

	compute "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/foundation.compute.v1"

	io "io"

	mock "github.com/stretchr/testify/mock"

	schema "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/schema"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateInstanceWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateInstanceWithBodyWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.CreateOrUpdateInstanceParams, contentType string, body io.Reader, reqEditors ...compute.RequestEditorFn) (*compute.CreateOrUpdateInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInstanceWithBodyWithResponse")
	}

	var r0 *compute.CreateOrUpdateInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, string, io.Reader, ...compute.RequestEditorFn) (*compute.CreateOrUpdateInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, string, io.Reader, ...compute.RequestEditorFn) *compute.CreateOrUpdateInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CreateOrUpdateInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, string, io.Reader, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInstanceWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateInstanceWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *compute.CreateOrUpdateInstanceParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateInstanceWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateInstanceWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.CreateOrUpdateInstanceParams, contentType string, body io.Reader, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*compute.CreateOrUpdateInstanceParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call) Return(_a0 *compute.CreateOrUpdateInstanceResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, string, io.Reader, ...compute.RequestEditorFn) (*compute.CreateOrUpdateInstanceResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateInstanceWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateInstanceWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.CreateOrUpdateInstanceParams, body compute.CreateOrUpdateInstanceJSONRequestBody, reqEditors ...compute.RequestEditorFn) (*compute.CreateOrUpdateInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateInstanceWithResponse")
	}

	var r0 *compute.CreateOrUpdateInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, compute.CreateOrUpdateInstanceJSONRequestBody, ...compute.RequestEditorFn) (*compute.CreateOrUpdateInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, compute.CreateOrUpdateInstanceJSONRequestBody, ...compute.RequestEditorFn) *compute.CreateOrUpdateInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CreateOrUpdateInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, compute.CreateOrUpdateInstanceJSONRequestBody, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInstanceWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *compute.CreateOrUpdateInstanceParams
//   - body compute.CreateOrUpdateInstanceJSONRequestBody
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateInstanceWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call{Call: _e.mock.On("CreateOrUpdateInstanceWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.CreateOrUpdateInstanceParams, body compute.CreateOrUpdateInstanceJSONRequestBody, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*compute.CreateOrUpdateInstanceParams), args[5].(compute.CreateOrUpdateInstanceJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call) Return(_a0 *compute.CreateOrUpdateInstanceResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.CreateOrUpdateInstanceParams, compute.CreateOrUpdateInstanceJSONRequestBody, ...compute.RequestEditorFn) (*compute.CreateOrUpdateInstanceResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstanceWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteInstanceWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.DeleteInstanceParams, reqEditors ...compute.RequestEditorFn) (*compute.DeleteInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceWithResponse")
	}

	var r0 *compute.DeleteInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.DeleteInstanceParams, ...compute.RequestEditorFn) (*compute.DeleteInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.DeleteInstanceParams, ...compute.RequestEditorFn) *compute.DeleteInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.DeleteInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.DeleteInstanceParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstanceWithResponse'
type MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call struct {
	*mock.Call
}

// DeleteInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *compute.DeleteInstanceParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteInstanceWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call{Call: _e.mock.On("DeleteInstanceWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.DeleteInstanceParams, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*compute.DeleteInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call) Return(_a0 *compute.DeleteInstanceResponse, _a1 error) *MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.DeleteInstanceParams, ...compute.RequestEditorFn) (*compute.DeleteInstanceResponse, error)) *MockClientWithResponsesInterface_DeleteInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstanceWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetInstanceWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, reqEditors ...compute.RequestEditorFn) (*compute.GetInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceWithResponse")
	}

	var r0 *compute.GetInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...compute.RequestEditorFn) (*compute.GetInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...compute.RequestEditorFn) *compute.GetInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GetInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceWithResponse'
type MockClientWithResponsesInterface_GetInstanceWithResponse_Call struct {
	*mock.Call
}

// GetInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetInstanceWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetInstanceWithResponse_Call {
	return &MockClientWithResponsesInterface_GetInstanceWithResponse_Call{Call: _e.mock.On("GetInstanceWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetInstanceWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_GetInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetInstanceWithResponse_Call) Return(_a0 *compute.GetInstanceResponse, _a1 error) *MockClientWithResponsesInterface_GetInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetInstanceWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...compute.RequestEditorFn) (*compute.GetInstanceResponse, error)) *MockClientWithResponsesInterface_GetInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetSkuWithResponse provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetSkuWithResponse(ctx context.Context, tenant schema.TenantPathParam, name schema.ResourcePathParam, reqEditors ...compute.RequestEditorFn) (*compute.GetSkuResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSkuWithResponse")
	}

	var r0 *compute.GetSkuResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.ResourcePathParam, ...compute.RequestEditorFn) (*compute.GetSkuResponse, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.ResourcePathParam, ...compute.RequestEditorFn) *compute.GetSkuResponse); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GetSkuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.ResourcePathParam, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetSkuWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSkuWithResponse'
type MockClientWithResponsesInterface_GetSkuWithResponse_Call struct {
	*mock.Call
}

// GetSkuWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - name schema.ResourcePathParam
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetSkuWithResponse(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	return &MockClientWithResponsesInterface_GetSkuWithResponse_Call{Call: _e.mock.On("GetSkuWithResponse",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetSkuWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, name schema.ResourcePathParam, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSkuWithResponse_Call) Return(_a0 *compute.GetSkuResponse, _a1 error) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSkuWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.ResourcePathParam, ...compute.RequestEditorFn) (*compute.GetSkuResponse, error)) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstancesWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListInstancesWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params *compute.ListInstancesParams, reqEditors ...compute.RequestEditorFn) (*compute.ListInstancesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstancesWithResponse")
	}

	var r0 *compute.ListInstancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *compute.ListInstancesParams, ...compute.RequestEditorFn) (*compute.ListInstancesResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *compute.ListInstancesParams, ...compute.RequestEditorFn) *compute.ListInstancesResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ListInstancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *compute.ListInstancesParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListInstancesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstancesWithResponse'
type MockClientWithResponsesInterface_ListInstancesWithResponse_Call struct {
	*mock.Call
}

// ListInstancesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - params *compute.ListInstancesParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListInstancesWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListInstancesWithResponse_Call {
	return &MockClientWithResponsesInterface_ListInstancesWithResponse_Call{Call: _e.mock.On("ListInstancesWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListInstancesWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params *compute.ListInstancesParams, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_ListInstancesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(*compute.ListInstancesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListInstancesWithResponse_Call) Return(_a0 *compute.ListInstancesResponse, _a1 error) *MockClientWithResponsesInterface_ListInstancesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListInstancesWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *compute.ListInstancesParams, ...compute.RequestEditorFn) (*compute.ListInstancesResponse, error)) *MockClientWithResponsesInterface_ListInstancesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListSkusWithResponse provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListSkusWithResponse(ctx context.Context, tenant schema.TenantPathParam, params *compute.ListSkusParams, reqEditors ...compute.RequestEditorFn) (*compute.ListSkusResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkusWithResponse")
	}

	var r0 *compute.ListSkusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, *compute.ListSkusParams, ...compute.RequestEditorFn) (*compute.ListSkusResponse, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, *compute.ListSkusParams, ...compute.RequestEditorFn) *compute.ListSkusResponse); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ListSkusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, *compute.ListSkusParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListSkusWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkusWithResponse'
type MockClientWithResponsesInterface_ListSkusWithResponse_Call struct {
	*mock.Call
}

// ListSkusWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - params *compute.ListSkusParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListSkusWithResponse(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	return &MockClientWithResponsesInterface_ListSkusWithResponse_Call{Call: _e.mock.On("ListSkusWithResponse",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListSkusWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, params *compute.ListSkusParams, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(*compute.ListSkusParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSkusWithResponse_Call) Return(_a0 *compute.ListSkusResponse, _a1 error) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSkusWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, *compute.ListSkusParams, ...compute.RequestEditorFn) (*compute.ListSkusResponse, error)) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RestartInstanceWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) RestartInstanceWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.RestartInstanceParams, reqEditors ...compute.RequestEditorFn) (*compute.RestartInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestartInstanceWithResponse")
	}

	var r0 *compute.RestartInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.RestartInstanceParams, ...compute.RequestEditorFn) (*compute.RestartInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.RestartInstanceParams, ...compute.RequestEditorFn) *compute.RestartInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.RestartInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.RestartInstanceParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_RestartInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartInstanceWithResponse'
type MockClientWithResponsesInterface_RestartInstanceWithResponse_Call struct {
	*mock.Call
}

// RestartInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *compute.RestartInstanceParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) RestartInstanceWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_RestartInstanceWithResponse_Call {
	return &MockClientWithResponsesInterface_RestartInstanceWithResponse_Call{Call: _e.mock.On("RestartInstanceWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_RestartInstanceWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.RestartInstanceParams, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_RestartInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*compute.RestartInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_RestartInstanceWithResponse_Call) Return(_a0 *compute.RestartInstanceResponse, _a1 error) *MockClientWithResponsesInterface_RestartInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_RestartInstanceWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.RestartInstanceParams, ...compute.RequestEditorFn) (*compute.RestartInstanceResponse, error)) *MockClientWithResponsesInterface_RestartInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// StartInstanceWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) StartInstanceWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.StartInstanceParams, reqEditors ...compute.RequestEditorFn) (*compute.StartInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartInstanceWithResponse")
	}

	var r0 *compute.StartInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.StartInstanceParams, ...compute.RequestEditorFn) (*compute.StartInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.StartInstanceParams, ...compute.RequestEditorFn) *compute.StartInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.StartInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.StartInstanceParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_StartInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartInstanceWithResponse'
type MockClientWithResponsesInterface_StartInstanceWithResponse_Call struct {
	*mock.Call
}

// StartInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *compute.StartInstanceParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) StartInstanceWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_StartInstanceWithResponse_Call {
	return &MockClientWithResponsesInterface_StartInstanceWithResponse_Call{Call: _e.mock.On("StartInstanceWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_StartInstanceWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.StartInstanceParams, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_StartInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*compute.StartInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_StartInstanceWithResponse_Call) Return(_a0 *compute.StartInstanceResponse, _a1 error) *MockClientWithResponsesInterface_StartInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_StartInstanceWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.StartInstanceParams, ...compute.RequestEditorFn) (*compute.StartInstanceResponse, error)) *MockClientWithResponsesInterface_StartInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// StopInstanceWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) StopInstanceWithResponse(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.StopInstanceParams, reqEditors ...compute.RequestEditorFn) (*compute.StopInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopInstanceWithResponse")
	}

	var r0 *compute.StopInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.StopInstanceParams, ...compute.RequestEditorFn) (*compute.StopInstanceResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.StopInstanceParams, ...compute.RequestEditorFn) *compute.StopInstanceResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.StopInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.StopInstanceParams, ...compute.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_StopInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopInstanceWithResponse'
type MockClientWithResponsesInterface_StopInstanceWithResponse_Call struct {
	*mock.Call
}

// StopInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *compute.StopInstanceParams
//   - reqEditors ...compute.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) StopInstanceWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_StopInstanceWithResponse_Call {
	return &MockClientWithResponsesInterface_StopInstanceWithResponse_Call{Call: _e.mock.On("StopInstanceWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_StopInstanceWithResponse_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *compute.StopInstanceParams, reqEditors ...compute.RequestEditorFn)) *MockClientWithResponsesInterface_StopInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]compute.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(compute.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*compute.StopInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_StopInstanceWithResponse_Call) Return(_a0 *compute.StopInstanceResponse, _a1 error) *MockClientWithResponsesInterface_StopInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_StopInstanceWithResponse_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *compute.StopInstanceParams, ...compute.RequestEditorFn) (*compute.StopInstanceResponse, error)) *MockClientWithResponsesInterface_StopInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
