// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockcompute

import (
	http "net/http"

	compute "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/foundation.compute.v1"

	mock "github.com/stretchr/testify/mock"
)

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateInstance provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) CreateOrUpdateInstance(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.CreateOrUpdateInstanceParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_CreateOrUpdateInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateInstance'
type MockServerInterface_CreateOrUpdateInstance_Call struct {
	*mock.Call
}

// CreateOrUpdateInstance is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params compute.CreateOrUpdateInstanceParams
func (_e *MockServerInterface_Expecter) CreateOrUpdateInstance(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_CreateOrUpdateInstance_Call {
	return &MockServerInterface_CreateOrUpdateInstance_Call{Call: _e.mock.On("CreateOrUpdateInstance", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_CreateOrUpdateInstance_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.CreateOrUpdateInstanceParams)) *MockServerInterface_CreateOrUpdateInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(compute.TenantPathParam), args[3].(compute.WorkspacePathParam), args[4].(compute.ResourcePathParam), args[5].(compute.CreateOrUpdateInstanceParams))
	})
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateInstance_Call) Return() *MockServerInterface_CreateOrUpdateInstance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateInstance_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, compute.CreateOrUpdateInstanceParams)) *MockServerInterface_CreateOrUpdateInstance_Call {
	_c.Run(run)
	return _c
}

// DeleteInstance provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) DeleteInstance(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.DeleteInstanceParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_DeleteInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstance'
type MockServerInterface_DeleteInstance_Call struct {
	*mock.Call
}

// DeleteInstance is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params compute.DeleteInstanceParams
func (_e *MockServerInterface_Expecter) DeleteInstance(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_DeleteInstance_Call {
	return &MockServerInterface_DeleteInstance_Call{Call: _e.mock.On("DeleteInstance", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_DeleteInstance_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.DeleteInstanceParams)) *MockServerInterface_DeleteInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(compute.TenantPathParam), args[3].(compute.WorkspacePathParam), args[4].(compute.ResourcePathParam), args[5].(compute.DeleteInstanceParams))
	})
	return _c
}

func (_c *MockServerInterface_DeleteInstance_Call) Return() *MockServerInterface_DeleteInstance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_DeleteInstance_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, compute.DeleteInstanceParams)) *MockServerInterface_DeleteInstance_Call {
	_c.Run(run)
	return _c
}

// GetInstance provides a mock function with given fields: w, r, tenant, workspace, name
func (_m *MockServerInterface) GetInstance(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam) {
	_m.Called(w, r, tenant, workspace, name)
}

// MockServerInterface_GetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstance'
type MockServerInterface_GetInstance_Call struct {
	*mock.Call
}

// GetInstance is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
func (_e *MockServerInterface_Expecter) GetInstance(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}) *MockServerInterface_GetInstance_Call {
	return &MockServerInterface_GetInstance_Call{Call: _e.mock.On("GetInstance", w, r, tenant, workspace, name)}
}

func (_c *MockServerInterface_GetInstance_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam)) *MockServerInterface_GetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(compute.TenantPathParam), args[3].(compute.WorkspacePathParam), args[4].(compute.ResourcePathParam))
	})
	return _c
}

func (_c *MockServerInterface_GetInstance_Call) Return() *MockServerInterface_GetInstance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetInstance_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam)) *MockServerInterface_GetInstance_Call {
	_c.Run(run)
	return _c
}

// GetSku provides a mock function with given fields: w, r, tenant, name
func (_m *MockServerInterface) GetSku(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, name compute.ResourcePathParam) {
	_m.Called(w, r, tenant, name)
}

// MockServerInterface_GetSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSku'
type MockServerInterface_GetSku_Call struct {
	*mock.Call
}

// GetSku is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant compute.TenantPathParam
//   - name compute.ResourcePathParam
func (_e *MockServerInterface_Expecter) GetSku(w interface{}, r interface{}, tenant interface{}, name interface{}) *MockServerInterface_GetSku_Call {
	return &MockServerInterface_GetSku_Call{Call: _e.mock.On("GetSku", w, r, tenant, name)}
}

func (_c *MockServerInterface_GetSku_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, name compute.ResourcePathParam)) *MockServerInterface_GetSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(compute.TenantPathParam), args[3].(compute.ResourcePathParam))
	})
	return _c
}

func (_c *MockServerInterface_GetSku_Call) Return() *MockServerInterface_GetSku_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetSku_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, compute.TenantPathParam, compute.ResourcePathParam)) *MockServerInterface_GetSku_Call {
	_c.Run(run)
	return _c
}

// ListInstances provides a mock function with given fields: w, r, tenant, workspace, params
func (_m *MockServerInterface) ListInstances(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, params compute.ListInstancesParams) {
	_m.Called(w, r, tenant, workspace, params)
}

// MockServerInterface_ListInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstances'
type MockServerInterface_ListInstances_Call struct {
	*mock.Call
}

// ListInstances is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - params compute.ListInstancesParams
func (_e *MockServerInterface_Expecter) ListInstances(w interface{}, r interface{}, tenant interface{}, workspace interface{}, params interface{}) *MockServerInterface_ListInstances_Call {
	return &MockServerInterface_ListInstances_Call{Call: _e.mock.On("ListInstances", w, r, tenant, workspace, params)}
}

func (_c *MockServerInterface_ListInstances_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, params compute.ListInstancesParams)) *MockServerInterface_ListInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(compute.TenantPathParam), args[3].(compute.WorkspacePathParam), args[4].(compute.ListInstancesParams))
	})
	return _c
}

func (_c *MockServerInterface_ListInstances_Call) Return() *MockServerInterface_ListInstances_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListInstances_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, compute.TenantPathParam, compute.WorkspacePathParam, compute.ListInstancesParams)) *MockServerInterface_ListInstances_Call {
	_c.Run(run)
	return _c
}

// ListSkus provides a mock function with given fields: w, r, tenant, params
func (_m *MockServerInterface) ListSkus(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, params compute.ListSkusParams) {
	_m.Called(w, r, tenant, params)
}

// MockServerInterface_ListSkus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkus'
type MockServerInterface_ListSkus_Call struct {
	*mock.Call
}

// ListSkus is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant compute.TenantPathParam
//   - params compute.ListSkusParams
func (_e *MockServerInterface_Expecter) ListSkus(w interface{}, r interface{}, tenant interface{}, params interface{}) *MockServerInterface_ListSkus_Call {
	return &MockServerInterface_ListSkus_Call{Call: _e.mock.On("ListSkus", w, r, tenant, params)}
}

func (_c *MockServerInterface_ListSkus_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, params compute.ListSkusParams)) *MockServerInterface_ListSkus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(compute.TenantPathParam), args[3].(compute.ListSkusParams))
	})
	return _c
}

func (_c *MockServerInterface_ListSkus_Call) Return() *MockServerInterface_ListSkus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListSkus_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, compute.TenantPathParam, compute.ListSkusParams)) *MockServerInterface_ListSkus_Call {
	_c.Run(run)
	return _c
}

// RestartInstance provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) RestartInstance(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.RestartInstanceParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_RestartInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartInstance'
type MockServerInterface_RestartInstance_Call struct {
	*mock.Call
}

// RestartInstance is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params compute.RestartInstanceParams
func (_e *MockServerInterface_Expecter) RestartInstance(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_RestartInstance_Call {
	return &MockServerInterface_RestartInstance_Call{Call: _e.mock.On("RestartInstance", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_RestartInstance_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.RestartInstanceParams)) *MockServerInterface_RestartInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(compute.TenantPathParam), args[3].(compute.WorkspacePathParam), args[4].(compute.ResourcePathParam), args[5].(compute.RestartInstanceParams))
	})
	return _c
}

func (_c *MockServerInterface_RestartInstance_Call) Return() *MockServerInterface_RestartInstance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_RestartInstance_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, compute.RestartInstanceParams)) *MockServerInterface_RestartInstance_Call {
	_c.Run(run)
	return _c
}

// StartInstance provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) StartInstance(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.StartInstanceParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_StartInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartInstance'
type MockServerInterface_StartInstance_Call struct {
	*mock.Call
}

// StartInstance is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params compute.StartInstanceParams
func (_e *MockServerInterface_Expecter) StartInstance(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_StartInstance_Call {
	return &MockServerInterface_StartInstance_Call{Call: _e.mock.On("StartInstance", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_StartInstance_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.StartInstanceParams)) *MockServerInterface_StartInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(compute.TenantPathParam), args[3].(compute.WorkspacePathParam), args[4].(compute.ResourcePathParam), args[5].(compute.StartInstanceParams))
	})
	return _c
}

func (_c *MockServerInterface_StartInstance_Call) Return() *MockServerInterface_StartInstance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_StartInstance_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, compute.StartInstanceParams)) *MockServerInterface_StartInstance_Call {
	_c.Run(run)
	return _c
}

// StopInstance provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) StopInstance(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.StopInstanceParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_StopInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopInstance'
type MockServerInterface_StopInstance_Call struct {
	*mock.Call
}

// StopInstance is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant compute.TenantPathParam
//   - workspace compute.WorkspacePathParam
//   - name compute.ResourcePathParam
//   - params compute.StopInstanceParams
func (_e *MockServerInterface_Expecter) StopInstance(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_StopInstance_Call {
	return &MockServerInterface_StopInstance_Call{Call: _e.mock.On("StopInstance", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_StopInstance_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant compute.TenantPathParam, workspace compute.WorkspacePathParam, name compute.ResourcePathParam, params compute.StopInstanceParams)) *MockServerInterface_StopInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(compute.TenantPathParam), args[3].(compute.WorkspacePathParam), args[4].(compute.ResourcePathParam), args[5].(compute.StopInstanceParams))
	})
	return _c
}

func (_c *MockServerInterface_StopInstance_Call) Return() *MockServerInterface_StopInstance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_StopInstance_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, compute.TenantPathParam, compute.WorkspacePathParam, compute.ResourcePathParam, compute.StopInstanceParams)) *MockServerInterface_StopInstance_Call {
	_c.Run(run)
	return _c
}

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
