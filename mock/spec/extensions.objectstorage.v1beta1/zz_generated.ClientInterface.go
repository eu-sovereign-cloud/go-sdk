// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockobjectstorage

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	objectstorage "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.objectstorage.v1beta1"

	schema "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/schema"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateAccount provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateAccount(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *objectstorage.CreateOrUpdateAccountParams, body objectstorage.CreateOrUpdateAccountJSONRequestBody, reqEditors ...objectstorage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateAccount")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.CreateOrUpdateAccountParams, objectstorage.CreateOrUpdateAccountJSONRequestBody, ...objectstorage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.CreateOrUpdateAccountParams, objectstorage.CreateOrUpdateAccountJSONRequestBody, ...objectstorage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.CreateOrUpdateAccountParams, objectstorage.CreateOrUpdateAccountJSONRequestBody, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateAccount'
type MockClientInterface_CreateOrUpdateAccount_Call struct {
	*mock.Call
}

// CreateOrUpdateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *objectstorage.CreateOrUpdateAccountParams
//   - body objectstorage.CreateOrUpdateAccountJSONRequestBody
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateAccount(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateAccount_Call {
	return &MockClientInterface_CreateOrUpdateAccount_Call{Call: _e.mock.On("CreateOrUpdateAccount",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateAccount_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *objectstorage.CreateOrUpdateAccountParams, body objectstorage.CreateOrUpdateAccountJSONRequestBody, reqEditors ...objectstorage.RequestEditorFn)) *MockClientInterface_CreateOrUpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*objectstorage.CreateOrUpdateAccountParams), args[5].(objectstorage.CreateOrUpdateAccountJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateAccount_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateAccount_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.CreateOrUpdateAccountParams, objectstorage.CreateOrUpdateAccountJSONRequestBody, ...objectstorage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateAccountWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateAccountWithBody(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *objectstorage.CreateOrUpdateAccountParams, contentType string, body io.Reader, reqEditors ...objectstorage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateAccountWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.CreateOrUpdateAccountParams, string, io.Reader, ...objectstorage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.CreateOrUpdateAccountParams, string, io.Reader, ...objectstorage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.CreateOrUpdateAccountParams, string, io.Reader, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateAccountWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateAccountWithBody'
type MockClientInterface_CreateOrUpdateAccountWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateAccountWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *objectstorage.CreateOrUpdateAccountParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateAccountWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateAccountWithBody_Call {
	return &MockClientInterface_CreateOrUpdateAccountWithBody_Call{Call: _e.mock.On("CreateOrUpdateAccountWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateAccountWithBody_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *objectstorage.CreateOrUpdateAccountParams, contentType string, body io.Reader, reqEditors ...objectstorage.RequestEditorFn)) *MockClientInterface_CreateOrUpdateAccountWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*objectstorage.CreateOrUpdateAccountParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateAccountWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateAccountWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateAccountWithBody_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.CreateOrUpdateAccountParams, string, io.Reader, ...objectstorage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateAccountWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccount provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteAccount(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *objectstorage.DeleteAccountParams, reqEditors ...objectstorage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.DeleteAccountParams, ...objectstorage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.DeleteAccountParams, ...objectstorage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.DeleteAccountParams, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type MockClientInterface_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params *objectstorage.DeleteAccountParams
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteAccount(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteAccount_Call {
	return &MockClientInterface_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteAccount_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params *objectstorage.DeleteAccountParams, reqEditors ...objectstorage.RequestEditorFn)) *MockClientInterface_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), args[4].(*objectstorage.DeleteAccountParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteAccount_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteAccount_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, *objectstorage.DeleteAccountParams, ...objectstorage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetAccount(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, reqEditors ...objectstorage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...objectstorage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...objectstorage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockClientInterface_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetAccount(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetAccount_Call {
	return &MockClientInterface_GetAccount_Call{Call: _e.mock.On("GetAccount",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetAccount_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, reqEditors ...objectstorage.RequestEditorFn)) *MockClientInterface_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(schema.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetAccount_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetAccount_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, ...objectstorage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccounts provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListAccounts(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params *objectstorage.ListAccountsParams, reqEditors ...objectstorage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *objectstorage.ListAccountsParams, ...objectstorage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *objectstorage.ListAccountsParams, ...objectstorage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *objectstorage.ListAccountsParams, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type MockClientInterface_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - params *objectstorage.ListAccountsParams
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListAccounts(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListAccounts_Call {
	return &MockClientInterface_ListAccounts_Call{Call: _e.mock.On("ListAccounts",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListAccounts_Call) Run(run func(ctx context.Context, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params *objectstorage.ListAccountsParams, reqEditors ...objectstorage.RequestEditorFn)) *MockClientInterface_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(schema.TenantPathParam), args[2].(schema.WorkspacePathParam), args[3].(*objectstorage.ListAccountsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListAccounts_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListAccounts_Call) RunAndReturn(run func(context.Context, schema.TenantPathParam, schema.WorkspacePathParam, *objectstorage.ListAccountsParams, ...objectstorage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
