// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockobjectstorage

import (
	http "net/http"

	objectstorage "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.objectstorage.v1beta1"
	schema "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/schema"
	mock "github.com/stretchr/testify/mock"
)

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateAccount provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) CreateOrUpdateAccount(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params objectstorage.CreateOrUpdateAccountParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_CreateOrUpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateAccount'
type MockServerInterface_CreateOrUpdateAccount_Call struct {
	*mock.Call
}

// CreateOrUpdateAccount is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params objectstorage.CreateOrUpdateAccountParams
func (_e *MockServerInterface_Expecter) CreateOrUpdateAccount(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_CreateOrUpdateAccount_Call {
	return &MockServerInterface_CreateOrUpdateAccount_Call{Call: _e.mock.On("CreateOrUpdateAccount", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_CreateOrUpdateAccount_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params objectstorage.CreateOrUpdateAccountParams)) *MockServerInterface_CreateOrUpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ResourcePathParam), args[5].(objectstorage.CreateOrUpdateAccountParams))
	})
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateAccount_Call) Return() *MockServerInterface_CreateOrUpdateAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateAccount_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, objectstorage.CreateOrUpdateAccountParams)) *MockServerInterface_CreateOrUpdateAccount_Call {
	_c.Run(run)
	return _c
}

// DeleteAccount provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) DeleteAccount(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params objectstorage.DeleteAccountParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type MockServerInterface_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params objectstorage.DeleteAccountParams
func (_e *MockServerInterface_Expecter) DeleteAccount(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_DeleteAccount_Call {
	return &MockServerInterface_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_DeleteAccount_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params objectstorage.DeleteAccountParams)) *MockServerInterface_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ResourcePathParam), args[5].(objectstorage.DeleteAccountParams))
	})
	return _c
}

func (_c *MockServerInterface_DeleteAccount_Call) Return() *MockServerInterface_DeleteAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_DeleteAccount_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, objectstorage.DeleteAccountParams)) *MockServerInterface_DeleteAccount_Call {
	_c.Run(run)
	return _c
}

// GetAccount provides a mock function with given fields: w, r, tenant, workspace, name
func (_m *MockServerInterface) GetAccount(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam) {
	_m.Called(w, r, tenant, workspace, name)
}

// MockServerInterface_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockServerInterface_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
func (_e *MockServerInterface_Expecter) GetAccount(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}) *MockServerInterface_GetAccount_Call {
	return &MockServerInterface_GetAccount_Call{Call: _e.mock.On("GetAccount", w, r, tenant, workspace, name)}
}

func (_c *MockServerInterface_GetAccount_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam)) *MockServerInterface_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ResourcePathParam))
	})
	return _c
}

func (_c *MockServerInterface_GetAccount_Call) Return() *MockServerInterface_GetAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetAccount_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam)) *MockServerInterface_GetAccount_Call {
	_c.Run(run)
	return _c
}

// ListAccounts provides a mock function with given fields: w, r, tenant, workspace, params
func (_m *MockServerInterface) ListAccounts(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params objectstorage.ListAccountsParams) {
	_m.Called(w, r, tenant, workspace, params)
}

// MockServerInterface_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type MockServerInterface_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - params objectstorage.ListAccountsParams
func (_e *MockServerInterface_Expecter) ListAccounts(w interface{}, r interface{}, tenant interface{}, workspace interface{}, params interface{}) *MockServerInterface_ListAccounts_Call {
	return &MockServerInterface_ListAccounts_Call{Call: _e.mock.On("ListAccounts", w, r, tenant, workspace, params)}
}

func (_c *MockServerInterface_ListAccounts_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params objectstorage.ListAccountsParams)) *MockServerInterface_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(objectstorage.ListAccountsParams))
	})
	return _c
}

func (_c *MockServerInterface_ListAccounts_Call) Return() *MockServerInterface_ListAccounts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListAccounts_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, objectstorage.ListAccountsParams)) *MockServerInterface_ListAccounts_Call {
	_c.Run(run)
	return _c
}

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
