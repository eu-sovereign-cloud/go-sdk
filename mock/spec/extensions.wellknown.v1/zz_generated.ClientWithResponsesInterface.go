// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockwellknown

import (
	context "context"

	wellknown "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.wellknown.v1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// GetWellknownWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClientWithResponsesInterface) GetWellknownWithResponse(ctx context.Context, reqEditors ...wellknown.RequestEditorFn) (*wellknown.GetWellknownResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWellknownWithResponse")
	}

	var r0 *wellknown.GetWellknownResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...wellknown.RequestEditorFn) (*wellknown.GetWellknownResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...wellknown.RequestEditorFn) *wellknown.GetWellknownResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellknown.GetWellknownResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...wellknown.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetWellknownWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWellknownWithResponse'
type MockClientWithResponsesInterface_GetWellknownWithResponse_Call struct {
	*mock.Call
}

// GetWellknownWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...wellknown.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetWellknownWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetWellknownWithResponse_Call {
	return &MockClientWithResponsesInterface_GetWellknownWithResponse_Call{Call: _e.mock.On("GetWellknownWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetWellknownWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...wellknown.RequestEditorFn)) *MockClientWithResponsesInterface_GetWellknownWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]wellknown.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(wellknown.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetWellknownWithResponse_Call) Return(_a0 *wellknown.GetWellknownResponse, _a1 error) *MockClientWithResponsesInterface_GetWellknownWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetWellknownWithResponse_Call) RunAndReturn(run func(context.Context, ...wellknown.RequestEditorFn) (*wellknown.GetWellknownResponse, error)) *MockClientWithResponsesInterface_GetWellknownWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
