// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockauthorization

import (
	context "context"

	authorization "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/foundation.authorization.v1"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateRoleAssignmentWithBodyWithResponse provides a mock function with given fields: ctx, tenant, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateRoleAssignmentWithBodyWithResponse(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.CreateOrUpdateRoleAssignmentParams, contentType string, body io.Reader, reqEditors ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleAssignmentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRoleAssignmentWithBodyWithResponse")
	}

	var r0 *authorization.CreateOrUpdateRoleAssignmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleAssignmentParams, string, io.Reader, ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleAssignmentResponse, error)); ok {
		return rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleAssignmentParams, string, io.Reader, ...authorization.RequestEditorFn) *authorization.CreateOrUpdateRoleAssignmentResponse); ok {
		r0 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.CreateOrUpdateRoleAssignmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleAssignmentParams, string, io.Reader, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRoleAssignmentWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateRoleAssignmentWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - name authorization.ResourcePathParam
//   - params *authorization.CreateOrUpdateRoleAssignmentParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateRoleAssignmentWithBodyWithResponse(ctx interface{}, tenant interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateRoleAssignmentWithBodyWithResponse",
		append([]interface{}{ctx, tenant, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.CreateOrUpdateRoleAssignmentParams, contentType string, body io.Reader, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(authorization.ResourcePathParam), args[3].(*authorization.CreateOrUpdateRoleAssignmentParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call) Return(_a0 *authorization.CreateOrUpdateRoleAssignmentResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleAssignmentParams, string, io.Reader, ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleAssignmentResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRoleAssignmentWithResponse provides a mock function with given fields: ctx, tenant, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateRoleAssignmentWithResponse(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.CreateOrUpdateRoleAssignmentParams, body authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, reqEditors ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleAssignmentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRoleAssignmentWithResponse")
	}

	var r0 *authorization.CreateOrUpdateRoleAssignmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleAssignmentParams, authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleAssignmentResponse, error)); ok {
		return rf(ctx, tenant, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleAssignmentParams, authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, ...authorization.RequestEditorFn) *authorization.CreateOrUpdateRoleAssignmentResponse); ok {
		r0 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.CreateOrUpdateRoleAssignmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleAssignmentParams, authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRoleAssignmentWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateRoleAssignmentWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - name authorization.ResourcePathParam
//   - params *authorization.CreateOrUpdateRoleAssignmentParams
//   - body authorization.CreateOrUpdateRoleAssignmentJSONRequestBody
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateRoleAssignmentWithResponse(ctx interface{}, tenant interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call{Call: _e.mock.On("CreateOrUpdateRoleAssignmentWithResponse",
		append([]interface{}{ctx, tenant, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.CreateOrUpdateRoleAssignmentParams, body authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(authorization.ResourcePathParam), args[3].(*authorization.CreateOrUpdateRoleAssignmentParams), args[4].(authorization.CreateOrUpdateRoleAssignmentJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call) Return(_a0 *authorization.CreateOrUpdateRoleAssignmentResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleAssignmentParams, authorization.CreateOrUpdateRoleAssignmentJSONRequestBody, ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleAssignmentResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateRoleAssignmentWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRoleWithBodyWithResponse provides a mock function with given fields: ctx, tenant, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateRoleWithBodyWithResponse(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.CreateOrUpdateRoleParams, contentType string, body io.Reader, reqEditors ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRoleWithBodyWithResponse")
	}

	var r0 *authorization.CreateOrUpdateRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleParams, string, io.Reader, ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleResponse, error)); ok {
		return rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleParams, string, io.Reader, ...authorization.RequestEditorFn) *authorization.CreateOrUpdateRoleResponse); ok {
		r0 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.CreateOrUpdateRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleParams, string, io.Reader, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRoleWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateRoleWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - name authorization.ResourcePathParam
//   - params *authorization.CreateOrUpdateRoleParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateRoleWithBodyWithResponse(ctx interface{}, tenant interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateRoleWithBodyWithResponse",
		append([]interface{}{ctx, tenant, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.CreateOrUpdateRoleParams, contentType string, body io.Reader, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(authorization.ResourcePathParam), args[3].(*authorization.CreateOrUpdateRoleParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call) Return(_a0 *authorization.CreateOrUpdateRoleResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleParams, string, io.Reader, ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateRoleWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRoleWithResponse provides a mock function with given fields: ctx, tenant, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateRoleWithResponse(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.CreateOrUpdateRoleParams, body authorization.CreateOrUpdateRoleJSONRequestBody, reqEditors ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRoleWithResponse")
	}

	var r0 *authorization.CreateOrUpdateRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleParams, authorization.CreateOrUpdateRoleJSONRequestBody, ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleResponse, error)); ok {
		return rf(ctx, tenant, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleParams, authorization.CreateOrUpdateRoleJSONRequestBody, ...authorization.RequestEditorFn) *authorization.CreateOrUpdateRoleResponse); ok {
		r0 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.CreateOrUpdateRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleParams, authorization.CreateOrUpdateRoleJSONRequestBody, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRoleWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateRoleWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - name authorization.ResourcePathParam
//   - params *authorization.CreateOrUpdateRoleParams
//   - body authorization.CreateOrUpdateRoleJSONRequestBody
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateRoleWithResponse(ctx interface{}, tenant interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call{Call: _e.mock.On("CreateOrUpdateRoleWithResponse",
		append([]interface{}{ctx, tenant, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.CreateOrUpdateRoleParams, body authorization.CreateOrUpdateRoleJSONRequestBody, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(authorization.ResourcePathParam), args[3].(*authorization.CreateOrUpdateRoleParams), args[4].(authorization.CreateOrUpdateRoleJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call) Return(_a0 *authorization.CreateOrUpdateRoleResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.CreateOrUpdateRoleParams, authorization.CreateOrUpdateRoleJSONRequestBody, ...authorization.RequestEditorFn) (*authorization.CreateOrUpdateRoleResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateRoleWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleAssignmentWithResponse provides a mock function with given fields: ctx, tenant, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteRoleAssignmentWithResponse(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.DeleteRoleAssignmentParams, reqEditors ...authorization.RequestEditorFn) (*authorization.DeleteRoleAssignmentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleAssignmentWithResponse")
	}

	var r0 *authorization.DeleteRoleAssignmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.DeleteRoleAssignmentParams, ...authorization.RequestEditorFn) (*authorization.DeleteRoleAssignmentResponse, error)); ok {
		return rf(ctx, tenant, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.DeleteRoleAssignmentParams, ...authorization.RequestEditorFn) *authorization.DeleteRoleAssignmentResponse); ok {
		r0 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.DeleteRoleAssignmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.DeleteRoleAssignmentParams, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleAssignmentWithResponse'
type MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call struct {
	*mock.Call
}

// DeleteRoleAssignmentWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - name authorization.ResourcePathParam
//   - params *authorization.DeleteRoleAssignmentParams
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteRoleAssignmentWithResponse(ctx interface{}, tenant interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call{Call: _e.mock.On("DeleteRoleAssignmentWithResponse",
		append([]interface{}{ctx, tenant, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.DeleteRoleAssignmentParams, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(authorization.ResourcePathParam), args[3].(*authorization.DeleteRoleAssignmentParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call) Return(_a0 *authorization.DeleteRoleAssignmentResponse, _a1 error) *MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.DeleteRoleAssignmentParams, ...authorization.RequestEditorFn) (*authorization.DeleteRoleAssignmentResponse, error)) *MockClientWithResponsesInterface_DeleteRoleAssignmentWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleWithResponse provides a mock function with given fields: ctx, tenant, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteRoleWithResponse(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.DeleteRoleParams, reqEditors ...authorization.RequestEditorFn) (*authorization.DeleteRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleWithResponse")
	}

	var r0 *authorization.DeleteRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.DeleteRoleParams, ...authorization.RequestEditorFn) (*authorization.DeleteRoleResponse, error)); ok {
		return rf(ctx, tenant, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.DeleteRoleParams, ...authorization.RequestEditorFn) *authorization.DeleteRoleResponse); ok {
		r0 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.DeleteRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.DeleteRoleParams, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteRoleWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleWithResponse'
type MockClientWithResponsesInterface_DeleteRoleWithResponse_Call struct {
	*mock.Call
}

// DeleteRoleWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - name authorization.ResourcePathParam
//   - params *authorization.DeleteRoleParams
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteRoleWithResponse(ctx interface{}, tenant interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteRoleWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteRoleWithResponse_Call{Call: _e.mock.On("DeleteRoleWithResponse",
		append([]interface{}{ctx, tenant, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteRoleWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, params *authorization.DeleteRoleParams, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteRoleWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(authorization.ResourcePathParam), args[3].(*authorization.DeleteRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteRoleWithResponse_Call) Return(_a0 *authorization.DeleteRoleResponse, _a1 error) *MockClientWithResponsesInterface_DeleteRoleWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteRoleWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, *authorization.DeleteRoleParams, ...authorization.RequestEditorFn) (*authorization.DeleteRoleResponse, error)) *MockClientWithResponsesInterface_DeleteRoleWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleAssignmentWithResponse provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetRoleAssignmentWithResponse(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, reqEditors ...authorization.RequestEditorFn) (*authorization.GetRoleAssignmentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleAssignmentWithResponse")
	}

	var r0 *authorization.GetRoleAssignmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, ...authorization.RequestEditorFn) (*authorization.GetRoleAssignmentResponse, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, ...authorization.RequestEditorFn) *authorization.GetRoleAssignmentResponse); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.GetRoleAssignmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAssignmentWithResponse'
type MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call struct {
	*mock.Call
}

// GetRoleAssignmentWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - name authorization.ResourcePathParam
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetRoleAssignmentWithResponse(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call {
	return &MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call{Call: _e.mock.On("GetRoleAssignmentWithResponse",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(authorization.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call) Return(_a0 *authorization.GetRoleAssignmentResponse, _a1 error) *MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, ...authorization.RequestEditorFn) (*authorization.GetRoleAssignmentResponse, error)) *MockClientWithResponsesInterface_GetRoleAssignmentWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleWithResponse provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetRoleWithResponse(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, reqEditors ...authorization.RequestEditorFn) (*authorization.GetRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleWithResponse")
	}

	var r0 *authorization.GetRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, ...authorization.RequestEditorFn) (*authorization.GetRoleResponse, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, ...authorization.RequestEditorFn) *authorization.GetRoleResponse); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.GetRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetRoleWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleWithResponse'
type MockClientWithResponsesInterface_GetRoleWithResponse_Call struct {
	*mock.Call
}

// GetRoleWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - name authorization.ResourcePathParam
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetRoleWithResponse(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetRoleWithResponse_Call {
	return &MockClientWithResponsesInterface_GetRoleWithResponse_Call{Call: _e.mock.On("GetRoleWithResponse",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetRoleWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, name authorization.ResourcePathParam, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_GetRoleWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(authorization.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetRoleWithResponse_Call) Return(_a0 *authorization.GetRoleResponse, _a1 error) *MockClientWithResponsesInterface_GetRoleWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetRoleWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, authorization.ResourcePathParam, ...authorization.RequestEditorFn) (*authorization.GetRoleResponse, error)) *MockClientWithResponsesInterface_GetRoleWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleAssignmentsWithResponse provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListRoleAssignmentsWithResponse(ctx context.Context, tenant authorization.TenantPathParam, params *authorization.ListRoleAssignmentsParams, reqEditors ...authorization.RequestEditorFn) (*authorization.ListRoleAssignmentsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleAssignmentsWithResponse")
	}

	var r0 *authorization.ListRoleAssignmentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, *authorization.ListRoleAssignmentsParams, ...authorization.RequestEditorFn) (*authorization.ListRoleAssignmentsResponse, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, *authorization.ListRoleAssignmentsParams, ...authorization.RequestEditorFn) *authorization.ListRoleAssignmentsResponse); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.ListRoleAssignmentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, *authorization.ListRoleAssignmentsParams, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleAssignmentsWithResponse'
type MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call struct {
	*mock.Call
}

// ListRoleAssignmentsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - params *authorization.ListRoleAssignmentsParams
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListRoleAssignmentsWithResponse(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call{Call: _e.mock.On("ListRoleAssignmentsWithResponse",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, params *authorization.ListRoleAssignmentsParams, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(*authorization.ListRoleAssignmentsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call) Return(_a0 *authorization.ListRoleAssignmentsResponse, _a1 error) *MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, *authorization.ListRoleAssignmentsParams, ...authorization.RequestEditorFn) (*authorization.ListRoleAssignmentsResponse, error)) *MockClientWithResponsesInterface_ListRoleAssignmentsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolesWithResponse provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListRolesWithResponse(ctx context.Context, tenant authorization.TenantPathParam, params *authorization.ListRolesParams, reqEditors ...authorization.RequestEditorFn) (*authorization.ListRolesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRolesWithResponse")
	}

	var r0 *authorization.ListRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, *authorization.ListRolesParams, ...authorization.RequestEditorFn) (*authorization.ListRolesResponse, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authorization.TenantPathParam, *authorization.ListRolesParams, ...authorization.RequestEditorFn) *authorization.ListRolesResponse); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.ListRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authorization.TenantPathParam, *authorization.ListRolesParams, ...authorization.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListRolesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolesWithResponse'
type MockClientWithResponsesInterface_ListRolesWithResponse_Call struct {
	*mock.Call
}

// ListRolesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant authorization.TenantPathParam
//   - params *authorization.ListRolesParams
//   - reqEditors ...authorization.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListRolesWithResponse(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListRolesWithResponse_Call {
	return &MockClientWithResponsesInterface_ListRolesWithResponse_Call{Call: _e.mock.On("ListRolesWithResponse",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListRolesWithResponse_Call) Run(run func(ctx context.Context, tenant authorization.TenantPathParam, params *authorization.ListRolesParams, reqEditors ...authorization.RequestEditorFn)) *MockClientWithResponsesInterface_ListRolesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authorization.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(authorization.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(authorization.TenantPathParam), args[2].(*authorization.ListRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListRolesWithResponse_Call) Return(_a0 *authorization.ListRolesResponse, _a1 error) *MockClientWithResponsesInterface_ListRolesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListRolesWithResponse_Call) RunAndReturn(run func(context.Context, authorization.TenantPathParam, *authorization.ListRolesParams, ...authorization.RequestEditorFn) (*authorization.ListRolesResponse, error)) *MockClientWithResponsesInterface_ListRolesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
