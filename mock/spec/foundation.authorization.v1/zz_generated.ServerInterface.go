// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockauthorization

import (
	http "net/http"

	authorization "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/foundation.authorization.v1"

	mock "github.com/stretchr/testify/mock"

	schema "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/schema"
)

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateRole provides a mock function with given fields: w, r, tenant, name, params
func (_m *MockServerInterface) CreateOrUpdateRole(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam, params authorization.CreateOrUpdateRoleParams) {
	_m.Called(w, r, tenant, name, params)
}

// MockServerInterface_CreateOrUpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRole'
type MockServerInterface_CreateOrUpdateRole_Call struct {
	*mock.Call
}

// CreateOrUpdateRole is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - name schema.ResourcePathParam
//   - params authorization.CreateOrUpdateRoleParams
func (_e *MockServerInterface_Expecter) CreateOrUpdateRole(w interface{}, r interface{}, tenant interface{}, name interface{}, params interface{}) *MockServerInterface_CreateOrUpdateRole_Call {
	return &MockServerInterface_CreateOrUpdateRole_Call{Call: _e.mock.On("CreateOrUpdateRole", w, r, tenant, name, params)}
}

func (_c *MockServerInterface_CreateOrUpdateRole_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam, params authorization.CreateOrUpdateRoleParams)) *MockServerInterface_CreateOrUpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.ResourcePathParam), args[4].(authorization.CreateOrUpdateRoleParams))
	})
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateRole_Call) Return() *MockServerInterface_CreateOrUpdateRole_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateRole_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.ResourcePathParam, authorization.CreateOrUpdateRoleParams)) *MockServerInterface_CreateOrUpdateRole_Call {
	_c.Run(run)
	return _c
}

// CreateOrUpdateRoleAssignment provides a mock function with given fields: w, r, tenant, name, params
func (_m *MockServerInterface) CreateOrUpdateRoleAssignment(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam, params authorization.CreateOrUpdateRoleAssignmentParams) {
	_m.Called(w, r, tenant, name, params)
}

// MockServerInterface_CreateOrUpdateRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRoleAssignment'
type MockServerInterface_CreateOrUpdateRoleAssignment_Call struct {
	*mock.Call
}

// CreateOrUpdateRoleAssignment is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - name schema.ResourcePathParam
//   - params authorization.CreateOrUpdateRoleAssignmentParams
func (_e *MockServerInterface_Expecter) CreateOrUpdateRoleAssignment(w interface{}, r interface{}, tenant interface{}, name interface{}, params interface{}) *MockServerInterface_CreateOrUpdateRoleAssignment_Call {
	return &MockServerInterface_CreateOrUpdateRoleAssignment_Call{Call: _e.mock.On("CreateOrUpdateRoleAssignment", w, r, tenant, name, params)}
}

func (_c *MockServerInterface_CreateOrUpdateRoleAssignment_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam, params authorization.CreateOrUpdateRoleAssignmentParams)) *MockServerInterface_CreateOrUpdateRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.ResourcePathParam), args[4].(authorization.CreateOrUpdateRoleAssignmentParams))
	})
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateRoleAssignment_Call) Return() *MockServerInterface_CreateOrUpdateRoleAssignment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateRoleAssignment_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.ResourcePathParam, authorization.CreateOrUpdateRoleAssignmentParams)) *MockServerInterface_CreateOrUpdateRoleAssignment_Call {
	_c.Run(run)
	return _c
}

// DeleteRole provides a mock function with given fields: w, r, tenant, name, params
func (_m *MockServerInterface) DeleteRole(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam, params authorization.DeleteRoleParams) {
	_m.Called(w, r, tenant, name, params)
}

// MockServerInterface_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockServerInterface_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - name schema.ResourcePathParam
//   - params authorization.DeleteRoleParams
func (_e *MockServerInterface_Expecter) DeleteRole(w interface{}, r interface{}, tenant interface{}, name interface{}, params interface{}) *MockServerInterface_DeleteRole_Call {
	return &MockServerInterface_DeleteRole_Call{Call: _e.mock.On("DeleteRole", w, r, tenant, name, params)}
}

func (_c *MockServerInterface_DeleteRole_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam, params authorization.DeleteRoleParams)) *MockServerInterface_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.ResourcePathParam), args[4].(authorization.DeleteRoleParams))
	})
	return _c
}

func (_c *MockServerInterface_DeleteRole_Call) Return() *MockServerInterface_DeleteRole_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_DeleteRole_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.ResourcePathParam, authorization.DeleteRoleParams)) *MockServerInterface_DeleteRole_Call {
	_c.Run(run)
	return _c
}

// DeleteRoleAssignment provides a mock function with given fields: w, r, tenant, name, params
func (_m *MockServerInterface) DeleteRoleAssignment(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam, params authorization.DeleteRoleAssignmentParams) {
	_m.Called(w, r, tenant, name, params)
}

// MockServerInterface_DeleteRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleAssignment'
type MockServerInterface_DeleteRoleAssignment_Call struct {
	*mock.Call
}

// DeleteRoleAssignment is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - name schema.ResourcePathParam
//   - params authorization.DeleteRoleAssignmentParams
func (_e *MockServerInterface_Expecter) DeleteRoleAssignment(w interface{}, r interface{}, tenant interface{}, name interface{}, params interface{}) *MockServerInterface_DeleteRoleAssignment_Call {
	return &MockServerInterface_DeleteRoleAssignment_Call{Call: _e.mock.On("DeleteRoleAssignment", w, r, tenant, name, params)}
}

func (_c *MockServerInterface_DeleteRoleAssignment_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam, params authorization.DeleteRoleAssignmentParams)) *MockServerInterface_DeleteRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.ResourcePathParam), args[4].(authorization.DeleteRoleAssignmentParams))
	})
	return _c
}

func (_c *MockServerInterface_DeleteRoleAssignment_Call) Return() *MockServerInterface_DeleteRoleAssignment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_DeleteRoleAssignment_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.ResourcePathParam, authorization.DeleteRoleAssignmentParams)) *MockServerInterface_DeleteRoleAssignment_Call {
	_c.Run(run)
	return _c
}

// GetRole provides a mock function with given fields: w, r, tenant, name
func (_m *MockServerInterface) GetRole(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam) {
	_m.Called(w, r, tenant, name)
}

// MockServerInterface_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type MockServerInterface_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - name schema.ResourcePathParam
func (_e *MockServerInterface_Expecter) GetRole(w interface{}, r interface{}, tenant interface{}, name interface{}) *MockServerInterface_GetRole_Call {
	return &MockServerInterface_GetRole_Call{Call: _e.mock.On("GetRole", w, r, tenant, name)}
}

func (_c *MockServerInterface_GetRole_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam)) *MockServerInterface_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.ResourcePathParam))
	})
	return _c
}

func (_c *MockServerInterface_GetRole_Call) Return() *MockServerInterface_GetRole_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetRole_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.ResourcePathParam)) *MockServerInterface_GetRole_Call {
	_c.Run(run)
	return _c
}

// GetRoleAssignment provides a mock function with given fields: w, r, tenant, name
func (_m *MockServerInterface) GetRoleAssignment(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam) {
	_m.Called(w, r, tenant, name)
}

// MockServerInterface_GetRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAssignment'
type MockServerInterface_GetRoleAssignment_Call struct {
	*mock.Call
}

// GetRoleAssignment is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - name schema.ResourcePathParam
func (_e *MockServerInterface_Expecter) GetRoleAssignment(w interface{}, r interface{}, tenant interface{}, name interface{}) *MockServerInterface_GetRoleAssignment_Call {
	return &MockServerInterface_GetRoleAssignment_Call{Call: _e.mock.On("GetRoleAssignment", w, r, tenant, name)}
}

func (_c *MockServerInterface_GetRoleAssignment_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, name schema.ResourcePathParam)) *MockServerInterface_GetRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.ResourcePathParam))
	})
	return _c
}

func (_c *MockServerInterface_GetRoleAssignment_Call) Return() *MockServerInterface_GetRoleAssignment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetRoleAssignment_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.ResourcePathParam)) *MockServerInterface_GetRoleAssignment_Call {
	_c.Run(run)
	return _c
}

// ListRoleAssignments provides a mock function with given fields: w, r, tenant, params
func (_m *MockServerInterface) ListRoleAssignments(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, params authorization.ListRoleAssignmentsParams) {
	_m.Called(w, r, tenant, params)
}

// MockServerInterface_ListRoleAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleAssignments'
type MockServerInterface_ListRoleAssignments_Call struct {
	*mock.Call
}

// ListRoleAssignments is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - params authorization.ListRoleAssignmentsParams
func (_e *MockServerInterface_Expecter) ListRoleAssignments(w interface{}, r interface{}, tenant interface{}, params interface{}) *MockServerInterface_ListRoleAssignments_Call {
	return &MockServerInterface_ListRoleAssignments_Call{Call: _e.mock.On("ListRoleAssignments", w, r, tenant, params)}
}

func (_c *MockServerInterface_ListRoleAssignments_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, params authorization.ListRoleAssignmentsParams)) *MockServerInterface_ListRoleAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(authorization.ListRoleAssignmentsParams))
	})
	return _c
}

func (_c *MockServerInterface_ListRoleAssignments_Call) Return() *MockServerInterface_ListRoleAssignments_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListRoleAssignments_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, authorization.ListRoleAssignmentsParams)) *MockServerInterface_ListRoleAssignments_Call {
	_c.Run(run)
	return _c
}

// ListRoles provides a mock function with given fields: w, r, tenant, params
func (_m *MockServerInterface) ListRoles(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, params authorization.ListRolesParams) {
	_m.Called(w, r, tenant, params)
}

// MockServerInterface_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockServerInterface_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - params authorization.ListRolesParams
func (_e *MockServerInterface_Expecter) ListRoles(w interface{}, r interface{}, tenant interface{}, params interface{}) *MockServerInterface_ListRoles_Call {
	return &MockServerInterface_ListRoles_Call{Call: _e.mock.On("ListRoles", w, r, tenant, params)}
}

func (_c *MockServerInterface_ListRoles_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, params authorization.ListRolesParams)) *MockServerInterface_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(authorization.ListRolesParams))
	})
	return _c
}

func (_c *MockServerInterface_ListRoles_Call) Return() *MockServerInterface_ListRoles_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListRoles_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, authorization.ListRolesParams)) *MockServerInterface_ListRoles_Call {
	_c.Run(run)
	return _c
}

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
