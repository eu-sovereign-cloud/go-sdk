// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockstorage

import (
	http "net/http"

	storage "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/foundation.storage.v1"
	mock "github.com/stretchr/testify/mock"
)

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateBlockStorage provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) CreateOrUpdateBlockStorage(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params storage.CreateOrUpdateBlockStorageParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_CreateOrUpdateBlockStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateBlockStorage'
type MockServerInterface_CreateOrUpdateBlockStorage_Call struct {
	*mock.Call
}

// CreateOrUpdateBlockStorage is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - params storage.CreateOrUpdateBlockStorageParams
func (_e *MockServerInterface_Expecter) CreateOrUpdateBlockStorage(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_CreateOrUpdateBlockStorage_Call {
	return &MockServerInterface_CreateOrUpdateBlockStorage_Call{Call: _e.mock.On("CreateOrUpdateBlockStorage", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_CreateOrUpdateBlockStorage_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params storage.CreateOrUpdateBlockStorageParams)) *MockServerInterface_CreateOrUpdateBlockStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.Workspace), args[4].(storage.ResourceName), args[5].(storage.CreateOrUpdateBlockStorageParams))
	})
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateBlockStorage_Call) Return() *MockServerInterface_CreateOrUpdateBlockStorage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateBlockStorage_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.Workspace, storage.ResourceName, storage.CreateOrUpdateBlockStorageParams)) *MockServerInterface_CreateOrUpdateBlockStorage_Call {
	_c.Run(run)
	return _c
}

// CreateOrUpdateImage provides a mock function with given fields: w, r, tenant, name, params
func (_m *MockServerInterface) CreateOrUpdateImage(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, name storage.ResourceName, params storage.CreateOrUpdateImageParams) {
	_m.Called(w, r, tenant, name, params)
}

// MockServerInterface_CreateOrUpdateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateImage'
type MockServerInterface_CreateOrUpdateImage_Call struct {
	*mock.Call
}

// CreateOrUpdateImage is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - params storage.CreateOrUpdateImageParams
func (_e *MockServerInterface_Expecter) CreateOrUpdateImage(w interface{}, r interface{}, tenant interface{}, name interface{}, params interface{}) *MockServerInterface_CreateOrUpdateImage_Call {
	return &MockServerInterface_CreateOrUpdateImage_Call{Call: _e.mock.On("CreateOrUpdateImage", w, r, tenant, name, params)}
}

func (_c *MockServerInterface_CreateOrUpdateImage_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, name storage.ResourceName, params storage.CreateOrUpdateImageParams)) *MockServerInterface_CreateOrUpdateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.ResourceName), args[4].(storage.CreateOrUpdateImageParams))
	})
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateImage_Call) Return() *MockServerInterface_CreateOrUpdateImage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateImage_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.ResourceName, storage.CreateOrUpdateImageParams)) *MockServerInterface_CreateOrUpdateImage_Call {
	_c.Run(run)
	return _c
}

// DeleteBlockStorage provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) DeleteBlockStorage(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params storage.DeleteBlockStorageParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_DeleteBlockStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlockStorage'
type MockServerInterface_DeleteBlockStorage_Call struct {
	*mock.Call
}

// DeleteBlockStorage is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - params storage.DeleteBlockStorageParams
func (_e *MockServerInterface_Expecter) DeleteBlockStorage(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_DeleteBlockStorage_Call {
	return &MockServerInterface_DeleteBlockStorage_Call{Call: _e.mock.On("DeleteBlockStorage", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_DeleteBlockStorage_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params storage.DeleteBlockStorageParams)) *MockServerInterface_DeleteBlockStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.Workspace), args[4].(storage.ResourceName), args[5].(storage.DeleteBlockStorageParams))
	})
	return _c
}

func (_c *MockServerInterface_DeleteBlockStorage_Call) Return() *MockServerInterface_DeleteBlockStorage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_DeleteBlockStorage_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.Workspace, storage.ResourceName, storage.DeleteBlockStorageParams)) *MockServerInterface_DeleteBlockStorage_Call {
	_c.Run(run)
	return _c
}

// DeleteImage provides a mock function with given fields: w, r, tenant, name, params
func (_m *MockServerInterface) DeleteImage(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, name storage.ResourceName, params storage.DeleteImageParams) {
	_m.Called(w, r, tenant, name, params)
}

// MockServerInterface_DeleteImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteImage'
type MockServerInterface_DeleteImage_Call struct {
	*mock.Call
}

// DeleteImage is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - params storage.DeleteImageParams
func (_e *MockServerInterface_Expecter) DeleteImage(w interface{}, r interface{}, tenant interface{}, name interface{}, params interface{}) *MockServerInterface_DeleteImage_Call {
	return &MockServerInterface_DeleteImage_Call{Call: _e.mock.On("DeleteImage", w, r, tenant, name, params)}
}

func (_c *MockServerInterface_DeleteImage_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, name storage.ResourceName, params storage.DeleteImageParams)) *MockServerInterface_DeleteImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.ResourceName), args[4].(storage.DeleteImageParams))
	})
	return _c
}

func (_c *MockServerInterface_DeleteImage_Call) Return() *MockServerInterface_DeleteImage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_DeleteImage_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.ResourceName, storage.DeleteImageParams)) *MockServerInterface_DeleteImage_Call {
	_c.Run(run)
	return _c
}

// GetBlockStorage provides a mock function with given fields: w, r, tenant, workspace, name
func (_m *MockServerInterface) GetBlockStorage(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName) {
	_m.Called(w, r, tenant, workspace, name)
}

// MockServerInterface_GetBlockStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockStorage'
type MockServerInterface_GetBlockStorage_Call struct {
	*mock.Call
}

// GetBlockStorage is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
func (_e *MockServerInterface_Expecter) GetBlockStorage(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}) *MockServerInterface_GetBlockStorage_Call {
	return &MockServerInterface_GetBlockStorage_Call{Call: _e.mock.On("GetBlockStorage", w, r, tenant, workspace, name)}
}

func (_c *MockServerInterface_GetBlockStorage_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName)) *MockServerInterface_GetBlockStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.Workspace), args[4].(storage.ResourceName))
	})
	return _c
}

func (_c *MockServerInterface_GetBlockStorage_Call) Return() *MockServerInterface_GetBlockStorage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetBlockStorage_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.Workspace, storage.ResourceName)) *MockServerInterface_GetBlockStorage_Call {
	_c.Run(run)
	return _c
}

// GetImage provides a mock function with given fields: w, r, tenant, name
func (_m *MockServerInterface) GetImage(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, name storage.ResourceName) {
	_m.Called(w, r, tenant, name)
}

// MockServerInterface_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockServerInterface_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - name storage.ResourceName
func (_e *MockServerInterface_Expecter) GetImage(w interface{}, r interface{}, tenant interface{}, name interface{}) *MockServerInterface_GetImage_Call {
	return &MockServerInterface_GetImage_Call{Call: _e.mock.On("GetImage", w, r, tenant, name)}
}

func (_c *MockServerInterface_GetImage_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, name storage.ResourceName)) *MockServerInterface_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.ResourceName))
	})
	return _c
}

func (_c *MockServerInterface_GetImage_Call) Return() *MockServerInterface_GetImage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetImage_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.ResourceName)) *MockServerInterface_GetImage_Call {
	_c.Run(run)
	return _c
}

// GetSku provides a mock function with given fields: w, r, tenant, name
func (_m *MockServerInterface) GetSku(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, name storage.ResourceName) {
	_m.Called(w, r, tenant, name)
}

// MockServerInterface_GetSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSku'
type MockServerInterface_GetSku_Call struct {
	*mock.Call
}

// GetSku is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - name storage.ResourceName
func (_e *MockServerInterface_Expecter) GetSku(w interface{}, r interface{}, tenant interface{}, name interface{}) *MockServerInterface_GetSku_Call {
	return &MockServerInterface_GetSku_Call{Call: _e.mock.On("GetSku", w, r, tenant, name)}
}

func (_c *MockServerInterface_GetSku_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, name storage.ResourceName)) *MockServerInterface_GetSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.ResourceName))
	})
	return _c
}

func (_c *MockServerInterface_GetSku_Call) Return() *MockServerInterface_GetSku_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetSku_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.ResourceName)) *MockServerInterface_GetSku_Call {
	_c.Run(run)
	return _c
}

// ListBlockStorages provides a mock function with given fields: w, r, tenant, workspace, params
func (_m *MockServerInterface) ListBlockStorages(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, workspace storage.Workspace, params storage.ListBlockStoragesParams) {
	_m.Called(w, r, tenant, workspace, params)
}

// MockServerInterface_ListBlockStorages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlockStorages'
type MockServerInterface_ListBlockStorages_Call struct {
	*mock.Call
}

// ListBlockStorages is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - params storage.ListBlockStoragesParams
func (_e *MockServerInterface_Expecter) ListBlockStorages(w interface{}, r interface{}, tenant interface{}, workspace interface{}, params interface{}) *MockServerInterface_ListBlockStorages_Call {
	return &MockServerInterface_ListBlockStorages_Call{Call: _e.mock.On("ListBlockStorages", w, r, tenant, workspace, params)}
}

func (_c *MockServerInterface_ListBlockStorages_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, workspace storage.Workspace, params storage.ListBlockStoragesParams)) *MockServerInterface_ListBlockStorages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.Workspace), args[4].(storage.ListBlockStoragesParams))
	})
	return _c
}

func (_c *MockServerInterface_ListBlockStorages_Call) Return() *MockServerInterface_ListBlockStorages_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListBlockStorages_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.Workspace, storage.ListBlockStoragesParams)) *MockServerInterface_ListBlockStorages_Call {
	_c.Run(run)
	return _c
}

// ListImages provides a mock function with given fields: w, r, tenant, params
func (_m *MockServerInterface) ListImages(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, params storage.ListImagesParams) {
	_m.Called(w, r, tenant, params)
}

// MockServerInterface_ListImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImages'
type MockServerInterface_ListImages_Call struct {
	*mock.Call
}

// ListImages is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - params storage.ListImagesParams
func (_e *MockServerInterface_Expecter) ListImages(w interface{}, r interface{}, tenant interface{}, params interface{}) *MockServerInterface_ListImages_Call {
	return &MockServerInterface_ListImages_Call{Call: _e.mock.On("ListImages", w, r, tenant, params)}
}

func (_c *MockServerInterface_ListImages_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, params storage.ListImagesParams)) *MockServerInterface_ListImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.ListImagesParams))
	})
	return _c
}

func (_c *MockServerInterface_ListImages_Call) Return() *MockServerInterface_ListImages_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListImages_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.ListImagesParams)) *MockServerInterface_ListImages_Call {
	_c.Run(run)
	return _c
}

// ListSkus provides a mock function with given fields: w, r, tenant, params
func (_m *MockServerInterface) ListSkus(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, params storage.ListSkusParams) {
	_m.Called(w, r, tenant, params)
}

// MockServerInterface_ListSkus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkus'
type MockServerInterface_ListSkus_Call struct {
	*mock.Call
}

// ListSkus is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant storage.Tenant
//   - params storage.ListSkusParams
func (_e *MockServerInterface_Expecter) ListSkus(w interface{}, r interface{}, tenant interface{}, params interface{}) *MockServerInterface_ListSkus_Call {
	return &MockServerInterface_ListSkus_Call{Call: _e.mock.On("ListSkus", w, r, tenant, params)}
}

func (_c *MockServerInterface_ListSkus_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant storage.Tenant, params storage.ListSkusParams)) *MockServerInterface_ListSkus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(storage.Tenant), args[3].(storage.ListSkusParams))
	})
	return _c
}

func (_c *MockServerInterface_ListSkus_Call) Return() *MockServerInterface_ListSkus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListSkus_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, storage.Tenant, storage.ListSkusParams)) *MockServerInterface_ListSkus_Call {
	_c.Run(run)
	return _c
}

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
