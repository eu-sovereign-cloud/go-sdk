// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockloadbalancer

import (
	context "context"
	http "net/http"

	io "io"

	loadbalancer "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.loadbalancer.v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateNetworkLoadBalancer provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateNetworkLoadBalancer(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, name loadbalancer.ResourcePathParam, params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, body loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, reqEditors ...loadbalancer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNetworkLoadBalancer")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, ...loadbalancer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, ...loadbalancer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNetworkLoadBalancer'
type MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call struct {
	*mock.Call
}

// CreateOrUpdateNetworkLoadBalancer is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.TenantPathParam
//   - workspace loadbalancer.WorkspacePathParam
//   - name loadbalancer.ResourcePathParam
//   - params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams
//   - body loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateNetworkLoadBalancer(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call {
	return &MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call{Call: _e.mock.On("CreateOrUpdateNetworkLoadBalancer",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call) Run(run func(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, name loadbalancer.ResourcePathParam, params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, body loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.TenantPathParam), args[2].(loadbalancer.WorkspacePathParam), args[3].(loadbalancer.ResourcePathParam), args[4].(*loadbalancer.CreateOrUpdateNetworkLoadBalancerParams), args[5].(loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call) RunAndReturn(run func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, ...loadbalancer.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateNetworkLoadBalancer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNetworkLoadBalancerWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateNetworkLoadBalancerWithBody(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, name loadbalancer.ResourcePathParam, params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, contentType string, body io.Reader, reqEditors ...loadbalancer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNetworkLoadBalancerWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, string, io.Reader, ...loadbalancer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, string, io.Reader, ...loadbalancer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, string, io.Reader, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNetworkLoadBalancerWithBody'
type MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateNetworkLoadBalancerWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.TenantPathParam
//   - workspace loadbalancer.WorkspacePathParam
//   - name loadbalancer.ResourcePathParam
//   - params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateNetworkLoadBalancerWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call {
	return &MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call{Call: _e.mock.On("CreateOrUpdateNetworkLoadBalancerWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call) Run(run func(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, name loadbalancer.ResourcePathParam, params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, contentType string, body io.Reader, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.TenantPathParam), args[2].(loadbalancer.WorkspacePathParam), args[3].(loadbalancer.ResourcePathParam), args[4].(*loadbalancer.CreateOrUpdateNetworkLoadBalancerParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call) RunAndReturn(run func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, string, io.Reader, ...loadbalancer.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateNetworkLoadBalancerWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetworkLoadBalancer provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteNetworkLoadBalancer(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, name loadbalancer.ResourcePathParam, params *loadbalancer.DeleteNetworkLoadBalancerParams, reqEditors ...loadbalancer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkLoadBalancer")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.DeleteNetworkLoadBalancerParams, ...loadbalancer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.DeleteNetworkLoadBalancerParams, ...loadbalancer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.DeleteNetworkLoadBalancerParams, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteNetworkLoadBalancer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetworkLoadBalancer'
type MockClientInterface_DeleteNetworkLoadBalancer_Call struct {
	*mock.Call
}

// DeleteNetworkLoadBalancer is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.TenantPathParam
//   - workspace loadbalancer.WorkspacePathParam
//   - name loadbalancer.ResourcePathParam
//   - params *loadbalancer.DeleteNetworkLoadBalancerParams
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteNetworkLoadBalancer(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteNetworkLoadBalancer_Call {
	return &MockClientInterface_DeleteNetworkLoadBalancer_Call{Call: _e.mock.On("DeleteNetworkLoadBalancer",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteNetworkLoadBalancer_Call) Run(run func(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, name loadbalancer.ResourcePathParam, params *loadbalancer.DeleteNetworkLoadBalancerParams, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientInterface_DeleteNetworkLoadBalancer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.TenantPathParam), args[2].(loadbalancer.WorkspacePathParam), args[3].(loadbalancer.ResourcePathParam), args[4].(*loadbalancer.DeleteNetworkLoadBalancerParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteNetworkLoadBalancer_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteNetworkLoadBalancer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteNetworkLoadBalancer_Call) RunAndReturn(run func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, *loadbalancer.DeleteNetworkLoadBalancerParams, ...loadbalancer.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteNetworkLoadBalancer_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkLoadBalancer provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetNetworkLoadBalancer(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, name loadbalancer.ResourcePathParam, reqEditors ...loadbalancer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkLoadBalancer")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, ...loadbalancer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, ...loadbalancer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetNetworkLoadBalancer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkLoadBalancer'
type MockClientInterface_GetNetworkLoadBalancer_Call struct {
	*mock.Call
}

// GetNetworkLoadBalancer is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.TenantPathParam
//   - workspace loadbalancer.WorkspacePathParam
//   - name loadbalancer.ResourcePathParam
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetNetworkLoadBalancer(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetNetworkLoadBalancer_Call {
	return &MockClientInterface_GetNetworkLoadBalancer_Call{Call: _e.mock.On("GetNetworkLoadBalancer",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetNetworkLoadBalancer_Call) Run(run func(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, name loadbalancer.ResourcePathParam, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientInterface_GetNetworkLoadBalancer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.TenantPathParam), args[2].(loadbalancer.WorkspacePathParam), args[3].(loadbalancer.ResourcePathParam), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetNetworkLoadBalancer_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetNetworkLoadBalancer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetNetworkLoadBalancer_Call) RunAndReturn(run func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, loadbalancer.ResourcePathParam, ...loadbalancer.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetNetworkLoadBalancer_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworkLoadBalancers provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListNetworkLoadBalancers(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, params *loadbalancer.ListNetworkLoadBalancersParams, reqEditors ...loadbalancer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkLoadBalancers")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, *loadbalancer.ListNetworkLoadBalancersParams, ...loadbalancer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, *loadbalancer.ListNetworkLoadBalancersParams, ...loadbalancer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, *loadbalancer.ListNetworkLoadBalancersParams, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListNetworkLoadBalancers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworkLoadBalancers'
type MockClientInterface_ListNetworkLoadBalancers_Call struct {
	*mock.Call
}

// ListNetworkLoadBalancers is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.TenantPathParam
//   - workspace loadbalancer.WorkspacePathParam
//   - params *loadbalancer.ListNetworkLoadBalancersParams
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListNetworkLoadBalancers(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListNetworkLoadBalancers_Call {
	return &MockClientInterface_ListNetworkLoadBalancers_Call{Call: _e.mock.On("ListNetworkLoadBalancers",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListNetworkLoadBalancers_Call) Run(run func(ctx context.Context, tenant loadbalancer.TenantPathParam, workspace loadbalancer.WorkspacePathParam, params *loadbalancer.ListNetworkLoadBalancersParams, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientInterface_ListNetworkLoadBalancers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.TenantPathParam), args[2].(loadbalancer.WorkspacePathParam), args[3].(*loadbalancer.ListNetworkLoadBalancersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListNetworkLoadBalancers_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListNetworkLoadBalancers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListNetworkLoadBalancers_Call) RunAndReturn(run func(context.Context, loadbalancer.TenantPathParam, loadbalancer.WorkspacePathParam, *loadbalancer.ListNetworkLoadBalancersParams, ...loadbalancer.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListNetworkLoadBalancers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
