// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockloadbalancer

import (
	context "context"
	io "io"

	loadbalancer "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.loadbalancer.v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, name loadbalancer.ResourceName, params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, contentType string, body io.Reader, reqEditors ...loadbalancer.RequestEditorFn) (*loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse")
	}

	var r0 *loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, string, io.Reader, ...loadbalancer.RequestEditorFn) (*loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, string, io.Reader, ...loadbalancer.RequestEditorFn) *loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, string, io.Reader, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.Tenant
//   - workspace loadbalancer.Workspace
//   - name loadbalancer.ResourceName
//   - params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, name loadbalancer.ResourceName, params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, contentType string, body io.Reader, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.Tenant), args[2].(loadbalancer.Workspace), args[3].(loadbalancer.ResourceName), args[4].(*loadbalancer.CreateOrUpdateNetworkLoadBalancerParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call) Return(_a0 *loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, string, io.Reader, ...loadbalancer.RequestEditorFn) (*loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNetworkLoadBalancerWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateNetworkLoadBalancerWithResponse(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, name loadbalancer.ResourceName, params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, body loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, reqEditors ...loadbalancer.RequestEditorFn) (*loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNetworkLoadBalancerWithResponse")
	}

	var r0 *loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, ...loadbalancer.RequestEditorFn) (*loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, ...loadbalancer.RequestEditorFn) *loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNetworkLoadBalancerWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateNetworkLoadBalancerWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.Tenant
//   - workspace loadbalancer.Workspace
//   - name loadbalancer.ResourceName
//   - params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams
//   - body loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateNetworkLoadBalancerWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call{Call: _e.mock.On("CreateOrUpdateNetworkLoadBalancerWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call) Run(run func(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, name loadbalancer.ResourceName, params *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, body loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.Tenant), args[2].(loadbalancer.Workspace), args[3].(loadbalancer.ResourceName), args[4].(*loadbalancer.CreateOrUpdateNetworkLoadBalancerParams), args[5].(loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call) Return(_a0 *loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call) RunAndReturn(run func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.CreateOrUpdateNetworkLoadBalancerParams, loadbalancer.CreateOrUpdateNetworkLoadBalancerJSONRequestBody, ...loadbalancer.RequestEditorFn) (*loadbalancer.CreateOrUpdateNetworkLoadBalancerResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateNetworkLoadBalancerWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetworkLoadBalancerWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteNetworkLoadBalancerWithResponse(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, name loadbalancer.ResourceName, params *loadbalancer.DeleteNetworkLoadBalancerParams, reqEditors ...loadbalancer.RequestEditorFn) (*loadbalancer.DeleteNetworkLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkLoadBalancerWithResponse")
	}

	var r0 *loadbalancer.DeleteNetworkLoadBalancerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.DeleteNetworkLoadBalancerParams, ...loadbalancer.RequestEditorFn) (*loadbalancer.DeleteNetworkLoadBalancerResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.DeleteNetworkLoadBalancerParams, ...loadbalancer.RequestEditorFn) *loadbalancer.DeleteNetworkLoadBalancerResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loadbalancer.DeleteNetworkLoadBalancerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.DeleteNetworkLoadBalancerParams, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetworkLoadBalancerWithResponse'
type MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call struct {
	*mock.Call
}

// DeleteNetworkLoadBalancerWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.Tenant
//   - workspace loadbalancer.Workspace
//   - name loadbalancer.ResourceName
//   - params *loadbalancer.DeleteNetworkLoadBalancerParams
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteNetworkLoadBalancerWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call{Call: _e.mock.On("DeleteNetworkLoadBalancerWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call) Run(run func(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, name loadbalancer.ResourceName, params *loadbalancer.DeleteNetworkLoadBalancerParams, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.Tenant), args[2].(loadbalancer.Workspace), args[3].(loadbalancer.ResourceName), args[4].(*loadbalancer.DeleteNetworkLoadBalancerParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call) Return(_a0 *loadbalancer.DeleteNetworkLoadBalancerResponse, _a1 error) *MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call) RunAndReturn(run func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, *loadbalancer.DeleteNetworkLoadBalancerParams, ...loadbalancer.RequestEditorFn) (*loadbalancer.DeleteNetworkLoadBalancerResponse, error)) *MockClientWithResponsesInterface_DeleteNetworkLoadBalancerWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkLoadBalancerWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetNetworkLoadBalancerWithResponse(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, name loadbalancer.ResourceName, reqEditors ...loadbalancer.RequestEditorFn) (*loadbalancer.GetNetworkLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkLoadBalancerWithResponse")
	}

	var r0 *loadbalancer.GetNetworkLoadBalancerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, ...loadbalancer.RequestEditorFn) (*loadbalancer.GetNetworkLoadBalancerResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, ...loadbalancer.RequestEditorFn) *loadbalancer.GetNetworkLoadBalancerResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loadbalancer.GetNetworkLoadBalancerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkLoadBalancerWithResponse'
type MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call struct {
	*mock.Call
}

// GetNetworkLoadBalancerWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.Tenant
//   - workspace loadbalancer.Workspace
//   - name loadbalancer.ResourceName
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetNetworkLoadBalancerWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call {
	return &MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call{Call: _e.mock.On("GetNetworkLoadBalancerWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call) Run(run func(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, name loadbalancer.ResourceName, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.Tenant), args[2].(loadbalancer.Workspace), args[3].(loadbalancer.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call) Return(_a0 *loadbalancer.GetNetworkLoadBalancerResponse, _a1 error) *MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call) RunAndReturn(run func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, loadbalancer.ResourceName, ...loadbalancer.RequestEditorFn) (*loadbalancer.GetNetworkLoadBalancerResponse, error)) *MockClientWithResponsesInterface_GetNetworkLoadBalancerWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworkLoadBalancersWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListNetworkLoadBalancersWithResponse(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, params *loadbalancer.ListNetworkLoadBalancersParams, reqEditors ...loadbalancer.RequestEditorFn) (*loadbalancer.ListNetworkLoadBalancersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkLoadBalancersWithResponse")
	}

	var r0 *loadbalancer.ListNetworkLoadBalancersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, *loadbalancer.ListNetworkLoadBalancersParams, ...loadbalancer.RequestEditorFn) (*loadbalancer.ListNetworkLoadBalancersResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, *loadbalancer.ListNetworkLoadBalancersParams, ...loadbalancer.RequestEditorFn) *loadbalancer.ListNetworkLoadBalancersResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loadbalancer.ListNetworkLoadBalancersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, *loadbalancer.ListNetworkLoadBalancersParams, ...loadbalancer.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworkLoadBalancersWithResponse'
type MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call struct {
	*mock.Call
}

// ListNetworkLoadBalancersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant loadbalancer.Tenant
//   - workspace loadbalancer.Workspace
//   - params *loadbalancer.ListNetworkLoadBalancersParams
//   - reqEditors ...loadbalancer.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListNetworkLoadBalancersWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call {
	return &MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call{Call: _e.mock.On("ListNetworkLoadBalancersWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call) Run(run func(ctx context.Context, tenant loadbalancer.Tenant, workspace loadbalancer.Workspace, params *loadbalancer.ListNetworkLoadBalancersParams, reqEditors ...loadbalancer.RequestEditorFn)) *MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]loadbalancer.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(loadbalancer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(loadbalancer.Tenant), args[2].(loadbalancer.Workspace), args[3].(*loadbalancer.ListNetworkLoadBalancersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call) Return(_a0 *loadbalancer.ListNetworkLoadBalancersResponse, _a1 error) *MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call) RunAndReturn(run func(context.Context, loadbalancer.Tenant, loadbalancer.Workspace, *loadbalancer.ListNetworkLoadBalancersParams, ...loadbalancer.RequestEditorFn) (*loadbalancer.ListNetworkLoadBalancersResponse, error)) *MockClientWithResponsesInterface_ListNetworkLoadBalancersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
