// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockkubernetes

import (
	context "context"
	io "io"

	kubernetes "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.kubernetes.v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateClusterWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateClusterWithBodyWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateClusterParams, contentType string, body io.Reader, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateClusterWithBodyWithResponse")
	}

	var r0 *kubernetes.CreateOrUpdateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, string, io.Reader, ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateClusterResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, string, io.Reader, ...kubernetes.RequestEditorFn) *kubernetes.CreateOrUpdateClusterResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.CreateOrUpdateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, string, io.Reader, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateClusterWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateClusterWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - name kubernetes.ResourceName
//   - params *kubernetes.CreateOrUpdateClusterParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateClusterWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateClusterWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateClusterParams, contentType string, body io.Reader, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.ResourceName), args[4].(*kubernetes.CreateOrUpdateClusterParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call) Return(_a0 *kubernetes.CreateOrUpdateClusterResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, string, io.Reader, ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateClusterResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateClusterWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateClusterWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateClusterWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateClusterParams, body kubernetes.CreateOrUpdateClusterJSONRequestBody, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateClusterWithResponse")
	}

	var r0 *kubernetes.CreateOrUpdateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, kubernetes.CreateOrUpdateClusterJSONRequestBody, ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateClusterResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, kubernetes.CreateOrUpdateClusterJSONRequestBody, ...kubernetes.RequestEditorFn) *kubernetes.CreateOrUpdateClusterResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.CreateOrUpdateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, kubernetes.CreateOrUpdateClusterJSONRequestBody, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateClusterWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - name kubernetes.ResourceName
//   - params *kubernetes.CreateOrUpdateClusterParams
//   - body kubernetes.CreateOrUpdateClusterJSONRequestBody
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateClusterWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call{Call: _e.mock.On("CreateOrUpdateClusterWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateClusterParams, body kubernetes.CreateOrUpdateClusterJSONRequestBody, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.ResourceName), args[4].(*kubernetes.CreateOrUpdateClusterParams), args[5].(kubernetes.CreateOrUpdateClusterJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call) Return(_a0 *kubernetes.CreateOrUpdateClusterResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, kubernetes.CreateOrUpdateClusterJSONRequestBody, ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateClusterResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNodePoolWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, cluster, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateNodePoolWithBodyWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateNodePoolParams, contentType string, body io.Reader, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateNodePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNodePoolWithBodyWithResponse")
	}

	var r0 *kubernetes.CreateOrUpdateNodePoolResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, string, io.Reader, ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateNodePoolResponse, error)); ok {
		return rf(ctx, tenant, workspace, cluster, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, string, io.Reader, ...kubernetes.RequestEditorFn) *kubernetes.CreateOrUpdateNodePoolResponse); ok {
		r0 = rf(ctx, tenant, workspace, cluster, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.CreateOrUpdateNodePoolResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, string, io.Reader, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNodePoolWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateNodePoolWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - name kubernetes.ResourceName
//   - params *kubernetes.CreateOrUpdateNodePoolParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateNodePoolWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateNodePoolWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, cluster, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateNodePoolParams, contentType string, body io.Reader, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-8)
		for i, a := range args[8:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(kubernetes.ResourceName), args[5].(*kubernetes.CreateOrUpdateNodePoolParams), args[6].(string), args[7].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call) Return(_a0 *kubernetes.CreateOrUpdateNodePoolResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, string, io.Reader, ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateNodePoolResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNodePoolWithResponse provides a mock function with given fields: ctx, tenant, workspace, cluster, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateNodePoolWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateNodePoolParams, body kubernetes.CreateOrUpdateNodePoolJSONRequestBody, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateNodePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNodePoolWithResponse")
	}

	var r0 *kubernetes.CreateOrUpdateNodePoolResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, kubernetes.CreateOrUpdateNodePoolJSONRequestBody, ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateNodePoolResponse, error)); ok {
		return rf(ctx, tenant, workspace, cluster, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, kubernetes.CreateOrUpdateNodePoolJSONRequestBody, ...kubernetes.RequestEditorFn) *kubernetes.CreateOrUpdateNodePoolResponse); ok {
		r0 = rf(ctx, tenant, workspace, cluster, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.CreateOrUpdateNodePoolResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, kubernetes.CreateOrUpdateNodePoolJSONRequestBody, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNodePoolWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateNodePoolWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - name kubernetes.ResourceName
//   - params *kubernetes.CreateOrUpdateNodePoolParams
//   - body kubernetes.CreateOrUpdateNodePoolJSONRequestBody
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateNodePoolWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call{Call: _e.mock.On("CreateOrUpdateNodePoolWithResponse",
		append([]interface{}{ctx, tenant, workspace, cluster, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateNodePoolParams, body kubernetes.CreateOrUpdateNodePoolJSONRequestBody, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(kubernetes.ResourceName), args[5].(*kubernetes.CreateOrUpdateNodePoolParams), args[6].(kubernetes.CreateOrUpdateNodePoolJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call) Return(_a0 *kubernetes.CreateOrUpdateNodePoolResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, kubernetes.CreateOrUpdateNodePoolJSONRequestBody, ...kubernetes.RequestEditorFn) (*kubernetes.CreateOrUpdateNodePoolResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateNodePoolWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteClusterWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.DeleteClusterParams, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.DeleteClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterWithResponse")
	}

	var r0 *kubernetes.DeleteClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.DeleteClusterParams, ...kubernetes.RequestEditorFn) (*kubernetes.DeleteClusterResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.DeleteClusterParams, ...kubernetes.RequestEditorFn) *kubernetes.DeleteClusterResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.DeleteClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.DeleteClusterParams, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterWithResponse'
type MockClientWithResponsesInterface_DeleteClusterWithResponse_Call struct {
	*mock.Call
}

// DeleteClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - name kubernetes.ResourceName
//   - params *kubernetes.DeleteClusterParams
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteClusterWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteClusterWithResponse_Call{Call: _e.mock.On("DeleteClusterWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.DeleteClusterParams, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.ResourceName), args[4].(*kubernetes.DeleteClusterParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call) Return(_a0 *kubernetes.DeleteClusterResponse, _a1 error) *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.DeleteClusterParams, ...kubernetes.RequestEditorFn) (*kubernetes.DeleteClusterResponse, error)) *MockClientWithResponsesInterface_DeleteClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNodePoolWithResponse provides a mock function with given fields: ctx, tenant, workspace, cluster, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteNodePoolWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.DeleteNodePoolParams, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.DeleteNodePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNodePoolWithResponse")
	}

	var r0 *kubernetes.DeleteNodePoolResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.DeleteNodePoolParams, ...kubernetes.RequestEditorFn) (*kubernetes.DeleteNodePoolResponse, error)); ok {
		return rf(ctx, tenant, workspace, cluster, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.DeleteNodePoolParams, ...kubernetes.RequestEditorFn) *kubernetes.DeleteNodePoolResponse); ok {
		r0 = rf(ctx, tenant, workspace, cluster, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.DeleteNodePoolResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.DeleteNodePoolParams, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNodePoolWithResponse'
type MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call struct {
	*mock.Call
}

// DeleteNodePoolWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - name kubernetes.ResourceName
//   - params *kubernetes.DeleteNodePoolParams
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteNodePoolWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call{Call: _e.mock.On("DeleteNodePoolWithResponse",
		append([]interface{}{ctx, tenant, workspace, cluster, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.DeleteNodePoolParams, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(kubernetes.ResourceName), args[5].(*kubernetes.DeleteNodePoolParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call) Return(_a0 *kubernetes.DeleteNodePoolResponse, _a1 error) *MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.DeleteNodePoolParams, ...kubernetes.RequestEditorFn) (*kubernetes.DeleteNodePoolResponse, error)) *MockClientWithResponsesInterface_DeleteNodePoolWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetClusterWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.GetClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterWithResponse")
	}

	var r0 *kubernetes.GetClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) (*kubernetes.GetClusterResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) *kubernetes.GetClusterResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.GetClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterWithResponse'
type MockClientWithResponsesInterface_GetClusterWithResponse_Call struct {
	*mock.Call
}

// GetClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - name kubernetes.ResourceName
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetClusterWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	return &MockClientWithResponsesInterface_GetClusterWithResponse_Call{Call: _e.mock.On("GetClusterWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetClusterWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetClusterWithResponse_Call) Return(_a0 *kubernetes.GetClusterResponse, _a1 error) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetClusterWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) (*kubernetes.GetClusterResponse, error)) *MockClientWithResponsesInterface_GetClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodePoolWithResponse provides a mock function with given fields: ctx, tenant, workspace, cluster, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetNodePoolWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.GetNodePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNodePoolWithResponse")
	}

	var r0 *kubernetes.GetNodePoolResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) (*kubernetes.GetNodePoolResponse, error)); ok {
		return rf(ctx, tenant, workspace, cluster, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) *kubernetes.GetNodePoolResponse); ok {
		r0 = rf(ctx, tenant, workspace, cluster, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.GetNodePoolResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetNodePoolWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodePoolWithResponse'
type MockClientWithResponsesInterface_GetNodePoolWithResponse_Call struct {
	*mock.Call
}

// GetNodePoolWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - name kubernetes.ResourceName
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetNodePoolWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetNodePoolWithResponse_Call {
	return &MockClientWithResponsesInterface_GetNodePoolWithResponse_Call{Call: _e.mock.On("GetNodePoolWithResponse",
		append([]interface{}{ctx, tenant, workspace, cluster, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetNodePoolWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_GetNodePoolWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(kubernetes.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNodePoolWithResponse_Call) Return(_a0 *kubernetes.GetNodePoolResponse, _a1 error) *MockClientWithResponsesInterface_GetNodePoolWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetNodePoolWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) (*kubernetes.GetNodePoolResponse, error)) *MockClientWithResponsesInterface_GetNodePoolWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListClustersWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListClustersWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, params *kubernetes.ListClustersParams, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.ListClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClustersWithResponse")
	}

	var r0 *kubernetes.ListClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, *kubernetes.ListClustersParams, ...kubernetes.RequestEditorFn) (*kubernetes.ListClustersResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, *kubernetes.ListClustersParams, ...kubernetes.RequestEditorFn) *kubernetes.ListClustersResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.ListClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, *kubernetes.ListClustersParams, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListClustersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClustersWithResponse'
type MockClientWithResponsesInterface_ListClustersWithResponse_Call struct {
	*mock.Call
}

// ListClustersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - params *kubernetes.ListClustersParams
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListClustersWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	return &MockClientWithResponsesInterface_ListClustersWithResponse_Call{Call: _e.mock.On("ListClustersWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListClustersWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, params *kubernetes.ListClustersParams, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(*kubernetes.ListClustersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListClustersWithResponse_Call) Return(_a0 *kubernetes.ListClustersResponse, _a1 error) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListClustersWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, *kubernetes.ListClustersParams, ...kubernetes.RequestEditorFn) (*kubernetes.ListClustersResponse, error)) *MockClientWithResponsesInterface_ListClustersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodePoolsWithResponse provides a mock function with given fields: ctx, tenant, workspace, cluster, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListNodePoolsWithResponse(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, params *kubernetes.ListNodePoolsParams, reqEditors ...kubernetes.RequestEditorFn) (*kubernetes.ListNodePoolsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNodePoolsWithResponse")
	}

	var r0 *kubernetes.ListNodePoolsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, *kubernetes.ListNodePoolsParams, ...kubernetes.RequestEditorFn) (*kubernetes.ListNodePoolsResponse, error)); ok {
		return rf(ctx, tenant, workspace, cluster, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, *kubernetes.ListNodePoolsParams, ...kubernetes.RequestEditorFn) *kubernetes.ListNodePoolsResponse); ok {
		r0 = rf(ctx, tenant, workspace, cluster, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.ListNodePoolsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, *kubernetes.ListNodePoolsParams, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodePoolsWithResponse'
type MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call struct {
	*mock.Call
}

// ListNodePoolsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - params *kubernetes.ListNodePoolsParams
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListNodePoolsWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call{Call: _e.mock.On("ListNodePoolsWithResponse",
		append([]interface{}{ctx, tenant, workspace, cluster, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, params *kubernetes.ListNodePoolsParams, reqEditors ...kubernetes.RequestEditorFn)) *MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(*kubernetes.ListNodePoolsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call) Return(_a0 *kubernetes.ListNodePoolsResponse, _a1 error) *MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, *kubernetes.ListNodePoolsParams, ...kubernetes.RequestEditorFn) (*kubernetes.ListNodePoolsResponse, error)) *MockClientWithResponsesInterface_ListNodePoolsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
