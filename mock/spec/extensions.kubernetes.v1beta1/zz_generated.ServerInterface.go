// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockkubernetes

import (
	http "net/http"

	kubernetes "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.kubernetes.v1beta1"
	mock "github.com/stretchr/testify/mock"

	schema "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/schema"
)

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateCluster provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) CreateOrUpdateCluster(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params kubernetes.CreateOrUpdateClusterParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_CreateOrUpdateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateCluster'
type MockServerInterface_CreateOrUpdateCluster_Call struct {
	*mock.Call
}

// CreateOrUpdateCluster is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params kubernetes.CreateOrUpdateClusterParams
func (_e *MockServerInterface_Expecter) CreateOrUpdateCluster(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_CreateOrUpdateCluster_Call {
	return &MockServerInterface_CreateOrUpdateCluster_Call{Call: _e.mock.On("CreateOrUpdateCluster", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_CreateOrUpdateCluster_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params kubernetes.CreateOrUpdateClusterParams)) *MockServerInterface_CreateOrUpdateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ResourcePathParam), args[5].(kubernetes.CreateOrUpdateClusterParams))
	})
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateCluster_Call) Return() *MockServerInterface_CreateOrUpdateCluster_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateCluster_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, kubernetes.CreateOrUpdateClusterParams)) *MockServerInterface_CreateOrUpdateCluster_Call {
	_c.Run(run)
	return _c
}

// CreateOrUpdateNodePool provides a mock function with given fields: w, r, tenant, workspace, cluster, name, params
func (_m *MockServerInterface) CreateOrUpdateNodePool(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, cluster schema.ClusterPathParam, name schema.ResourcePathParam, params kubernetes.CreateOrUpdateNodePoolParams) {
	_m.Called(w, r, tenant, workspace, cluster, name, params)
}

// MockServerInterface_CreateOrUpdateNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNodePool'
type MockServerInterface_CreateOrUpdateNodePool_Call struct {
	*mock.Call
}

// CreateOrUpdateNodePool is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - cluster schema.ClusterPathParam
//   - name schema.ResourcePathParam
//   - params kubernetes.CreateOrUpdateNodePoolParams
func (_e *MockServerInterface_Expecter) CreateOrUpdateNodePool(w interface{}, r interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, params interface{}) *MockServerInterface_CreateOrUpdateNodePool_Call {
	return &MockServerInterface_CreateOrUpdateNodePool_Call{Call: _e.mock.On("CreateOrUpdateNodePool", w, r, tenant, workspace, cluster, name, params)}
}

func (_c *MockServerInterface_CreateOrUpdateNodePool_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, cluster schema.ClusterPathParam, name schema.ResourcePathParam, params kubernetes.CreateOrUpdateNodePoolParams)) *MockServerInterface_CreateOrUpdateNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ClusterPathParam), args[5].(schema.ResourcePathParam), args[6].(kubernetes.CreateOrUpdateNodePoolParams))
	})
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateNodePool_Call) Return() *MockServerInterface_CreateOrUpdateNodePool_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_CreateOrUpdateNodePool_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ClusterPathParam, schema.ResourcePathParam, kubernetes.CreateOrUpdateNodePoolParams)) *MockServerInterface_CreateOrUpdateNodePool_Call {
	_c.Run(run)
	return _c
}

// DeleteCluster provides a mock function with given fields: w, r, tenant, workspace, name, params
func (_m *MockServerInterface) DeleteCluster(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params kubernetes.DeleteClusterParams) {
	_m.Called(w, r, tenant, workspace, name, params)
}

// MockServerInterface_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type MockServerInterface_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
//   - params kubernetes.DeleteClusterParams
func (_e *MockServerInterface_Expecter) DeleteCluster(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}) *MockServerInterface_DeleteCluster_Call {
	return &MockServerInterface_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster", w, r, tenant, workspace, name, params)}
}

func (_c *MockServerInterface_DeleteCluster_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam, params kubernetes.DeleteClusterParams)) *MockServerInterface_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ResourcePathParam), args[5].(kubernetes.DeleteClusterParams))
	})
	return _c
}

func (_c *MockServerInterface_DeleteCluster_Call) Return() *MockServerInterface_DeleteCluster_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_DeleteCluster_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam, kubernetes.DeleteClusterParams)) *MockServerInterface_DeleteCluster_Call {
	_c.Run(run)
	return _c
}

// DeleteNodePool provides a mock function with given fields: w, r, tenant, workspace, cluster, name, params
func (_m *MockServerInterface) DeleteNodePool(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, cluster schema.ClusterPathParam, name schema.ResourcePathParam, params kubernetes.DeleteNodePoolParams) {
	_m.Called(w, r, tenant, workspace, cluster, name, params)
}

// MockServerInterface_DeleteNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNodePool'
type MockServerInterface_DeleteNodePool_Call struct {
	*mock.Call
}

// DeleteNodePool is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - cluster schema.ClusterPathParam
//   - name schema.ResourcePathParam
//   - params kubernetes.DeleteNodePoolParams
func (_e *MockServerInterface_Expecter) DeleteNodePool(w interface{}, r interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, params interface{}) *MockServerInterface_DeleteNodePool_Call {
	return &MockServerInterface_DeleteNodePool_Call{Call: _e.mock.On("DeleteNodePool", w, r, tenant, workspace, cluster, name, params)}
}

func (_c *MockServerInterface_DeleteNodePool_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, cluster schema.ClusterPathParam, name schema.ResourcePathParam, params kubernetes.DeleteNodePoolParams)) *MockServerInterface_DeleteNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ClusterPathParam), args[5].(schema.ResourcePathParam), args[6].(kubernetes.DeleteNodePoolParams))
	})
	return _c
}

func (_c *MockServerInterface_DeleteNodePool_Call) Return() *MockServerInterface_DeleteNodePool_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_DeleteNodePool_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ClusterPathParam, schema.ResourcePathParam, kubernetes.DeleteNodePoolParams)) *MockServerInterface_DeleteNodePool_Call {
	_c.Run(run)
	return _c
}

// GetCluster provides a mock function with given fields: w, r, tenant, workspace, name
func (_m *MockServerInterface) GetCluster(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam) {
	_m.Called(w, r, tenant, workspace, name)
}

// MockServerInterface_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type MockServerInterface_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - name schema.ResourcePathParam
func (_e *MockServerInterface_Expecter) GetCluster(w interface{}, r interface{}, tenant interface{}, workspace interface{}, name interface{}) *MockServerInterface_GetCluster_Call {
	return &MockServerInterface_GetCluster_Call{Call: _e.mock.On("GetCluster", w, r, tenant, workspace, name)}
}

func (_c *MockServerInterface_GetCluster_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, name schema.ResourcePathParam)) *MockServerInterface_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ResourcePathParam))
	})
	return _c
}

func (_c *MockServerInterface_GetCluster_Call) Return() *MockServerInterface_GetCluster_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetCluster_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ResourcePathParam)) *MockServerInterface_GetCluster_Call {
	_c.Run(run)
	return _c
}

// GetNodePool provides a mock function with given fields: w, r, tenant, workspace, cluster, name
func (_m *MockServerInterface) GetNodePool(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, cluster schema.ClusterPathParam, name schema.ResourcePathParam) {
	_m.Called(w, r, tenant, workspace, cluster, name)
}

// MockServerInterface_GetNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodePool'
type MockServerInterface_GetNodePool_Call struct {
	*mock.Call
}

// GetNodePool is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - cluster schema.ClusterPathParam
//   - name schema.ResourcePathParam
func (_e *MockServerInterface_Expecter) GetNodePool(w interface{}, r interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}) *MockServerInterface_GetNodePool_Call {
	return &MockServerInterface_GetNodePool_Call{Call: _e.mock.On("GetNodePool", w, r, tenant, workspace, cluster, name)}
}

func (_c *MockServerInterface_GetNodePool_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, cluster schema.ClusterPathParam, name schema.ResourcePathParam)) *MockServerInterface_GetNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ClusterPathParam), args[5].(schema.ResourcePathParam))
	})
	return _c
}

func (_c *MockServerInterface_GetNodePool_Call) Return() *MockServerInterface_GetNodePool_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetNodePool_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ClusterPathParam, schema.ResourcePathParam)) *MockServerInterface_GetNodePool_Call {
	_c.Run(run)
	return _c
}

// ListClusters provides a mock function with given fields: w, r, tenant, workspace, params
func (_m *MockServerInterface) ListClusters(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params kubernetes.ListClustersParams) {
	_m.Called(w, r, tenant, workspace, params)
}

// MockServerInterface_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type MockServerInterface_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - params kubernetes.ListClustersParams
func (_e *MockServerInterface_Expecter) ListClusters(w interface{}, r interface{}, tenant interface{}, workspace interface{}, params interface{}) *MockServerInterface_ListClusters_Call {
	return &MockServerInterface_ListClusters_Call{Call: _e.mock.On("ListClusters", w, r, tenant, workspace, params)}
}

func (_c *MockServerInterface_ListClusters_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, params kubernetes.ListClustersParams)) *MockServerInterface_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(kubernetes.ListClustersParams))
	})
	return _c
}

func (_c *MockServerInterface_ListClusters_Call) Return() *MockServerInterface_ListClusters_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListClusters_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, kubernetes.ListClustersParams)) *MockServerInterface_ListClusters_Call {
	_c.Run(run)
	return _c
}

// ListNodePools provides a mock function with given fields: w, r, tenant, workspace, cluster, params
func (_m *MockServerInterface) ListNodePools(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, cluster schema.ClusterPathParam, params kubernetes.ListNodePoolsParams) {
	_m.Called(w, r, tenant, workspace, cluster, params)
}

// MockServerInterface_ListNodePools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodePools'
type MockServerInterface_ListNodePools_Call struct {
	*mock.Call
}

// ListNodePools is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - tenant schema.TenantPathParam
//   - workspace schema.WorkspacePathParam
//   - cluster schema.ClusterPathParam
//   - params kubernetes.ListNodePoolsParams
func (_e *MockServerInterface_Expecter) ListNodePools(w interface{}, r interface{}, tenant interface{}, workspace interface{}, cluster interface{}, params interface{}) *MockServerInterface_ListNodePools_Call {
	return &MockServerInterface_ListNodePools_Call{Call: _e.mock.On("ListNodePools", w, r, tenant, workspace, cluster, params)}
}

func (_c *MockServerInterface_ListNodePools_Call) Run(run func(w http.ResponseWriter, r *http.Request, tenant schema.TenantPathParam, workspace schema.WorkspacePathParam, cluster schema.ClusterPathParam, params kubernetes.ListNodePoolsParams)) *MockServerInterface_ListNodePools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(schema.TenantPathParam), args[3].(schema.WorkspacePathParam), args[4].(schema.ClusterPathParam), args[5].(kubernetes.ListNodePoolsParams))
	})
	return _c
}

func (_c *MockServerInterface_ListNodePools_Call) Return() *MockServerInterface_ListNodePools_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_ListNodePools_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, schema.TenantPathParam, schema.WorkspacePathParam, schema.ClusterPathParam, kubernetes.ListNodePoolsParams)) *MockServerInterface_ListNodePools_Call {
	_c.Run(run)
	return _c
}

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
