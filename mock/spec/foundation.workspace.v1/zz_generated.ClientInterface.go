// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockworkspace

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	workspace "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/foundation.workspace.v1"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateWorkspace provides a mock function with given fields: ctx, tenant, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateWorkspace(ctx context.Context, tenant workspace.Tenant, name workspace.ResourceName, params *workspace.CreateOrUpdateWorkspaceParams, body workspace.CreateOrUpdateWorkspaceJSONRequestBody, reqEditors ...workspace.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateWorkspace")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.CreateOrUpdateWorkspaceParams, workspace.CreateOrUpdateWorkspaceJSONRequestBody, ...workspace.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.CreateOrUpdateWorkspaceParams, workspace.CreateOrUpdateWorkspaceJSONRequestBody, ...workspace.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.CreateOrUpdateWorkspaceParams, workspace.CreateOrUpdateWorkspaceJSONRequestBody, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateWorkspace'
type MockClientInterface_CreateOrUpdateWorkspace_Call struct {
	*mock.Call
}

// CreateOrUpdateWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant workspace.Tenant
//   - name workspace.ResourceName
//   - params *workspace.CreateOrUpdateWorkspaceParams
//   - body workspace.CreateOrUpdateWorkspaceJSONRequestBody
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateWorkspace(ctx interface{}, tenant interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateWorkspace_Call {
	return &MockClientInterface_CreateOrUpdateWorkspace_Call{Call: _e.mock.On("CreateOrUpdateWorkspace",
		append([]interface{}{ctx, tenant, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateWorkspace_Call) Run(run func(ctx context.Context, tenant workspace.Tenant, name workspace.ResourceName, params *workspace.CreateOrUpdateWorkspaceParams, body workspace.CreateOrUpdateWorkspaceJSONRequestBody, reqEditors ...workspace.RequestEditorFn)) *MockClientInterface_CreateOrUpdateWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(workspace.Tenant), args[2].(workspace.ResourceName), args[3].(*workspace.CreateOrUpdateWorkspaceParams), args[4].(workspace.CreateOrUpdateWorkspaceJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateWorkspace_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateWorkspace_Call) RunAndReturn(run func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.CreateOrUpdateWorkspaceParams, workspace.CreateOrUpdateWorkspaceJSONRequestBody, ...workspace.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateWorkspaceWithBody provides a mock function with given fields: ctx, tenant, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateWorkspaceWithBody(ctx context.Context, tenant workspace.Tenant, name workspace.ResourceName, params *workspace.CreateOrUpdateWorkspaceParams, contentType string, body io.Reader, reqEditors ...workspace.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateWorkspaceWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.CreateOrUpdateWorkspaceParams, string, io.Reader, ...workspace.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.CreateOrUpdateWorkspaceParams, string, io.Reader, ...workspace.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.CreateOrUpdateWorkspaceParams, string, io.Reader, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateWorkspaceWithBody'
type MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateWorkspaceWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant workspace.Tenant
//   - name workspace.ResourceName
//   - params *workspace.CreateOrUpdateWorkspaceParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateWorkspaceWithBody(ctx interface{}, tenant interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call {
	return &MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call{Call: _e.mock.On("CreateOrUpdateWorkspaceWithBody",
		append([]interface{}{ctx, tenant, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call) Run(run func(ctx context.Context, tenant workspace.Tenant, name workspace.ResourceName, params *workspace.CreateOrUpdateWorkspaceParams, contentType string, body io.Reader, reqEditors ...workspace.RequestEditorFn)) *MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(workspace.Tenant), args[2].(workspace.ResourceName), args[3].(*workspace.CreateOrUpdateWorkspaceParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call) RunAndReturn(run func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.CreateOrUpdateWorkspaceParams, string, io.Reader, ...workspace.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateWorkspaceWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkspace provides a mock function with given fields: ctx, tenant, name, params, reqEditors
func (_m *MockClientInterface) DeleteWorkspace(ctx context.Context, tenant workspace.Tenant, name workspace.ResourceName, params *workspace.DeleteWorkspaceParams, reqEditors ...workspace.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspace")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.DeleteWorkspaceParams, ...workspace.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.DeleteWorkspaceParams, ...workspace.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.DeleteWorkspaceParams, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkspace'
type MockClientInterface_DeleteWorkspace_Call struct {
	*mock.Call
}

// DeleteWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant workspace.Tenant
//   - name workspace.ResourceName
//   - params *workspace.DeleteWorkspaceParams
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteWorkspace(ctx interface{}, tenant interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteWorkspace_Call {
	return &MockClientInterface_DeleteWorkspace_Call{Call: _e.mock.On("DeleteWorkspace",
		append([]interface{}{ctx, tenant, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteWorkspace_Call) Run(run func(ctx context.Context, tenant workspace.Tenant, name workspace.ResourceName, params *workspace.DeleteWorkspaceParams, reqEditors ...workspace.RequestEditorFn)) *MockClientInterface_DeleteWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(workspace.Tenant), args[2].(workspace.ResourceName), args[3].(*workspace.DeleteWorkspaceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteWorkspace_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteWorkspace_Call) RunAndReturn(run func(context.Context, workspace.Tenant, workspace.ResourceName, *workspace.DeleteWorkspaceParams, ...workspace.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspace provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientInterface) GetWorkspace(ctx context.Context, tenant workspace.Tenant, name workspace.ResourceName, reqEditors ...workspace.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspace")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, workspace.ResourceName, ...workspace.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, workspace.ResourceName, ...workspace.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.Tenant, workspace.ResourceName, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspace'
type MockClientInterface_GetWorkspace_Call struct {
	*mock.Call
}

// GetWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant workspace.Tenant
//   - name workspace.ResourceName
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetWorkspace(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetWorkspace_Call {
	return &MockClientInterface_GetWorkspace_Call{Call: _e.mock.On("GetWorkspace",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetWorkspace_Call) Run(run func(ctx context.Context, tenant workspace.Tenant, name workspace.ResourceName, reqEditors ...workspace.RequestEditorFn)) *MockClientInterface_GetWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(workspace.Tenant), args[2].(workspace.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetWorkspace_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetWorkspace_Call) RunAndReturn(run func(context.Context, workspace.Tenant, workspace.ResourceName, ...workspace.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkspaces provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientInterface) ListWorkspaces(ctx context.Context, tenant workspace.Tenant, params *workspace.ListWorkspacesParams, reqEditors ...workspace.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaces")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, *workspace.ListWorkspacesParams, ...workspace.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Tenant, *workspace.ListWorkspacesParams, ...workspace.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.Tenant, *workspace.ListWorkspacesParams, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkspaces'
type MockClientInterface_ListWorkspaces_Call struct {
	*mock.Call
}

// ListWorkspaces is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant workspace.Tenant
//   - params *workspace.ListWorkspacesParams
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListWorkspaces(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListWorkspaces_Call {
	return &MockClientInterface_ListWorkspaces_Call{Call: _e.mock.On("ListWorkspaces",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListWorkspaces_Call) Run(run func(ctx context.Context, tenant workspace.Tenant, params *workspace.ListWorkspacesParams, reqEditors ...workspace.RequestEditorFn)) *MockClientInterface_ListWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(workspace.Tenant), args[2].(*workspace.ListWorkspacesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListWorkspaces_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListWorkspaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListWorkspaces_Call) RunAndReturn(run func(context.Context, workspace.Tenant, *workspace.ListWorkspacesParams, ...workspace.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
