// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockactivitylog

import (
	context "context"

	activitylog "github.com/eu-sovereign-cloud/go-sdk/pkg/spec/extensions.activitylog.v1beta1"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// ListActivityLogs provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListActivityLogs(ctx context.Context, tenant activitylog.Tenant, workspace activitylog.Workspace, params *activitylog.ListActivityLogsParams, reqEditors ...activitylog.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListActivityLogs")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, activitylog.Tenant, activitylog.Workspace, *activitylog.ListActivityLogsParams, ...activitylog.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, activitylog.Tenant, activitylog.Workspace, *activitylog.ListActivityLogsParams, ...activitylog.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, activitylog.Tenant, activitylog.Workspace, *activitylog.ListActivityLogsParams, ...activitylog.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListActivityLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActivityLogs'
type MockClientInterface_ListActivityLogs_Call struct {
	*mock.Call
}

// ListActivityLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant activitylog.Tenant
//   - workspace activitylog.Workspace
//   - params *activitylog.ListActivityLogsParams
//   - reqEditors ...activitylog.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListActivityLogs(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListActivityLogs_Call {
	return &MockClientInterface_ListActivityLogs_Call{Call: _e.mock.On("ListActivityLogs",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListActivityLogs_Call) Run(run func(ctx context.Context, tenant activitylog.Tenant, workspace activitylog.Workspace, params *activitylog.ListActivityLogsParams, reqEditors ...activitylog.RequestEditorFn)) *MockClientInterface_ListActivityLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]activitylog.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(activitylog.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(activitylog.Tenant), args[2].(activitylog.Workspace), args[3].(*activitylog.ListActivityLogsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListActivityLogs_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListActivityLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListActivityLogs_Call) RunAndReturn(run func(context.Context, activitylog.Tenant, activitylog.Workspace, *activitylog.ListActivityLogsParams, ...activitylog.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListActivityLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
