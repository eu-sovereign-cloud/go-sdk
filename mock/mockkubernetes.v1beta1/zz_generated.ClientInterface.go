// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockkubernetes

import (
	context "context"
	http "net/http"

	io "io"

	kubernetes "github.com/eu-sovereign-cloud/go-sdk/pkg/extensions.kubernetes.v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateCluster provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateCluster(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateClusterParams, body kubernetes.CreateOrUpdateClusterJSONRequestBody, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateCluster")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, kubernetes.CreateOrUpdateClusterJSONRequestBody, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, kubernetes.CreateOrUpdateClusterJSONRequestBody, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, kubernetes.CreateOrUpdateClusterJSONRequestBody, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateCluster'
type MockClientInterface_CreateOrUpdateCluster_Call struct {
	*mock.Call
}

// CreateOrUpdateCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - name kubernetes.ResourceName
//   - params *kubernetes.CreateOrUpdateClusterParams
//   - body kubernetes.CreateOrUpdateClusterJSONRequestBody
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateCluster(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateCluster_Call {
	return &MockClientInterface_CreateOrUpdateCluster_Call{Call: _e.mock.On("CreateOrUpdateCluster",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateCluster_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateClusterParams, body kubernetes.CreateOrUpdateClusterJSONRequestBody, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_CreateOrUpdateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.ResourceName), args[4].(*kubernetes.CreateOrUpdateClusterParams), args[5].(kubernetes.CreateOrUpdateClusterJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateCluster_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateCluster_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, kubernetes.CreateOrUpdateClusterJSONRequestBody, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateClusterWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateClusterWithBody(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateClusterParams, contentType string, body io.Reader, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateClusterWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, string, io.Reader, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, string, io.Reader, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, string, io.Reader, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateClusterWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateClusterWithBody'
type MockClientInterface_CreateOrUpdateClusterWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateClusterWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - name kubernetes.ResourceName
//   - params *kubernetes.CreateOrUpdateClusterParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateClusterWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateClusterWithBody_Call {
	return &MockClientInterface_CreateOrUpdateClusterWithBody_Call{Call: _e.mock.On("CreateOrUpdateClusterWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateClusterWithBody_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateClusterParams, contentType string, body io.Reader, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_CreateOrUpdateClusterWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.ResourceName), args[4].(*kubernetes.CreateOrUpdateClusterParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateClusterWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateClusterWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateClusterWithBody_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.CreateOrUpdateClusterParams, string, io.Reader, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateClusterWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNodePool provides a mock function with given fields: ctx, tenant, workspace, cluster, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateNodePool(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateNodePoolParams, body kubernetes.CreateOrUpdateNodePoolJSONRequestBody, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNodePool")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, kubernetes.CreateOrUpdateNodePoolJSONRequestBody, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, cluster, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, kubernetes.CreateOrUpdateNodePoolJSONRequestBody, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, cluster, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, kubernetes.CreateOrUpdateNodePoolJSONRequestBody, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNodePool'
type MockClientInterface_CreateOrUpdateNodePool_Call struct {
	*mock.Call
}

// CreateOrUpdateNodePool is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - name kubernetes.ResourceName
//   - params *kubernetes.CreateOrUpdateNodePoolParams
//   - body kubernetes.CreateOrUpdateNodePoolJSONRequestBody
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateNodePool(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateNodePool_Call {
	return &MockClientInterface_CreateOrUpdateNodePool_Call{Call: _e.mock.On("CreateOrUpdateNodePool",
		append([]interface{}{ctx, tenant, workspace, cluster, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateNodePool_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateNodePoolParams, body kubernetes.CreateOrUpdateNodePoolJSONRequestBody, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_CreateOrUpdateNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(kubernetes.ResourceName), args[5].(*kubernetes.CreateOrUpdateNodePoolParams), args[6].(kubernetes.CreateOrUpdateNodePoolJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNodePool_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateNodePool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNodePool_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, kubernetes.CreateOrUpdateNodePoolJSONRequestBody, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateNodePool_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateNodePoolWithBody provides a mock function with given fields: ctx, tenant, workspace, cluster, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateNodePoolWithBody(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateNodePoolParams, contentType string, body io.Reader, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateNodePoolWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, string, io.Reader, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, cluster, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, string, io.Reader, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, cluster, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, string, io.Reader, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateNodePoolWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateNodePoolWithBody'
type MockClientInterface_CreateOrUpdateNodePoolWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateNodePoolWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - name kubernetes.ResourceName
//   - params *kubernetes.CreateOrUpdateNodePoolParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateNodePoolWithBody(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateNodePoolWithBody_Call {
	return &MockClientInterface_CreateOrUpdateNodePoolWithBody_Call{Call: _e.mock.On("CreateOrUpdateNodePoolWithBody",
		append([]interface{}{ctx, tenant, workspace, cluster, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateNodePoolWithBody_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.CreateOrUpdateNodePoolParams, contentType string, body io.Reader, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_CreateOrUpdateNodePoolWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-8)
		for i, a := range args[8:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(kubernetes.ResourceName), args[5].(*kubernetes.CreateOrUpdateNodePoolParams), args[6].(string), args[7].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNodePoolWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateNodePoolWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateNodePoolWithBody_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.CreateOrUpdateNodePoolParams, string, io.Reader, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateNodePoolWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCluster provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteCluster(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.DeleteClusterParams, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.DeleteClusterParams, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.DeleteClusterParams, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.DeleteClusterParams, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type MockClientInterface_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - name kubernetes.ResourceName
//   - params *kubernetes.DeleteClusterParams
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteCluster(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteCluster_Call {
	return &MockClientInterface_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteCluster_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, params *kubernetes.DeleteClusterParams, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.ResourceName), args[4].(*kubernetes.DeleteClusterParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteCluster_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteCluster_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, *kubernetes.DeleteClusterParams, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNodePool provides a mock function with given fields: ctx, tenant, workspace, cluster, name, params, reqEditors
func (_m *MockClientInterface) DeleteNodePool(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.DeleteNodePoolParams, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNodePool")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.DeleteNodePoolParams, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, cluster, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.DeleteNodePoolParams, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, cluster, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.DeleteNodePoolParams, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNodePool'
type MockClientInterface_DeleteNodePool_Call struct {
	*mock.Call
}

// DeleteNodePool is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - name kubernetes.ResourceName
//   - params *kubernetes.DeleteNodePoolParams
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteNodePool(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteNodePool_Call {
	return &MockClientInterface_DeleteNodePool_Call{Call: _e.mock.On("DeleteNodePool",
		append([]interface{}{ctx, tenant, workspace, cluster, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteNodePool_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, params *kubernetes.DeleteNodePoolParams, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_DeleteNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(kubernetes.ResourceName), args[5].(*kubernetes.DeleteNodePoolParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteNodePool_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteNodePool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteNodePool_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, *kubernetes.DeleteNodePoolParams, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteNodePool_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetCluster(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type MockClientInterface_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - name kubernetes.ResourceName
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetCluster(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetCluster_Call {
	return &MockClientInterface_GetCluster_Call{Call: _e.mock.On("GetCluster",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetCluster_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, name kubernetes.ResourceName, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetCluster_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetCluster_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodePool provides a mock function with given fields: ctx, tenant, workspace, cluster, name, reqEditors
func (_m *MockClientInterface) GetNodePool(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNodePool")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, cluster, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, cluster, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodePool'
type MockClientInterface_GetNodePool_Call struct {
	*mock.Call
}

// GetNodePool is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - name kubernetes.ResourceName
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetNodePool(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetNodePool_Call {
	return &MockClientInterface_GetNodePool_Call{Call: _e.mock.On("GetNodePool",
		append([]interface{}{ctx, tenant, workspace, cluster, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetNodePool_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, name kubernetes.ResourceName, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_GetNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(kubernetes.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetNodePool_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetNodePool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetNodePool_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, kubernetes.ResourceName, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetNodePool_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusters provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListClusters(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, params *kubernetes.ListClustersParams, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, *kubernetes.ListClustersParams, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, *kubernetes.ListClustersParams, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, *kubernetes.ListClustersParams, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type MockClientInterface_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - params *kubernetes.ListClustersParams
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListClusters(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListClusters_Call {
	return &MockClientInterface_ListClusters_Call{Call: _e.mock.On("ListClusters",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListClusters_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, params *kubernetes.ListClustersParams, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(*kubernetes.ListClustersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListClusters_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListClusters_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, *kubernetes.ListClustersParams, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodePools provides a mock function with given fields: ctx, tenant, workspace, cluster, params, reqEditors
func (_m *MockClientInterface) ListNodePools(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, params *kubernetes.ListNodePoolsParams, reqEditors ...kubernetes.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, cluster, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNodePools")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, *kubernetes.ListNodePoolsParams, ...kubernetes.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, cluster, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, *kubernetes.ListNodePoolsParams, ...kubernetes.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, cluster, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, *kubernetes.ListNodePoolsParams, ...kubernetes.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, cluster, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListNodePools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodePools'
type MockClientInterface_ListNodePools_Call struct {
	*mock.Call
}

// ListNodePools is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant kubernetes.Tenant
//   - workspace kubernetes.Workspace
//   - cluster kubernetes.Cluster
//   - params *kubernetes.ListNodePoolsParams
//   - reqEditors ...kubernetes.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListNodePools(ctx interface{}, tenant interface{}, workspace interface{}, cluster interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListNodePools_Call {
	return &MockClientInterface_ListNodePools_Call{Call: _e.mock.On("ListNodePools",
		append([]interface{}{ctx, tenant, workspace, cluster, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListNodePools_Call) Run(run func(ctx context.Context, tenant kubernetes.Tenant, workspace kubernetes.Workspace, cluster kubernetes.Cluster, params *kubernetes.ListNodePoolsParams, reqEditors ...kubernetes.RequestEditorFn)) *MockClientInterface_ListNodePools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kubernetes.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(kubernetes.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(kubernetes.Tenant), args[2].(kubernetes.Workspace), args[3].(kubernetes.Cluster), args[4].(*kubernetes.ListNodePoolsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListNodePools_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListNodePools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListNodePools_Call) RunAndReturn(run func(context.Context, kubernetes.Tenant, kubernetes.Workspace, kubernetes.Cluster, *kubernetes.ListNodePoolsParams, ...kubernetes.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListNodePools_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
