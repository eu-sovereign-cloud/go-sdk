// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockworkspace

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	workspace "github.com/eu-sovereign-cloud/go-sdk/pkg/foundation.workspace.v1"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateWorkspaceWithBodyWithResponse provides a mock function with given fields: ctx, id, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateWorkspaceWithBodyWithResponse(ctx context.Context, id string, name string, params *workspace.CreateOrUpdateWorkspaceParams, contentType string, body io.Reader, reqEditors ...workspace.RequestEditorFn) (*workspace.CreateOrUpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateWorkspaceWithBodyWithResponse")
	}

	var r0 *workspace.CreateOrUpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *workspace.CreateOrUpdateWorkspaceParams, string, io.Reader, ...workspace.RequestEditorFn) (*workspace.CreateOrUpdateWorkspaceResponse, error)); ok {
		return rf(ctx, id, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *workspace.CreateOrUpdateWorkspaceParams, string, io.Reader, ...workspace.RequestEditorFn) *workspace.CreateOrUpdateWorkspaceResponse); ok {
		r0 = rf(ctx, id, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.CreateOrUpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *workspace.CreateOrUpdateWorkspaceParams, string, io.Reader, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateWorkspaceWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateWorkspaceWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - params *workspace.CreateOrUpdateWorkspaceParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateWorkspaceWithBodyWithResponse(ctx interface{}, id interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateWorkspaceWithBodyWithResponse",
		append([]interface{}{ctx, id, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call) Run(run func(ctx context.Context, id string, name string, params *workspace.CreateOrUpdateWorkspaceParams, contentType string, body io.Reader, reqEditors ...workspace.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*workspace.CreateOrUpdateWorkspaceParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call) Return(_a0 *workspace.CreateOrUpdateWorkspaceResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, string, *workspace.CreateOrUpdateWorkspaceParams, string, io.Reader, ...workspace.RequestEditorFn) (*workspace.CreateOrUpdateWorkspaceResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateWorkspaceWithResponse provides a mock function with given fields: ctx, id, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateWorkspaceWithResponse(ctx context.Context, id string, name string, params *workspace.CreateOrUpdateWorkspaceParams, body workspace.Workspace, reqEditors ...workspace.RequestEditorFn) (*workspace.CreateOrUpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateWorkspaceWithResponse")
	}

	var r0 *workspace.CreateOrUpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *workspace.CreateOrUpdateWorkspaceParams, workspace.Workspace, ...workspace.RequestEditorFn) (*workspace.CreateOrUpdateWorkspaceResponse, error)); ok {
		return rf(ctx, id, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *workspace.CreateOrUpdateWorkspaceParams, workspace.Workspace, ...workspace.RequestEditorFn) *workspace.CreateOrUpdateWorkspaceResponse); ok {
		r0 = rf(ctx, id, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.CreateOrUpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *workspace.CreateOrUpdateWorkspaceParams, workspace.Workspace, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateWorkspaceWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateWorkspaceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - params *workspace.CreateOrUpdateWorkspaceParams
//   - body workspace.Workspace
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateWorkspaceWithResponse(ctx interface{}, id interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call{Call: _e.mock.On("CreateOrUpdateWorkspaceWithResponse",
		append([]interface{}{ctx, id, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call) Run(run func(ctx context.Context, id string, name string, params *workspace.CreateOrUpdateWorkspaceParams, body workspace.Workspace, reqEditors ...workspace.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*workspace.CreateOrUpdateWorkspaceParams), args[4].(workspace.Workspace), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call) Return(_a0 *workspace.CreateOrUpdateWorkspaceResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call) RunAndReturn(run func(context.Context, string, string, *workspace.CreateOrUpdateWorkspaceParams, workspace.Workspace, ...workspace.RequestEditorFn) (*workspace.CreateOrUpdateWorkspaceResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateWorkspaceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkspaceWithResponse provides a mock function with given fields: ctx, id, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteWorkspaceWithResponse(ctx context.Context, id string, name string, params *workspace.DeleteWorkspaceParams, reqEditors ...workspace.RequestEditorFn) (*workspace.DeleteWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceWithResponse")
	}

	var r0 *workspace.DeleteWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *workspace.DeleteWorkspaceParams, ...workspace.RequestEditorFn) (*workspace.DeleteWorkspaceResponse, error)); ok {
		return rf(ctx, id, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *workspace.DeleteWorkspaceParams, ...workspace.RequestEditorFn) *workspace.DeleteWorkspaceResponse); ok {
		r0 = rf(ctx, id, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.DeleteWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *workspace.DeleteWorkspaceParams, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkspaceWithResponse'
type MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call struct {
	*mock.Call
}

// DeleteWorkspaceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - params *workspace.DeleteWorkspaceParams
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteWorkspaceWithResponse(ctx interface{}, id interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call{Call: _e.mock.On("DeleteWorkspaceWithResponse",
		append([]interface{}{ctx, id, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call) Run(run func(ctx context.Context, id string, name string, params *workspace.DeleteWorkspaceParams, reqEditors ...workspace.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*workspace.DeleteWorkspaceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call) Return(_a0 *workspace.DeleteWorkspaceResponse, _a1 error) *MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call) RunAndReturn(run func(context.Context, string, string, *workspace.DeleteWorkspaceParams, ...workspace.RequestEditorFn) (*workspace.DeleteWorkspaceResponse, error)) *MockClientWithResponsesInterface_DeleteWorkspaceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceWithResponse provides a mock function with given fields: ctx, id, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetWorkspaceWithResponse(ctx context.Context, id string, name string, reqEditors ...workspace.RequestEditorFn) (*workspace.GetWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceWithResponse")
	}

	var r0 *workspace.GetWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...workspace.RequestEditorFn) (*workspace.GetWorkspaceResponse, error)); ok {
		return rf(ctx, id, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...workspace.RequestEditorFn) *workspace.GetWorkspaceResponse); ok {
		r0 = rf(ctx, id, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.GetWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceWithResponse'
type MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call struct {
	*mock.Call
}

// GetWorkspaceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetWorkspaceWithResponse(ctx interface{}, id interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call {
	return &MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call{Call: _e.mock.On("GetWorkspaceWithResponse",
		append([]interface{}{ctx, id, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call) Run(run func(ctx context.Context, id string, name string, reqEditors ...workspace.RequestEditorFn)) *MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call) Return(_a0 *workspace.GetWorkspaceResponse, _a1 error) *MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call) RunAndReturn(run func(context.Context, string, string, ...workspace.RequestEditorFn) (*workspace.GetWorkspaceResponse, error)) *MockClientWithResponsesInterface_GetWorkspaceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkspacesWithResponse provides a mock function with given fields: ctx, id, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListWorkspacesWithResponse(ctx context.Context, id string, params *workspace.ListWorkspacesParams, reqEditors ...workspace.RequestEditorFn) (*workspace.ListWorkspacesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspacesWithResponse")
	}

	var r0 *workspace.ListWorkspacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *workspace.ListWorkspacesParams, ...workspace.RequestEditorFn) (*workspace.ListWorkspacesResponse, error)); ok {
		return rf(ctx, id, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *workspace.ListWorkspacesParams, ...workspace.RequestEditorFn) *workspace.ListWorkspacesResponse); ok {
		r0 = rf(ctx, id, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.ListWorkspacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *workspace.ListWorkspacesParams, ...workspace.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkspacesWithResponse'
type MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call struct {
	*mock.Call
}

// ListWorkspacesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - params *workspace.ListWorkspacesParams
//   - reqEditors ...workspace.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListWorkspacesWithResponse(ctx interface{}, id interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call {
	return &MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call{Call: _e.mock.On("ListWorkspacesWithResponse",
		append([]interface{}{ctx, id, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call) Run(run func(ctx context.Context, id string, params *workspace.ListWorkspacesParams, reqEditors ...workspace.RequestEditorFn)) *MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workspace.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(workspace.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*workspace.ListWorkspacesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call) Return(_a0 *workspace.ListWorkspacesResponse, _a1 error) *MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call) RunAndReturn(run func(context.Context, string, *workspace.ListWorkspacesParams, ...workspace.RequestEditorFn) (*workspace.ListWorkspacesResponse, error)) *MockClientWithResponsesInterface_ListWorkspacesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
