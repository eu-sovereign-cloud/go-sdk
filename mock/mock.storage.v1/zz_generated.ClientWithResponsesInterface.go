// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockstorage

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/eu-sovereign-cloud/go-sdk/pkg/foundation.storage.v1"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateBlockStorageWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateBlockStorageWithBodyWithResponse(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.CreateOrUpdateBlockStorageParams, contentType string, body io.Reader, reqEditors ...storage.RequestEditorFn) (*storage.CreateOrUpdateBlockStorageResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateBlockStorageWithBodyWithResponse")
	}

	var r0 *storage.CreateOrUpdateBlockStorageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, string, io.Reader, ...storage.RequestEditorFn) (*storage.CreateOrUpdateBlockStorageResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, string, io.Reader, ...storage.RequestEditorFn) *storage.CreateOrUpdateBlockStorageResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.CreateOrUpdateBlockStorageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, string, io.Reader, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateBlockStorageWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateBlockStorageWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - params *storage.CreateOrUpdateBlockStorageParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateBlockStorageWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateBlockStorageWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.CreateOrUpdateBlockStorageParams, contentType string, body io.Reader, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(storage.ResourceName), args[4].(*storage.CreateOrUpdateBlockStorageParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call) Return(_a0 *storage.CreateOrUpdateBlockStorageResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, string, io.Reader, ...storage.RequestEditorFn) (*storage.CreateOrUpdateBlockStorageResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateBlockStorageWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateBlockStorageWithResponse(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.CreateOrUpdateBlockStorageParams, body storage.CreateOrUpdateBlockStorageJSONRequestBody, reqEditors ...storage.RequestEditorFn) (*storage.CreateOrUpdateBlockStorageResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateBlockStorageWithResponse")
	}

	var r0 *storage.CreateOrUpdateBlockStorageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, storage.CreateOrUpdateBlockStorageJSONRequestBody, ...storage.RequestEditorFn) (*storage.CreateOrUpdateBlockStorageResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, storage.CreateOrUpdateBlockStorageJSONRequestBody, ...storage.RequestEditorFn) *storage.CreateOrUpdateBlockStorageResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.CreateOrUpdateBlockStorageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, storage.CreateOrUpdateBlockStorageJSONRequestBody, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateBlockStorageWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateBlockStorageWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - params *storage.CreateOrUpdateBlockStorageParams
//   - body storage.CreateOrUpdateBlockStorageJSONRequestBody
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateBlockStorageWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call{Call: _e.mock.On("CreateOrUpdateBlockStorageWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.CreateOrUpdateBlockStorageParams, body storage.CreateOrUpdateBlockStorageJSONRequestBody, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(storage.ResourceName), args[4].(*storage.CreateOrUpdateBlockStorageParams), args[5].(storage.CreateOrUpdateBlockStorageJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call) Return(_a0 *storage.CreateOrUpdateBlockStorageResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, storage.CreateOrUpdateBlockStorageJSONRequestBody, ...storage.RequestEditorFn) (*storage.CreateOrUpdateBlockStorageResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateBlockStorageWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateImageWithBodyWithResponse provides a mock function with given fields: ctx, tenant, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateImageWithBodyWithResponse(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.CreateOrUpdateImageParams, contentType string, body io.Reader, reqEditors ...storage.RequestEditorFn) (*storage.CreateOrUpdateImageResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateImageWithBodyWithResponse")
	}

	var r0 *storage.CreateOrUpdateImageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, string, io.Reader, ...storage.RequestEditorFn) (*storage.CreateOrUpdateImageResponse, error)); ok {
		return rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, string, io.Reader, ...storage.RequestEditorFn) *storage.CreateOrUpdateImageResponse); ok {
		r0 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.CreateOrUpdateImageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, string, io.Reader, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateImageWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateImageWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - params *storage.CreateOrUpdateImageParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateImageWithBodyWithResponse(ctx interface{}, tenant interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateImageWithBodyWithResponse",
		append([]interface{}{ctx, tenant, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.CreateOrUpdateImageParams, contentType string, body io.Reader, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), args[3].(*storage.CreateOrUpdateImageParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call) Return(_a0 *storage.CreateOrUpdateImageResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, string, io.Reader, ...storage.RequestEditorFn) (*storage.CreateOrUpdateImageResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateImageWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateImageWithResponse provides a mock function with given fields: ctx, tenant, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateImageWithResponse(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.CreateOrUpdateImageParams, body storage.CreateOrUpdateImageJSONRequestBody, reqEditors ...storage.RequestEditorFn) (*storage.CreateOrUpdateImageResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateImageWithResponse")
	}

	var r0 *storage.CreateOrUpdateImageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, storage.CreateOrUpdateImageJSONRequestBody, ...storage.RequestEditorFn) (*storage.CreateOrUpdateImageResponse, error)); ok {
		return rf(ctx, tenant, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, storage.CreateOrUpdateImageJSONRequestBody, ...storage.RequestEditorFn) *storage.CreateOrUpdateImageResponse); ok {
		r0 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.CreateOrUpdateImageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, storage.CreateOrUpdateImageJSONRequestBody, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateImageWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateImageWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - params *storage.CreateOrUpdateImageParams
//   - body storage.CreateOrUpdateImageJSONRequestBody
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateImageWithResponse(ctx interface{}, tenant interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call{Call: _e.mock.On("CreateOrUpdateImageWithResponse",
		append([]interface{}{ctx, tenant, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.CreateOrUpdateImageParams, body storage.CreateOrUpdateImageJSONRequestBody, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), args[3].(*storage.CreateOrUpdateImageParams), args[4].(storage.CreateOrUpdateImageJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call) Return(_a0 *storage.CreateOrUpdateImageResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, storage.CreateOrUpdateImageJSONRequestBody, ...storage.RequestEditorFn) (*storage.CreateOrUpdateImageResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateImageWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBlockStorageWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteBlockStorageWithResponse(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.DeleteBlockStorageParams, reqEditors ...storage.RequestEditorFn) (*storage.DeleteBlockStorageResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlockStorageWithResponse")
	}

	var r0 *storage.DeleteBlockStorageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.DeleteBlockStorageParams, ...storage.RequestEditorFn) (*storage.DeleteBlockStorageResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.DeleteBlockStorageParams, ...storage.RequestEditorFn) *storage.DeleteBlockStorageResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.DeleteBlockStorageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.DeleteBlockStorageParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlockStorageWithResponse'
type MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call struct {
	*mock.Call
}

// DeleteBlockStorageWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - params *storage.DeleteBlockStorageParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteBlockStorageWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call{Call: _e.mock.On("DeleteBlockStorageWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.DeleteBlockStorageParams, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(storage.ResourceName), args[4].(*storage.DeleteBlockStorageParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call) Return(_a0 *storage.DeleteBlockStorageResponse, _a1 error) *MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.DeleteBlockStorageParams, ...storage.RequestEditorFn) (*storage.DeleteBlockStorageResponse, error)) *MockClientWithResponsesInterface_DeleteBlockStorageWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteImageWithResponse provides a mock function with given fields: ctx, tenant, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteImageWithResponse(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.DeleteImageParams, reqEditors ...storage.RequestEditorFn) (*storage.DeleteImageResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImageWithResponse")
	}

	var r0 *storage.DeleteImageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.DeleteImageParams, ...storage.RequestEditorFn) (*storage.DeleteImageResponse, error)); ok {
		return rf(ctx, tenant, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.DeleteImageParams, ...storage.RequestEditorFn) *storage.DeleteImageResponse); ok {
		r0 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.DeleteImageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.DeleteImageParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteImageWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteImageWithResponse'
type MockClientWithResponsesInterface_DeleteImageWithResponse_Call struct {
	*mock.Call
}

// DeleteImageWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - params *storage.DeleteImageParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteImageWithResponse(ctx interface{}, tenant interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteImageWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteImageWithResponse_Call{Call: _e.mock.On("DeleteImageWithResponse",
		append([]interface{}{ctx, tenant, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteImageWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.DeleteImageParams, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteImageWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), args[3].(*storage.DeleteImageParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteImageWithResponse_Call) Return(_a0 *storage.DeleteImageResponse, _a1 error) *MockClientWithResponsesInterface_DeleteImageWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteImageWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, *storage.DeleteImageParams, ...storage.RequestEditorFn) (*storage.DeleteImageResponse, error)) *MockClientWithResponsesInterface_DeleteImageWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockStorageWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetBlockStorageWithResponse(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, reqEditors ...storage.RequestEditorFn) (*storage.GetBlockStorageResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockStorageWithResponse")
	}

	var r0 *storage.GetBlockStorageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, ...storage.RequestEditorFn) (*storage.GetBlockStorageResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, ...storage.RequestEditorFn) *storage.GetBlockStorageResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.GetBlockStorageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockStorageWithResponse'
type MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call struct {
	*mock.Call
}

// GetBlockStorageWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetBlockStorageWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call {
	return &MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call{Call: _e.mock.On("GetBlockStorageWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(storage.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call) Return(_a0 *storage.GetBlockStorageResponse, _a1 error) *MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, ...storage.RequestEditorFn) (*storage.GetBlockStorageResponse, error)) *MockClientWithResponsesInterface_GetBlockStorageWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetImageWithResponse provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetImageWithResponse(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, reqEditors ...storage.RequestEditorFn) (*storage.GetImageResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImageWithResponse")
	}

	var r0 *storage.GetImageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) (*storage.GetImageResponse, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) *storage.GetImageResponse); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.GetImageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetImageWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImageWithResponse'
type MockClientWithResponsesInterface_GetImageWithResponse_Call struct {
	*mock.Call
}

// GetImageWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetImageWithResponse(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetImageWithResponse_Call {
	return &MockClientWithResponsesInterface_GetImageWithResponse_Call{Call: _e.mock.On("GetImageWithResponse",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetImageWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_GetImageWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetImageWithResponse_Call) Return(_a0 *storage.GetImageResponse, _a1 error) *MockClientWithResponsesInterface_GetImageWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetImageWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) (*storage.GetImageResponse, error)) *MockClientWithResponsesInterface_GetImageWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetSkuWithResponse provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetSkuWithResponse(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, reqEditors ...storage.RequestEditorFn) (*storage.GetSkuResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSkuWithResponse")
	}

	var r0 *storage.GetSkuResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) (*storage.GetSkuResponse, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) *storage.GetSkuResponse); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.GetSkuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetSkuWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSkuWithResponse'
type MockClientWithResponsesInterface_GetSkuWithResponse_Call struct {
	*mock.Call
}

// GetSkuWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetSkuWithResponse(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	return &MockClientWithResponsesInterface_GetSkuWithResponse_Call{Call: _e.mock.On("GetSkuWithResponse",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetSkuWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSkuWithResponse_Call) Return(_a0 *storage.GetSkuResponse, _a1 error) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetSkuWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) (*storage.GetSkuResponse, error)) *MockClientWithResponsesInterface_GetSkuWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListBlockStoragesWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListBlockStoragesWithResponse(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, params *storage.ListBlockStoragesParams, reqEditors ...storage.RequestEditorFn) (*storage.ListBlockStoragesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBlockStoragesWithResponse")
	}

	var r0 *storage.ListBlockStoragesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, *storage.ListBlockStoragesParams, ...storage.RequestEditorFn) (*storage.ListBlockStoragesResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, *storage.ListBlockStoragesParams, ...storage.RequestEditorFn) *storage.ListBlockStoragesResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ListBlockStoragesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, *storage.ListBlockStoragesParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlockStoragesWithResponse'
type MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call struct {
	*mock.Call
}

// ListBlockStoragesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - params *storage.ListBlockStoragesParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListBlockStoragesWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call {
	return &MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call{Call: _e.mock.On("ListBlockStoragesWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, params *storage.ListBlockStoragesParams, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(*storage.ListBlockStoragesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call) Return(_a0 *storage.ListBlockStoragesResponse, _a1 error) *MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, *storage.ListBlockStoragesParams, ...storage.RequestEditorFn) (*storage.ListBlockStoragesResponse, error)) *MockClientWithResponsesInterface_ListBlockStoragesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListImagesWithResponse provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListImagesWithResponse(ctx context.Context, tenant storage.Tenant, params *storage.ListImagesParams, reqEditors ...storage.RequestEditorFn) (*storage.ListImagesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImagesWithResponse")
	}

	var r0 *storage.ListImagesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, *storage.ListImagesParams, ...storage.RequestEditorFn) (*storage.ListImagesResponse, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, *storage.ListImagesParams, ...storage.RequestEditorFn) *storage.ListImagesResponse); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ListImagesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, *storage.ListImagesParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListImagesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImagesWithResponse'
type MockClientWithResponsesInterface_ListImagesWithResponse_Call struct {
	*mock.Call
}

// ListImagesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - params *storage.ListImagesParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListImagesWithResponse(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListImagesWithResponse_Call {
	return &MockClientWithResponsesInterface_ListImagesWithResponse_Call{Call: _e.mock.On("ListImagesWithResponse",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListImagesWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, params *storage.ListImagesParams, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_ListImagesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(*storage.ListImagesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListImagesWithResponse_Call) Return(_a0 *storage.ListImagesResponse, _a1 error) *MockClientWithResponsesInterface_ListImagesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListImagesWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, *storage.ListImagesParams, ...storage.RequestEditorFn) (*storage.ListImagesResponse, error)) *MockClientWithResponsesInterface_ListImagesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListSkusWithResponse provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListSkusWithResponse(ctx context.Context, tenant storage.Tenant, params *storage.ListSkusParams, reqEditors ...storage.RequestEditorFn) (*storage.ListSkusResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkusWithResponse")
	}

	var r0 *storage.ListSkusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, *storage.ListSkusParams, ...storage.RequestEditorFn) (*storage.ListSkusResponse, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, *storage.ListSkusParams, ...storage.RequestEditorFn) *storage.ListSkusResponse); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ListSkusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, *storage.ListSkusParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListSkusWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkusWithResponse'
type MockClientWithResponsesInterface_ListSkusWithResponse_Call struct {
	*mock.Call
}

// ListSkusWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - params *storage.ListSkusParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListSkusWithResponse(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	return &MockClientWithResponsesInterface_ListSkusWithResponse_Call{Call: _e.mock.On("ListSkusWithResponse",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListSkusWithResponse_Call) Run(run func(ctx context.Context, tenant storage.Tenant, params *storage.ListSkusParams, reqEditors ...storage.RequestEditorFn)) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(*storage.ListSkusParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSkusWithResponse_Call) Return(_a0 *storage.ListSkusResponse, _a1 error) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListSkusWithResponse_Call) RunAndReturn(run func(context.Context, storage.Tenant, *storage.ListSkusParams, ...storage.RequestEditorFn) (*storage.ListSkusResponse, error)) *MockClientWithResponsesInterface_ListSkusWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
