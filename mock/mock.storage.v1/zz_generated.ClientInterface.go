// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockstorage

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/eu-sovereign-cloud/go-sdk/pkg/foundation.storage.v1"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateBlockStorage provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateBlockStorage(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.CreateOrUpdateBlockStorageParams, body storage.CreateOrUpdateBlockStorageJSONRequestBody, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateBlockStorage")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, storage.CreateOrUpdateBlockStorageJSONRequestBody, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, storage.CreateOrUpdateBlockStorageJSONRequestBody, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, storage.CreateOrUpdateBlockStorageJSONRequestBody, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateBlockStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateBlockStorage'
type MockClientInterface_CreateOrUpdateBlockStorage_Call struct {
	*mock.Call
}

// CreateOrUpdateBlockStorage is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - params *storage.CreateOrUpdateBlockStorageParams
//   - body storage.CreateOrUpdateBlockStorageJSONRequestBody
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateBlockStorage(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateBlockStorage_Call {
	return &MockClientInterface_CreateOrUpdateBlockStorage_Call{Call: _e.mock.On("CreateOrUpdateBlockStorage",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateBlockStorage_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.CreateOrUpdateBlockStorageParams, body storage.CreateOrUpdateBlockStorageJSONRequestBody, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_CreateOrUpdateBlockStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(storage.ResourceName), args[4].(*storage.CreateOrUpdateBlockStorageParams), args[5].(storage.CreateOrUpdateBlockStorageJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateBlockStorage_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateBlockStorage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateBlockStorage_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, storage.CreateOrUpdateBlockStorageJSONRequestBody, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateBlockStorage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateBlockStorageWithBody provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateBlockStorageWithBody(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.CreateOrUpdateBlockStorageParams, contentType string, body io.Reader, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateBlockStorageWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, string, io.Reader, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, string, io.Reader, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, string, io.Reader, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateBlockStorageWithBody'
type MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateBlockStorageWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - params *storage.CreateOrUpdateBlockStorageParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateBlockStorageWithBody(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call {
	return &MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call{Call: _e.mock.On("CreateOrUpdateBlockStorageWithBody",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.CreateOrUpdateBlockStorageParams, contentType string, body io.Reader, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(storage.ResourceName), args[4].(*storage.CreateOrUpdateBlockStorageParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.CreateOrUpdateBlockStorageParams, string, io.Reader, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateBlockStorageWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateImage provides a mock function with given fields: ctx, tenant, name, params, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateImage(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.CreateOrUpdateImageParams, body storage.CreateOrUpdateImageJSONRequestBody, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateImage")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, storage.CreateOrUpdateImageJSONRequestBody, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, storage.CreateOrUpdateImageJSONRequestBody, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, storage.CreateOrUpdateImageJSONRequestBody, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateImage'
type MockClientInterface_CreateOrUpdateImage_Call struct {
	*mock.Call
}

// CreateOrUpdateImage is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - params *storage.CreateOrUpdateImageParams
//   - body storage.CreateOrUpdateImageJSONRequestBody
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateImage(ctx interface{}, tenant interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateImage_Call {
	return &MockClientInterface_CreateOrUpdateImage_Call{Call: _e.mock.On("CreateOrUpdateImage",
		append([]interface{}{ctx, tenant, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateImage_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.CreateOrUpdateImageParams, body storage.CreateOrUpdateImageJSONRequestBody, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_CreateOrUpdateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), args[3].(*storage.CreateOrUpdateImageParams), args[4].(storage.CreateOrUpdateImageJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateImage_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateImage_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, storage.CreateOrUpdateImageJSONRequestBody, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateImage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateImageWithBody provides a mock function with given fields: ctx, tenant, name, params, contentType, body, reqEditors
func (_m *MockClientInterface) CreateOrUpdateImageWithBody(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.CreateOrUpdateImageParams, contentType string, body io.Reader, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateImageWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, string, io.Reader, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, string, io.Reader, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, string, io.Reader, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateOrUpdateImageWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateImageWithBody'
type MockClientInterface_CreateOrUpdateImageWithBody_Call struct {
	*mock.Call
}

// CreateOrUpdateImageWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - params *storage.CreateOrUpdateImageParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) CreateOrUpdateImageWithBody(ctx interface{}, tenant interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_CreateOrUpdateImageWithBody_Call {
	return &MockClientInterface_CreateOrUpdateImageWithBody_Call{Call: _e.mock.On("CreateOrUpdateImageWithBody",
		append([]interface{}{ctx, tenant, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_CreateOrUpdateImageWithBody_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.CreateOrUpdateImageParams, contentType string, body io.Reader, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_CreateOrUpdateImageWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), args[3].(*storage.CreateOrUpdateImageParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateImageWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_CreateOrUpdateImageWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateOrUpdateImageWithBody_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, *storage.CreateOrUpdateImageParams, string, io.Reader, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_CreateOrUpdateImageWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBlockStorage provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientInterface) DeleteBlockStorage(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.DeleteBlockStorageParams, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlockStorage")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.DeleteBlockStorageParams, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.DeleteBlockStorageParams, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.DeleteBlockStorageParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteBlockStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlockStorage'
type MockClientInterface_DeleteBlockStorage_Call struct {
	*mock.Call
}

// DeleteBlockStorage is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - params *storage.DeleteBlockStorageParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteBlockStorage(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteBlockStorage_Call {
	return &MockClientInterface_DeleteBlockStorage_Call{Call: _e.mock.On("DeleteBlockStorage",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteBlockStorage_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, params *storage.DeleteBlockStorageParams, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_DeleteBlockStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(storage.ResourceName), args[4].(*storage.DeleteBlockStorageParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteBlockStorage_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteBlockStorage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteBlockStorage_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, *storage.DeleteBlockStorageParams, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteBlockStorage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteImage provides a mock function with given fields: ctx, tenant, name, params, reqEditors
func (_m *MockClientInterface) DeleteImage(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.DeleteImageParams, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.DeleteImageParams, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.DeleteImageParams, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, *storage.DeleteImageParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteImage'
type MockClientInterface_DeleteImage_Call struct {
	*mock.Call
}

// DeleteImage is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - params *storage.DeleteImageParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteImage(ctx interface{}, tenant interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteImage_Call {
	return &MockClientInterface_DeleteImage_Call{Call: _e.mock.On("DeleteImage",
		append([]interface{}{ctx, tenant, name, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteImage_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, params *storage.DeleteImageParams, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_DeleteImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), args[3].(*storage.DeleteImageParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteImage_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteImage_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, *storage.DeleteImageParams, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockStorage provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientInterface) GetBlockStorage(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockStorage")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetBlockStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockStorage'
type MockClientInterface_GetBlockStorage_Call struct {
	*mock.Call
}

// GetBlockStorage is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - name storage.ResourceName
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetBlockStorage(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetBlockStorage_Call {
	return &MockClientInterface_GetBlockStorage_Call{Call: _e.mock.On("GetBlockStorage",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetBlockStorage_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, name storage.ResourceName, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_GetBlockStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(storage.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetBlockStorage_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetBlockStorage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetBlockStorage_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, storage.ResourceName, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetBlockStorage_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientInterface) GetImage(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockClientInterface_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetImage(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetImage_Call {
	return &MockClientInterface_GetImage_Call{Call: _e.mock.On("GetImage",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetImage_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetImage_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetImage_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetSku provides a mock function with given fields: ctx, tenant, name, reqEditors
func (_m *MockClientInterface) GetSku(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSku")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSku'
type MockClientInterface_GetSku_Call struct {
	*mock.Call
}

// GetSku is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - name storage.ResourceName
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetSku(ctx interface{}, tenant interface{}, name interface{}, reqEditors ...interface{}) *MockClientInterface_GetSku_Call {
	return &MockClientInterface_GetSku_Call{Call: _e.mock.On("GetSku",
		append([]interface{}{ctx, tenant, name}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetSku_Call) Run(run func(ctx context.Context, tenant storage.Tenant, name storage.ResourceName, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_GetSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetSku_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetSku_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetSku_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.ResourceName, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetSku_Call {
	_c.Call.Return(run)
	return _c
}

// ListBlockStorages provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientInterface) ListBlockStorages(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, params *storage.ListBlockStoragesParams, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBlockStorages")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, *storage.ListBlockStoragesParams, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, storage.Workspace, *storage.ListBlockStoragesParams, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, storage.Workspace, *storage.ListBlockStoragesParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListBlockStorages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlockStorages'
type MockClientInterface_ListBlockStorages_Call struct {
	*mock.Call
}

// ListBlockStorages is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - workspace storage.Workspace
//   - params *storage.ListBlockStoragesParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListBlockStorages(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListBlockStorages_Call {
	return &MockClientInterface_ListBlockStorages_Call{Call: _e.mock.On("ListBlockStorages",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListBlockStorages_Call) Run(run func(ctx context.Context, tenant storage.Tenant, workspace storage.Workspace, params *storage.ListBlockStoragesParams, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_ListBlockStorages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(storage.Workspace), args[3].(*storage.ListBlockStoragesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListBlockStorages_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListBlockStorages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListBlockStorages_Call) RunAndReturn(run func(context.Context, storage.Tenant, storage.Workspace, *storage.ListBlockStoragesParams, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListBlockStorages_Call {
	_c.Call.Return(run)
	return _c
}

// ListImages provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientInterface) ListImages(ctx context.Context, tenant storage.Tenant, params *storage.ListImagesParams, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImages")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, *storage.ListImagesParams, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, *storage.ListImagesParams, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, *storage.ListImagesParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImages'
type MockClientInterface_ListImages_Call struct {
	*mock.Call
}

// ListImages is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - params *storage.ListImagesParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListImages(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListImages_Call {
	return &MockClientInterface_ListImages_Call{Call: _e.mock.On("ListImages",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListImages_Call) Run(run func(ctx context.Context, tenant storage.Tenant, params *storage.ListImagesParams, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_ListImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(*storage.ListImagesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListImages_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListImages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListImages_Call) RunAndReturn(run func(context.Context, storage.Tenant, *storage.ListImagesParams, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListImages_Call {
	_c.Call.Return(run)
	return _c
}

// ListSkus provides a mock function with given fields: ctx, tenant, params, reqEditors
func (_m *MockClientInterface) ListSkus(ctx context.Context, tenant storage.Tenant, params *storage.ListSkusParams, reqEditors ...storage.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkus")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, *storage.ListSkusParams, ...storage.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, tenant, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Tenant, *storage.ListSkusParams, ...storage.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, tenant, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Tenant, *storage.ListSkusParams, ...storage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ListSkus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkus'
type MockClientInterface_ListSkus_Call struct {
	*mock.Call
}

// ListSkus is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant storage.Tenant
//   - params *storage.ListSkusParams
//   - reqEditors ...storage.RequestEditorFn
func (_e *MockClientInterface_Expecter) ListSkus(ctx interface{}, tenant interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_ListSkus_Call {
	return &MockClientInterface_ListSkus_Call{Call: _e.mock.On("ListSkus",
		append([]interface{}{ctx, tenant, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_ListSkus_Call) Run(run func(ctx context.Context, tenant storage.Tenant, params *storage.ListSkusParams, reqEditors ...storage.RequestEditorFn)) *MockClientInterface_ListSkus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(storage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(storage.Tenant), args[2].(*storage.ListSkusParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ListSkus_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_ListSkus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_ListSkus_Call) RunAndReturn(run func(context.Context, storage.Tenant, *storage.ListSkusParams, ...storage.RequestEditorFn) (*http.Response, error)) *MockClientInterface_ListSkus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
