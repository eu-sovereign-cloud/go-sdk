// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockstorage

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockServeMux is an autogenerated mock type for the ServeMux type
type MockServeMux struct {
	mock.Mock
}

type MockServeMux_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServeMux) EXPECT() *MockServeMux_Expecter {
	return &MockServeMux_Expecter{mock: &_m.Mock}
}

// HandleFunc provides a mock function with given fields: pattern, handler
func (_m *MockServeMux) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
	_m.Called(pattern, handler)
}

// MockServeMux_HandleFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleFunc'
type MockServeMux_HandleFunc_Call struct {
	*mock.Call
}

// HandleFunc is a helper method to define mock.On call
//   - pattern string
//   - handler func(http.ResponseWriter , *http.Request)
func (_e *MockServeMux_Expecter) HandleFunc(pattern interface{}, handler interface{}) *MockServeMux_HandleFunc_Call {
	return &MockServeMux_HandleFunc_Call{Call: _e.mock.On("HandleFunc", pattern, handler)}
}

func (_c *MockServeMux_HandleFunc_Call) Run(run func(pattern string, handler func(http.ResponseWriter, *http.Request))) *MockServeMux_HandleFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(http.ResponseWriter, *http.Request)))
	})
	return _c
}

func (_c *MockServeMux_HandleFunc_Call) Return() *MockServeMux_HandleFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServeMux_HandleFunc_Call) RunAndReturn(run func(string, func(http.ResponseWriter, *http.Request))) *MockServeMux_HandleFunc_Call {
	_c.Run(run)
	return _c
}

// ServeHTTP provides a mock function with given fields: w, r
func (_m *MockServeMux) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// MockServeMux_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type MockServeMux_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockServeMux_Expecter) ServeHTTP(w interface{}, r interface{}) *MockServeMux_ServeHTTP_Call {
	return &MockServeMux_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", w, r)}
}

func (_c *MockServeMux_ServeHTTP_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServeMux_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockServeMux_ServeHTTP_Call) Return() *MockServeMux_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServeMux_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockServeMux_ServeHTTP_Call {
	_c.Run(run)
	return _c
}

// NewMockServeMux creates a new instance of MockServeMux. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServeMux(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServeMux {
	mock := &MockServeMux{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
