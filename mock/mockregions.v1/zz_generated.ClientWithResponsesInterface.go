// Code generated by mockery v2.51.1. DO NOT EDIT.

package mockregions

import (
	context "context"

	regions "github.com/eu-sovereign-cloud/go-sdk/pkg/regions.v1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// GetRegionWithResponse provides a mock function with given fields: ctx, id, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetRegionWithResponse(ctx context.Context, id string, name string, reqEditors ...regions.RequestEditorFn) (*regions.GetRegionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegionWithResponse")
	}

	var r0 *regions.GetRegionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...regions.RequestEditorFn) (*regions.GetRegionResponse, error)); ok {
		return rf(ctx, id, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...regions.RequestEditorFn) *regions.GetRegionResponse); ok {
		r0 = rf(ctx, id, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*regions.GetRegionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...regions.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetRegionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegionWithResponse'
type MockClientWithResponsesInterface_GetRegionWithResponse_Call struct {
	*mock.Call
}

// GetRegionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - reqEditors ...regions.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetRegionWithResponse(ctx interface{}, id interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetRegionWithResponse_Call {
	return &MockClientWithResponsesInterface_GetRegionWithResponse_Call{Call: _e.mock.On("GetRegionWithResponse",
		append([]interface{}{ctx, id, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetRegionWithResponse_Call) Run(run func(ctx context.Context, id string, name string, reqEditors ...regions.RequestEditorFn)) *MockClientWithResponsesInterface_GetRegionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]regions.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(regions.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetRegionWithResponse_Call) Return(_a0 *regions.GetRegionResponse, _a1 error) *MockClientWithResponsesInterface_GetRegionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetRegionWithResponse_Call) RunAndReturn(run func(context.Context, string, string, ...regions.RequestEditorFn) (*regions.GetRegionResponse, error)) *MockClientWithResponsesInterface_GetRegionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListRegionsWithResponse provides a mock function with given fields: ctx, id, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListRegionsWithResponse(ctx context.Context, id string, params *regions.ListRegionsParams, reqEditors ...regions.RequestEditorFn) (*regions.ListRegionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRegionsWithResponse")
	}

	var r0 *regions.ListRegionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *regions.ListRegionsParams, ...regions.RequestEditorFn) (*regions.ListRegionsResponse, error)); ok {
		return rf(ctx, id, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *regions.ListRegionsParams, ...regions.RequestEditorFn) *regions.ListRegionsResponse); ok {
		r0 = rf(ctx, id, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*regions.ListRegionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *regions.ListRegionsParams, ...regions.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListRegionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRegionsWithResponse'
type MockClientWithResponsesInterface_ListRegionsWithResponse_Call struct {
	*mock.Call
}

// ListRegionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - params *regions.ListRegionsParams
//   - reqEditors ...regions.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListRegionsWithResponse(ctx interface{}, id interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListRegionsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListRegionsWithResponse_Call{Call: _e.mock.On("ListRegionsWithResponse",
		append([]interface{}{ctx, id, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListRegionsWithResponse_Call) Run(run func(ctx context.Context, id string, params *regions.ListRegionsParams, reqEditors ...regions.RequestEditorFn)) *MockClientWithResponsesInterface_ListRegionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]regions.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(regions.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*regions.ListRegionsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListRegionsWithResponse_Call) Return(_a0 *regions.ListRegionsResponse, _a1 error) *MockClientWithResponsesInterface_ListRegionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListRegionsWithResponse_Call) RunAndReturn(run func(context.Context, string, *regions.ListRegionsParams, ...regions.RequestEditorFn) (*regions.ListRegionsResponse, error)) *MockClientWithResponsesInterface_ListRegionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
