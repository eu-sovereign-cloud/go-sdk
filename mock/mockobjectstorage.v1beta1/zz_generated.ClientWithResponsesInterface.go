// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockobjectstorage

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	objectstorage "github.com/eu-sovereign-cloud/go-sdk/pkg/extensions.objectstorage.v1beta1"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateAccountWithBodyWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateAccountWithBodyWithResponse(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, name objectstorage.ResourceName, params *objectstorage.CreateOrUpdateAccountParams, contentType string, body io.Reader, reqEditors ...objectstorage.RequestEditorFn) (*objectstorage.CreateOrUpdateAccountResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateAccountWithBodyWithResponse")
	}

	var r0 *objectstorage.CreateOrUpdateAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.CreateOrUpdateAccountParams, string, io.Reader, ...objectstorage.RequestEditorFn) (*objectstorage.CreateOrUpdateAccountResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.CreateOrUpdateAccountParams, string, io.Reader, ...objectstorage.RequestEditorFn) *objectstorage.CreateOrUpdateAccountResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objectstorage.CreateOrUpdateAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.CreateOrUpdateAccountParams, string, io.Reader, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateAccountWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateAccountWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant objectstorage.Tenant
//   - workspace objectstorage.Workspace
//   - name objectstorage.ResourceName
//   - params *objectstorage.CreateOrUpdateAccountParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateAccountWithBodyWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call{Call: _e.mock.On("CreateOrUpdateAccountWithBodyWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call) Run(run func(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, name objectstorage.ResourceName, params *objectstorage.CreateOrUpdateAccountParams, contentType string, body io.Reader, reqEditors ...objectstorage.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(objectstorage.Tenant), args[2].(objectstorage.Workspace), args[3].(objectstorage.ResourceName), args[4].(*objectstorage.CreateOrUpdateAccountParams), args[5].(string), args[6].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call) Return(_a0 *objectstorage.CreateOrUpdateAccountResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.CreateOrUpdateAccountParams, string, io.Reader, ...objectstorage.RequestEditorFn) (*objectstorage.CreateOrUpdateAccountResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateAccountWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateAccountWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, body, reqEditors
func (_m *MockClientWithResponsesInterface) CreateOrUpdateAccountWithResponse(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, name objectstorage.ResourceName, params *objectstorage.CreateOrUpdateAccountParams, body objectstorage.CreateOrUpdateAccountJSONRequestBody, reqEditors ...objectstorage.RequestEditorFn) (*objectstorage.CreateOrUpdateAccountResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateAccountWithResponse")
	}

	var r0 *objectstorage.CreateOrUpdateAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.CreateOrUpdateAccountParams, objectstorage.CreateOrUpdateAccountJSONRequestBody, ...objectstorage.RequestEditorFn) (*objectstorage.CreateOrUpdateAccountResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.CreateOrUpdateAccountParams, objectstorage.CreateOrUpdateAccountJSONRequestBody, ...objectstorage.RequestEditorFn) *objectstorage.CreateOrUpdateAccountResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objectstorage.CreateOrUpdateAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.CreateOrUpdateAccountParams, objectstorage.CreateOrUpdateAccountJSONRequestBody, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateAccountWithResponse'
type MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call struct {
	*mock.Call
}

// CreateOrUpdateAccountWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant objectstorage.Tenant
//   - workspace objectstorage.Workspace
//   - name objectstorage.ResourceName
//   - params *objectstorage.CreateOrUpdateAccountParams
//   - body objectstorage.CreateOrUpdateAccountJSONRequestBody
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) CreateOrUpdateAccountWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call{Call: _e.mock.On("CreateOrUpdateAccountWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call) Run(run func(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, name objectstorage.ResourceName, params *objectstorage.CreateOrUpdateAccountParams, body objectstorage.CreateOrUpdateAccountJSONRequestBody, reqEditors ...objectstorage.RequestEditorFn)) *MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(objectstorage.Tenant), args[2].(objectstorage.Workspace), args[3].(objectstorage.ResourceName), args[4].(*objectstorage.CreateOrUpdateAccountParams), args[5].(objectstorage.CreateOrUpdateAccountJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call) Return(_a0 *objectstorage.CreateOrUpdateAccountResponse, _a1 error) *MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call) RunAndReturn(run func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.CreateOrUpdateAccountParams, objectstorage.CreateOrUpdateAccountJSONRequestBody, ...objectstorage.RequestEditorFn) (*objectstorage.CreateOrUpdateAccountResponse, error)) *MockClientWithResponsesInterface_CreateOrUpdateAccountWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, params, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteAccountWithResponse(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, name objectstorage.ResourceName, params *objectstorage.DeleteAccountParams, reqEditors ...objectstorage.RequestEditorFn) (*objectstorage.DeleteAccountResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountWithResponse")
	}

	var r0 *objectstorage.DeleteAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.DeleteAccountParams, ...objectstorage.RequestEditorFn) (*objectstorage.DeleteAccountResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.DeleteAccountParams, ...objectstorage.RequestEditorFn) *objectstorage.DeleteAccountResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objectstorage.DeleteAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.DeleteAccountParams, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteAccountWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountWithResponse'
type MockClientWithResponsesInterface_DeleteAccountWithResponse_Call struct {
	*mock.Call
}

// DeleteAccountWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant objectstorage.Tenant
//   - workspace objectstorage.Workspace
//   - name objectstorage.ResourceName
//   - params *objectstorage.DeleteAccountParams
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteAccountWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteAccountWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteAccountWithResponse_Call{Call: _e.mock.On("DeleteAccountWithResponse",
		append([]interface{}{ctx, tenant, workspace, name, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteAccountWithResponse_Call) Run(run func(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, name objectstorage.ResourceName, params *objectstorage.DeleteAccountParams, reqEditors ...objectstorage.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteAccountWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(objectstorage.Tenant), args[2].(objectstorage.Workspace), args[3].(objectstorage.ResourceName), args[4].(*objectstorage.DeleteAccountParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteAccountWithResponse_Call) Return(_a0 *objectstorage.DeleteAccountResponse, _a1 error) *MockClientWithResponsesInterface_DeleteAccountWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteAccountWithResponse_Call) RunAndReturn(run func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, *objectstorage.DeleteAccountParams, ...objectstorage.RequestEditorFn) (*objectstorage.DeleteAccountResponse, error)) *MockClientWithResponsesInterface_DeleteAccountWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountWithResponse provides a mock function with given fields: ctx, tenant, workspace, name, reqEditors
func (_m *MockClientWithResponsesInterface) GetAccountWithResponse(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, name objectstorage.ResourceName, reqEditors ...objectstorage.RequestEditorFn) (*objectstorage.GetAccountResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountWithResponse")
	}

	var r0 *objectstorage.GetAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, ...objectstorage.RequestEditorFn) (*objectstorage.GetAccountResponse, error)); ok {
		return rf(ctx, tenant, workspace, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, ...objectstorage.RequestEditorFn) *objectstorage.GetAccountResponse); ok {
		r0 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objectstorage.GetAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetAccountWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountWithResponse'
type MockClientWithResponsesInterface_GetAccountWithResponse_Call struct {
	*mock.Call
}

// GetAccountWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant objectstorage.Tenant
//   - workspace objectstorage.Workspace
//   - name objectstorage.ResourceName
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetAccountWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, name interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetAccountWithResponse_Call {
	return &MockClientWithResponsesInterface_GetAccountWithResponse_Call{Call: _e.mock.On("GetAccountWithResponse",
		append([]interface{}{ctx, tenant, workspace, name}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetAccountWithResponse_Call) Run(run func(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, name objectstorage.ResourceName, reqEditors ...objectstorage.RequestEditorFn)) *MockClientWithResponsesInterface_GetAccountWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(objectstorage.Tenant), args[2].(objectstorage.Workspace), args[3].(objectstorage.ResourceName), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAccountWithResponse_Call) Return(_a0 *objectstorage.GetAccountResponse, _a1 error) *MockClientWithResponsesInterface_GetAccountWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAccountWithResponse_Call) RunAndReturn(run func(context.Context, objectstorage.Tenant, objectstorage.Workspace, objectstorage.ResourceName, ...objectstorage.RequestEditorFn) (*objectstorage.GetAccountResponse, error)) *MockClientWithResponsesInterface_GetAccountWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccountsWithResponse provides a mock function with given fields: ctx, tenant, workspace, params, reqEditors
func (_m *MockClientWithResponsesInterface) ListAccountsWithResponse(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, params *objectstorage.ListAccountsParams, reqEditors ...objectstorage.RequestEditorFn) (*objectstorage.ListAccountsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenant, workspace, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountsWithResponse")
	}

	var r0 *objectstorage.ListAccountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, *objectstorage.ListAccountsParams, ...objectstorage.RequestEditorFn) (*objectstorage.ListAccountsResponse, error)); ok {
		return rf(ctx, tenant, workspace, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, *objectstorage.ListAccountsParams, ...objectstorage.RequestEditorFn) *objectstorage.ListAccountsResponse); ok {
		r0 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objectstorage.ListAccountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, objectstorage.Tenant, objectstorage.Workspace, *objectstorage.ListAccountsParams, ...objectstorage.RequestEditorFn) error); ok {
		r1 = rf(ctx, tenant, workspace, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_ListAccountsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccountsWithResponse'
type MockClientWithResponsesInterface_ListAccountsWithResponse_Call struct {
	*mock.Call
}

// ListAccountsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant objectstorage.Tenant
//   - workspace objectstorage.Workspace
//   - params *objectstorage.ListAccountsParams
//   - reqEditors ...objectstorage.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) ListAccountsWithResponse(ctx interface{}, tenant interface{}, workspace interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_ListAccountsWithResponse_Call {
	return &MockClientWithResponsesInterface_ListAccountsWithResponse_Call{Call: _e.mock.On("ListAccountsWithResponse",
		append([]interface{}{ctx, tenant, workspace, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_ListAccountsWithResponse_Call) Run(run func(ctx context.Context, tenant objectstorage.Tenant, workspace objectstorage.Workspace, params *objectstorage.ListAccountsParams, reqEditors ...objectstorage.RequestEditorFn)) *MockClientWithResponsesInterface_ListAccountsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objectstorage.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(objectstorage.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(objectstorage.Tenant), args[2].(objectstorage.Workspace), args[3].(*objectstorage.ListAccountsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_ListAccountsWithResponse_Call) Return(_a0 *objectstorage.ListAccountsResponse, _a1 error) *MockClientWithResponsesInterface_ListAccountsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_ListAccountsWithResponse_Call) RunAndReturn(run func(context.Context, objectstorage.Tenant, objectstorage.Workspace, *objectstorage.ListAccountsParams, ...objectstorage.RequestEditorFn) (*objectstorage.ListAccountsResponse, error)) *MockClientWithResponsesInterface_ListAccountsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
